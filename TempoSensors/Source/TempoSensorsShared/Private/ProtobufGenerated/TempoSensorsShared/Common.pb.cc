// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoSensorsShared/Common.proto

#include "TempoSensorsShared/Common.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf_tempo;
namespace _pbi = ::google::protobuf_tempo::internal;
namespace _fl = ::google::protobuf_tempo::internal::field_layout;
namespace TempoSensorsShared {

inline constexpr MeasurementHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sensor_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sequence_id_{::uint64_t{0u}},
        capture_time_{0},
        transmission_time_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MeasurementHeader::MeasurementHeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MeasurementHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeasurementHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeasurementHeaderDefaultTypeInternal() {}
  union {
    MeasurementHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOSENSORSSHARED_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasurementHeaderDefaultTypeInternal _MeasurementHeader_default_instance_;
}  // namespace TempoSensorsShared
static ::_pb::Metadata file_level_metadata_TempoSensorsShared_2fCommon_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_TempoSensorsShared_2fCommon_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_TempoSensorsShared_2fCommon_2eproto = nullptr;
const ::uint32_t TableStruct_TempoSensorsShared_2fCommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoSensorsShared::MeasurementHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoSensorsShared::MeasurementHeader, _impl_.sequence_id_),
    PROTOBUF_FIELD_OFFSET(::TempoSensorsShared::MeasurementHeader, _impl_.capture_time_),
    PROTOBUF_FIELD_OFFSET(::TempoSensorsShared::MeasurementHeader, _impl_.transmission_time_),
    PROTOBUF_FIELD_OFFSET(::TempoSensorsShared::MeasurementHeader, _impl_.sensor_name_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::TempoSensorsShared::MeasurementHeader)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::TempoSensorsShared::_MeasurementHeader_default_instance_._instance,
};
const char descriptor_table_protodef_TempoSensorsShared_2fCommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037TempoSensorsShared/Common.proto\022\022Tempo"
    "SensorsShared\"n\n\021MeasurementHeader\022\023\n\013se"
    "quence_id\030\001 \001(\004\022\024\n\014capture_time\030\002 \001(\001\022\031\n"
    "\021transmission_time\030\003 \001(\001\022\023\n\013sensor_name\030"
    "\004 \001(\tb\006proto3"
};
static ::absl_tempo::once_flag descriptor_table_TempoSensorsShared_2fCommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TempoSensorsShared_2fCommon_2eproto = {
    false,
    false,
    173,
    descriptor_table_protodef_TempoSensorsShared_2fCommon_2eproto,
    "TempoSensorsShared/Common.proto",
    &descriptor_table_TempoSensorsShared_2fCommon_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_TempoSensorsShared_2fCommon_2eproto::offsets,
    file_level_metadata_TempoSensorsShared_2fCommon_2eproto,
    file_level_enum_descriptors_TempoSensorsShared_2fCommon_2eproto,
    file_level_service_descriptors_TempoSensorsShared_2fCommon_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TempoSensorsShared_2fCommon_2eproto_getter() {
  return &descriptor_table_TempoSensorsShared_2fCommon_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TempoSensorsShared_2fCommon_2eproto(&descriptor_table_TempoSensorsShared_2fCommon_2eproto);
namespace TempoSensorsShared {
// ===================================================================

class MeasurementHeader::_Internal {
 public:
};

MeasurementHeader::MeasurementHeader(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoSensorsShared.MeasurementHeader)
}
inline PROTOBUF_NDEBUG_INLINE MeasurementHeader::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : sensor_name_(arena, from.sensor_name_),
        _cached_size_{0} {}

MeasurementHeader::MeasurementHeader(
    ::google::protobuf_tempo::Arena* arena,
    const MeasurementHeader& from)
    : ::google::protobuf_tempo::Message(arena) {
  MeasurementHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sequence_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sequence_id_),
           offsetof(Impl_, transmission_time_) -
               offsetof(Impl_, sequence_id_) +
               sizeof(Impl_::transmission_time_));

  // @@protoc_insertion_point(copy_constructor:TempoSensorsShared.MeasurementHeader)
}
inline PROTOBUF_NDEBUG_INLINE MeasurementHeader::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : sensor_name_(arena),
        _cached_size_{0} {}

inline void MeasurementHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sequence_id_),
           0,
           offsetof(Impl_, transmission_time_) -
               offsetof(Impl_, sequence_id_) +
               sizeof(Impl_::transmission_time_));
}
MeasurementHeader::~MeasurementHeader() {
  // @@protoc_insertion_point(destructor:TempoSensorsShared.MeasurementHeader)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void MeasurementHeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.sensor_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MeasurementHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoSensorsShared.MeasurementHeader)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_name_.ClearToEmpty();
  ::memset(&_impl_.sequence_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.transmission_time_) -
      reinterpret_cast<char*>(&_impl_.sequence_id_)) + sizeof(_impl_.transmission_time_));
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* MeasurementHeader::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 56, 2> MeasurementHeader::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MeasurementHeader_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string sensor_name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MeasurementHeader, _impl_.sensor_name_)}},
    // uint64 sequence_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MeasurementHeader, _impl_.sequence_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MeasurementHeader, _impl_.sequence_id_)}},
    // double capture_time = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(MeasurementHeader, _impl_.capture_time_)}},
    // double transmission_time = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(MeasurementHeader, _impl_.transmission_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 sequence_id = 1;
    {PROTOBUF_FIELD_OFFSET(MeasurementHeader, _impl_.sequence_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // double capture_time = 2;
    {PROTOBUF_FIELD_OFFSET(MeasurementHeader, _impl_.capture_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double transmission_time = 3;
    {PROTOBUF_FIELD_OFFSET(MeasurementHeader, _impl_.transmission_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string sensor_name = 4;
    {PROTOBUF_FIELD_OFFSET(MeasurementHeader, _impl_.sensor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\0\0\0\13\0\0\0"
    "TempoSensorsShared.MeasurementHeader"
    "sensor_name"
  }},
};

::uint8_t* MeasurementHeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoSensorsShared.MeasurementHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 sequence_id = 1;
  if (this->_internal_sequence_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sequence_id(), target);
  }

  // double capture_time = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capture_time = this->_internal_capture_time();
  ::uint64_t raw_capture_time;
  memcpy(&raw_capture_time, &tmp_capture_time, sizeof(tmp_capture_time));
  if (raw_capture_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_capture_time(), target);
  }

  // double transmission_time = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_transmission_time = this->_internal_transmission_time();
  ::uint64_t raw_transmission_time;
  memcpy(&raw_transmission_time, &tmp_transmission_time, sizeof(tmp_transmission_time));
  if (raw_transmission_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_transmission_time(), target);
  }

  // string sensor_name = 4;
  if (!this->_internal_sensor_name().empty()) {
    const std::string& _s = this->_internal_sensor_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoSensorsShared.MeasurementHeader.sensor_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoSensorsShared.MeasurementHeader)
  return target;
}

::size_t MeasurementHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoSensorsShared.MeasurementHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sensor_name = 4;
  if (!this->_internal_sensor_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_sensor_name());
  }

  // uint64 sequence_id = 1;
  if (this->_internal_sequence_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence_id());
  }

  // double capture_time = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capture_time = this->_internal_capture_time();
  ::uint64_t raw_capture_time;
  memcpy(&raw_capture_time, &tmp_capture_time, sizeof(tmp_capture_time));
  if (raw_capture_time != 0) {
    total_size += 9;
  }

  // double transmission_time = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_transmission_time = this->_internal_transmission_time();
  ::uint64_t raw_transmission_time;
  memcpy(&raw_transmission_time, &tmp_transmission_time, sizeof(tmp_transmission_time));
  if (raw_transmission_time != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData MeasurementHeader::_class_data_ = {
    MeasurementHeader::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* MeasurementHeader::GetClassData() const {
  return &_class_data_;
}

void MeasurementHeader::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<MeasurementHeader*>(&to_msg);
  auto& from = static_cast<const MeasurementHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoSensorsShared.MeasurementHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sensor_name().empty()) {
    _this->_internal_set_sensor_name(from._internal_sensor_name());
  }
  if (from._internal_sequence_id() != 0) {
    _this->_internal_set_sequence_id(from._internal_sequence_id());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capture_time = from._internal_capture_time();
  ::uint64_t raw_capture_time;
  memcpy(&raw_capture_time, &tmp_capture_time, sizeof(tmp_capture_time));
  if (raw_capture_time != 0) {
    _this->_internal_set_capture_time(from._internal_capture_time());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_transmission_time = from._internal_transmission_time();
  ::uint64_t raw_transmission_time;
  memcpy(&raw_transmission_time, &tmp_transmission_time, sizeof(tmp_transmission_time));
  if (raw_transmission_time != 0) {
    _this->_internal_set_transmission_time(from._internal_transmission_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void MeasurementHeader::CopyFrom(const MeasurementHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoSensorsShared.MeasurementHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MeasurementHeader::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MeasurementHeader::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MeasurementHeader::InternalSwap(MeasurementHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sensor_name_, &other->_impl_.sensor_name_, arena);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeasurementHeader, _impl_.transmission_time_)
      + sizeof(MeasurementHeader::_impl_.transmission_time_)
      - PROTOBUF_FIELD_OFFSET(MeasurementHeader, _impl_.sequence_id_)>(
          reinterpret_cast<char*>(&_impl_.sequence_id_),
          reinterpret_cast<char*>(&other->_impl_.sequence_id_));
}

::google::protobuf_tempo::Metadata MeasurementHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoSensorsShared_2fCommon_2eproto_getter, &descriptor_table_TempoSensorsShared_2fCommon_2eproto_once,
      file_level_metadata_TempoSensorsShared_2fCommon_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoSensorsShared
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoSensorsShared/Common.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_TempoSensorsShared_2fCommon_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TempoSensorsShared_2fCommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TempoSensorsShared_2fCommon_2eproto TEMPOSENSORSSHARED_API

namespace google {
namespace protobuf_tempo {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf_tempo
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TEMPOSENSORSSHARED_API TableStruct_TempoSensorsShared_2fCommon_2eproto {
  static const ::uint32_t offsets[];
};
TEMPOSENSORSSHARED_API extern const ::google::protobuf_tempo::internal::DescriptorTable
    descriptor_table_TempoSensorsShared_2fCommon_2eproto;
namespace TempoSensorsShared {
class MeasurementHeader;
struct MeasurementHeaderDefaultTypeInternal;
TEMPOSENSORSSHARED_API extern MeasurementHeaderDefaultTypeInternal _MeasurementHeader_default_instance_;
}  // namespace TempoSensorsShared
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google

namespace TempoSensorsShared {

// ===================================================================


// -------------------------------------------------------------------

class TEMPOSENSORSSHARED_API MeasurementHeader final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoSensorsShared.MeasurementHeader) */ {
 public:
  inline MeasurementHeader() : MeasurementHeader(nullptr) {}
  ~MeasurementHeader() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MeasurementHeader(::google::protobuf_tempo::internal::ConstantInitialized);

  inline MeasurementHeader(const MeasurementHeader& from)
      : MeasurementHeader(nullptr, from) {}
  MeasurementHeader(MeasurementHeader&& from) noexcept
    : MeasurementHeader() {
    *this = ::std::move(from);
  }

  inline MeasurementHeader& operator=(const MeasurementHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementHeader& operator=(MeasurementHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeasurementHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeasurementHeader* internal_default_instance() {
    return reinterpret_cast<const MeasurementHeader*>(
               &_MeasurementHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MeasurementHeader& a, MeasurementHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasurementHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeasurementHeader* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeasurementHeader>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const MeasurementHeader& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const MeasurementHeader& from) {
    MeasurementHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(MeasurementHeader* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoSensorsShared.MeasurementHeader";
  }
  protected:
  explicit MeasurementHeader(::google::protobuf_tempo::Arena* arena);
  MeasurementHeader(::google::protobuf_tempo::Arena* arena, const MeasurementHeader& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorNameFieldNumber = 4,
    kSequenceIdFieldNumber = 1,
    kCaptureTimeFieldNumber = 2,
    kTransmissionTimeFieldNumber = 3,
  };
  // string sensor_name = 4;
  void clear_sensor_name() ;
  const std::string& sensor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sensor_name(Arg_&& arg, Args_... args);
  std::string* mutable_sensor_name();
  PROTOBUF_NODISCARD std::string* release_sensor_name();
  void set_allocated_sensor_name(std::string* value);

  private:
  const std::string& _internal_sensor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_name(
      const std::string& value);
  std::string* _internal_mutable_sensor_name();

  public:
  // uint64 sequence_id = 1;
  void clear_sequence_id() ;
  ::uint64_t sequence_id() const;
  void set_sequence_id(::uint64_t value);

  private:
  ::uint64_t _internal_sequence_id() const;
  void _internal_set_sequence_id(::uint64_t value);

  public:
  // double capture_time = 2;
  void clear_capture_time() ;
  double capture_time() const;
  void set_capture_time(double value);

  private:
  double _internal_capture_time() const;
  void _internal_set_capture_time(double value);

  public:
  // double transmission_time = 3;
  void clear_transmission_time() ;
  double transmission_time() const;
  void set_transmission_time(double value);

  private:
  double _internal_transmission_time() const;
  void _internal_set_transmission_time(double value);

  public:
  // @@protoc_insertion_point(class_scope:TempoSensorsShared.MeasurementHeader)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOSENSORSSHARED_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr sensor_name_;
    ::uint64_t sequence_id_;
    double capture_time_;
    double transmission_time_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoSensorsShared_2fCommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MeasurementHeader

// uint64 sequence_id = 1;
inline void MeasurementHeader::clear_sequence_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sequence_id_ = ::uint64_t{0u};
}
inline ::uint64_t MeasurementHeader::sequence_id() const {
  // @@protoc_insertion_point(field_get:TempoSensorsShared.MeasurementHeader.sequence_id)
  return _internal_sequence_id();
}
inline void MeasurementHeader::set_sequence_id(::uint64_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:TempoSensorsShared.MeasurementHeader.sequence_id)
}
inline ::uint64_t MeasurementHeader::_internal_sequence_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sequence_id_;
}
inline void MeasurementHeader::_internal_set_sequence_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sequence_id_ = value;
}

// double capture_time = 2;
inline void MeasurementHeader::clear_capture_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capture_time_ = 0;
}
inline double MeasurementHeader::capture_time() const {
  // @@protoc_insertion_point(field_get:TempoSensorsShared.MeasurementHeader.capture_time)
  return _internal_capture_time();
}
inline void MeasurementHeader::set_capture_time(double value) {
  _internal_set_capture_time(value);
  // @@protoc_insertion_point(field_set:TempoSensorsShared.MeasurementHeader.capture_time)
}
inline double MeasurementHeader::_internal_capture_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capture_time_;
}
inline void MeasurementHeader::_internal_set_capture_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.capture_time_ = value;
}

// double transmission_time = 3;
inline void MeasurementHeader::clear_transmission_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transmission_time_ = 0;
}
inline double MeasurementHeader::transmission_time() const {
  // @@protoc_insertion_point(field_get:TempoSensorsShared.MeasurementHeader.transmission_time)
  return _internal_transmission_time();
}
inline void MeasurementHeader::set_transmission_time(double value) {
  _internal_set_transmission_time(value);
  // @@protoc_insertion_point(field_set:TempoSensorsShared.MeasurementHeader.transmission_time)
}
inline double MeasurementHeader::_internal_transmission_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transmission_time_;
}
inline void MeasurementHeader::_internal_set_transmission_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transmission_time_ = value;
}

// string sensor_name = 4;
inline void MeasurementHeader::clear_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sensor_name_.ClearToEmpty();
}
inline const std::string& MeasurementHeader::sensor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoSensorsShared.MeasurementHeader.sensor_name)
  return _internal_sensor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MeasurementHeader::set_sensor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sensor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoSensorsShared.MeasurementHeader.sensor_name)
}
inline std::string* MeasurementHeader::mutable_sensor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sensor_name();
  // @@protoc_insertion_point(field_mutable:TempoSensorsShared.MeasurementHeader.sensor_name)
  return _s;
}
inline const std::string& MeasurementHeader::_internal_sensor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sensor_name_.Get();
}
inline void MeasurementHeader::_internal_set_sensor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sensor_name_.Set(value, GetArena());
}
inline std::string* MeasurementHeader::_internal_mutable_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sensor_name_.Mutable( GetArena());
}
inline std::string* MeasurementHeader::release_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoSensorsShared.MeasurementHeader.sensor_name)
  return _impl_.sensor_name_.Release();
}
inline void MeasurementHeader::set_allocated_sensor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sensor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sensor_name_.IsDefault()) {
          _impl_.sensor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoSensorsShared.MeasurementHeader.sensor_name)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoSensorsShared


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TempoSensorsShared_2fCommon_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoSensors/Sensors.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_TempoSensors_2fSensors_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TempoSensors_2fSensors_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "TempoCamera/Camera.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TempoSensors_2fSensors_2eproto TEMPOSENSORS_API

namespace google {
namespace protobuf_tempo {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf_tempo
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TEMPOSENSORS_API TableStruct_TempoSensors_2fSensors_2eproto {
  static const ::uint32_t offsets[];
};
TEMPOSENSORS_API extern const ::google::protobuf_tempo::internal::DescriptorTable
    descriptor_table_TempoSensors_2fSensors_2eproto;
namespace TempoSensors {
class AvailableSensorsRequest;
struct AvailableSensorsRequestDefaultTypeInternal;
TEMPOSENSORS_API extern AvailableSensorsRequestDefaultTypeInternal _AvailableSensorsRequest_default_instance_;
class AvailableSensorsResponse;
struct AvailableSensorsResponseDefaultTypeInternal;
TEMPOSENSORS_API extern AvailableSensorsResponseDefaultTypeInternal _AvailableSensorsResponse_default_instance_;
class SensorDescriptor;
struct SensorDescriptorDefaultTypeInternal;
TEMPOSENSORS_API extern SensorDescriptorDefaultTypeInternal _SensorDescriptor_default_instance_;
}  // namespace TempoSensors
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google

namespace TempoSensors {
enum MeasurementType : int {
  COLOR_IMAGE = 0,
  DEPTH_IMAGE = 1,
  LABEL_IMAGE = 2,
  MeasurementType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MeasurementType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

TEMPOSENSORS_API bool MeasurementType_IsValid(int value);
TEMPOSENSORS_API extern const uint32_t MeasurementType_internal_data_[];
constexpr MeasurementType MeasurementType_MIN = static_cast<MeasurementType>(0);
constexpr MeasurementType MeasurementType_MAX = static_cast<MeasurementType>(2);
constexpr int MeasurementType_ARRAYSIZE = 2 + 1;
TEMPOSENSORS_API const ::google::protobuf_tempo::EnumDescriptor*
MeasurementType_descriptor();
template <typename T>
const std::string& MeasurementType_Name(T value) {
  static_assert(std::is_same<T, MeasurementType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MeasurementType_Name().");
  return MeasurementType_Name(static_cast<MeasurementType>(value));
}
template <>
inline const std::string& MeasurementType_Name(MeasurementType value) {
  return ::google::protobuf_tempo::internal::NameOfDenseEnum<MeasurementType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MeasurementType_Parse(absl_tempo::string_view name, MeasurementType* value) {
  return ::google::protobuf_tempo::internal::ParseNamedEnum<MeasurementType>(
      MeasurementType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TEMPOSENSORS_API SensorDescriptor final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoSensors.SensorDescriptor) */ {
 public:
  inline SensorDescriptor() : SensorDescriptor(nullptr) {}
  ~SensorDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SensorDescriptor(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SensorDescriptor(const SensorDescriptor& from)
      : SensorDescriptor(nullptr, from) {}
  SensorDescriptor(SensorDescriptor&& from) noexcept
    : SensorDescriptor() {
    *this = ::std::move(from);
  }

  inline SensorDescriptor& operator=(const SensorDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorDescriptor& operator=(SensorDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorDescriptor* internal_default_instance() {
    return reinterpret_cast<const SensorDescriptor*>(
               &_SensorDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorDescriptor& a, SensorDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorDescriptor* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorDescriptor>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SensorDescriptor& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SensorDescriptor& from) {
    SensorDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SensorDescriptor* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoSensors.SensorDescriptor";
  }
  protected:
  explicit SensorDescriptor(::google::protobuf_tempo::Arena* arena);
  SensorDescriptor(::google::protobuf_tempo::Arena* arena, const SensorDescriptor& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasurementTypesFieldNumber = 4,
    kOwnerFieldNumber = 1,
    kNameFieldNumber = 2,
    kRateFieldNumber = 3,
  };
  // repeated .TempoSensors.MeasurementType measurement_types = 4;
  int measurement_types_size() const;
  private:
  int _internal_measurement_types_size() const;

  public:
  void clear_measurement_types() ;
  public:
  ::TempoSensors::MeasurementType measurement_types(int index) const;
  void set_measurement_types(int index, ::TempoSensors::MeasurementType value);
  void add_measurement_types(::TempoSensors::MeasurementType value);
  const ::google::protobuf_tempo::RepeatedField<int>& measurement_types() const;
  ::google::protobuf_tempo::RepeatedField<int>* mutable_measurement_types();

  private:
  const ::google::protobuf_tempo::RepeatedField<int>& _internal_measurement_types() const;
  ::google::protobuf_tempo::RepeatedField<int>* _internal_mutable_measurement_types();

  public:
  // string owner = 1;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // float rate = 3;
  void clear_rate() ;
  float rate() const;
  void set_rate(float value);

  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);

  public:
  // @@protoc_insertion_point(class_scope:TempoSensors.SensorDescriptor)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOSENSORS_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedField<int> measurement_types_;
    mutable ::google::protobuf_tempo::internal::CachedSize _measurement_types_cached_byte_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr owner_;
    ::google::protobuf_tempo::internal::ArenaStringPtr name_;
    float rate_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoSensors_2fSensors_2eproto;
};// -------------------------------------------------------------------

class TEMPOSENSORS_API AvailableSensorsRequest final :
    public ::google::protobuf_tempo::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TempoSensors.AvailableSensorsRequest) */ {
 public:
  inline AvailableSensorsRequest() : AvailableSensorsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AvailableSensorsRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline AvailableSensorsRequest(const AvailableSensorsRequest& from)
      : AvailableSensorsRequest(nullptr, from) {}
  AvailableSensorsRequest(AvailableSensorsRequest&& from) noexcept
    : AvailableSensorsRequest() {
    *this = ::std::move(from);
  }

  inline AvailableSensorsRequest& operator=(const AvailableSensorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvailableSensorsRequest& operator=(AvailableSensorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AvailableSensorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AvailableSensorsRequest* internal_default_instance() {
    return reinterpret_cast<const AvailableSensorsRequest*>(
               &_AvailableSensorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AvailableSensorsRequest& a, AvailableSensorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AvailableSensorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvailableSensorsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AvailableSensorsRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AvailableSensorsRequest>(arena);
  }
  using ::google::protobuf_tempo::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AvailableSensorsRequest& from) {
    ::google::protobuf_tempo::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf_tempo::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AvailableSensorsRequest& from) {
    ::google::protobuf_tempo::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoSensors.AvailableSensorsRequest";
  }
  protected:
  explicit AvailableSensorsRequest(::google::protobuf_tempo::Arena* arena);
  AvailableSensorsRequest(::google::protobuf_tempo::Arena* arena, const AvailableSensorsRequest& from);
  public:

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TempoSensors.AvailableSensorsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOSENSORS_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_TempoSensors_2fSensors_2eproto;
};// -------------------------------------------------------------------

class TEMPOSENSORS_API AvailableSensorsResponse final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoSensors.AvailableSensorsResponse) */ {
 public:
  inline AvailableSensorsResponse() : AvailableSensorsResponse(nullptr) {}
  ~AvailableSensorsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AvailableSensorsResponse(::google::protobuf_tempo::internal::ConstantInitialized);

  inline AvailableSensorsResponse(const AvailableSensorsResponse& from)
      : AvailableSensorsResponse(nullptr, from) {}
  AvailableSensorsResponse(AvailableSensorsResponse&& from) noexcept
    : AvailableSensorsResponse() {
    *this = ::std::move(from);
  }

  inline AvailableSensorsResponse& operator=(const AvailableSensorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvailableSensorsResponse& operator=(AvailableSensorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AvailableSensorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AvailableSensorsResponse* internal_default_instance() {
    return reinterpret_cast<const AvailableSensorsResponse*>(
               &_AvailableSensorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AvailableSensorsResponse& a, AvailableSensorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AvailableSensorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvailableSensorsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AvailableSensorsResponse* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AvailableSensorsResponse>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const AvailableSensorsResponse& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const AvailableSensorsResponse& from) {
    AvailableSensorsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(AvailableSensorsResponse* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoSensors.AvailableSensorsResponse";
  }
  protected:
  explicit AvailableSensorsResponse(::google::protobuf_tempo::Arena* arena);
  AvailableSensorsResponse(::google::protobuf_tempo::Arena* arena, const AvailableSensorsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableSensorsFieldNumber = 1,
  };
  // repeated .TempoSensors.SensorDescriptor available_sensors = 1;
  int available_sensors_size() const;
  private:
  int _internal_available_sensors_size() const;

  public:
  void clear_available_sensors() ;
  ::TempoSensors::SensorDescriptor* mutable_available_sensors(int index);
  ::google::protobuf_tempo::RepeatedPtrField< ::TempoSensors::SensorDescriptor >*
      mutable_available_sensors();
  private:
  const ::google::protobuf_tempo::RepeatedPtrField<::TempoSensors::SensorDescriptor>& _internal_available_sensors() const;
  ::google::protobuf_tempo::RepeatedPtrField<::TempoSensors::SensorDescriptor>* _internal_mutable_available_sensors();
  public:
  const ::TempoSensors::SensorDescriptor& available_sensors(int index) const;
  ::TempoSensors::SensorDescriptor* add_available_sensors();
  const ::google::protobuf_tempo::RepeatedPtrField< ::TempoSensors::SensorDescriptor >&
      available_sensors() const;
  // @@protoc_insertion_point(class_scope:TempoSensors.AvailableSensorsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOSENSORS_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField< ::TempoSensors::SensorDescriptor > available_sensors_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoSensors_2fSensors_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SensorDescriptor

// string owner = 1;
inline void SensorDescriptor::clear_owner() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& SensorDescriptor::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoSensors.SensorDescriptor.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SensorDescriptor::set_owner(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoSensors.SensorDescriptor.owner)
}
inline std::string* SensorDescriptor::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:TempoSensors.SensorDescriptor.owner)
  return _s;
}
inline const std::string& SensorDescriptor::_internal_owner() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.owner_.Get();
}
inline void SensorDescriptor::_internal_set_owner(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* SensorDescriptor::_internal_mutable_owner() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* SensorDescriptor::release_owner() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoSensors.SensorDescriptor.owner)
  return _impl_.owner_.Release();
}
inline void SensorDescriptor::set_allocated_owner(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.owner_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoSensors.SensorDescriptor.owner)
}

// string name = 2;
inline void SensorDescriptor::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SensorDescriptor::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoSensors.SensorDescriptor.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SensorDescriptor::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoSensors.SensorDescriptor.name)
}
inline std::string* SensorDescriptor::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TempoSensors.SensorDescriptor.name)
  return _s;
}
inline const std::string& SensorDescriptor::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void SensorDescriptor::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SensorDescriptor::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SensorDescriptor::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoSensors.SensorDescriptor.name)
  return _impl_.name_.Release();
}
inline void SensorDescriptor::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoSensors.SensorDescriptor.name)
}

// float rate = 3;
inline void SensorDescriptor::clear_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rate_ = 0;
}
inline float SensorDescriptor::rate() const {
  // @@protoc_insertion_point(field_get:TempoSensors.SensorDescriptor.rate)
  return _internal_rate();
}
inline void SensorDescriptor::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:TempoSensors.SensorDescriptor.rate)
}
inline float SensorDescriptor::_internal_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rate_;
}
inline void SensorDescriptor::_internal_set_rate(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rate_ = value;
}

// repeated .TempoSensors.MeasurementType measurement_types = 4;
inline int SensorDescriptor::_internal_measurement_types_size() const {
  return _internal_measurement_types().size();
}
inline int SensorDescriptor::measurement_types_size() const {
  return _internal_measurement_types_size();
}
inline void SensorDescriptor::clear_measurement_types() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.measurement_types_.Clear();
}
inline ::TempoSensors::MeasurementType SensorDescriptor::measurement_types(int index) const {
  // @@protoc_insertion_point(field_get:TempoSensors.SensorDescriptor.measurement_types)
  return static_cast<::TempoSensors::MeasurementType>(_internal_measurement_types().Get(index));
}
inline void SensorDescriptor::set_measurement_types(int index, ::TempoSensors::MeasurementType value) {
  _internal_mutable_measurement_types()->Set(index, value);
  // @@protoc_insertion_point(field_set:TempoSensors.SensorDescriptor.measurement_types)
}
inline void SensorDescriptor::add_measurement_types(::TempoSensors::MeasurementType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_measurement_types()->Add(value);
  // @@protoc_insertion_point(field_add:TempoSensors.SensorDescriptor.measurement_types)
}
inline const ::google::protobuf_tempo::RepeatedField<int>& SensorDescriptor::measurement_types() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoSensors.SensorDescriptor.measurement_types)
  return _internal_measurement_types();
}
inline ::google::protobuf_tempo::RepeatedField<int>* SensorDescriptor::mutable_measurement_types()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoSensors.SensorDescriptor.measurement_types)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_measurement_types();
}
inline const ::google::protobuf_tempo::RepeatedField<int>& SensorDescriptor::_internal_measurement_types() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.measurement_types_;
}
inline ::google::protobuf_tempo::RepeatedField<int>* SensorDescriptor::_internal_mutable_measurement_types() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.measurement_types_;
}

// -------------------------------------------------------------------

// AvailableSensorsRequest

// -------------------------------------------------------------------

// AvailableSensorsResponse

// repeated .TempoSensors.SensorDescriptor available_sensors = 1;
inline int AvailableSensorsResponse::_internal_available_sensors_size() const {
  return _internal_available_sensors().size();
}
inline int AvailableSensorsResponse::available_sensors_size() const {
  return _internal_available_sensors_size();
}
inline void AvailableSensorsResponse::clear_available_sensors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.available_sensors_.Clear();
}
inline ::TempoSensors::SensorDescriptor* AvailableSensorsResponse::mutable_available_sensors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoSensors.AvailableSensorsResponse.available_sensors)
  return _internal_mutable_available_sensors()->Mutable(index);
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoSensors::SensorDescriptor>* AvailableSensorsResponse::mutable_available_sensors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoSensors.AvailableSensorsResponse.available_sensors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_available_sensors();
}
inline const ::TempoSensors::SensorDescriptor& AvailableSensorsResponse::available_sensors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoSensors.AvailableSensorsResponse.available_sensors)
  return _internal_available_sensors().Get(index);
}
inline ::TempoSensors::SensorDescriptor* AvailableSensorsResponse::add_available_sensors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::TempoSensors::SensorDescriptor* _add = _internal_mutable_available_sensors()->Add();
  // @@protoc_insertion_point(field_add:TempoSensors.AvailableSensorsResponse.available_sensors)
  return _add;
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoSensors::SensorDescriptor>& AvailableSensorsResponse::available_sensors() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoSensors.AvailableSensorsResponse.available_sensors)
  return _internal_available_sensors();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoSensors::SensorDescriptor>&
AvailableSensorsResponse::_internal_available_sensors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.available_sensors_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoSensors::SensorDescriptor>*
AvailableSensorsResponse::_internal_mutable_available_sensors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.available_sensors_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoSensors


namespace google {
namespace protobuf_tempo {

template <>
struct is_proto_enum<::TempoSensors::MeasurementType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TempoSensors::MeasurementType>() {
  return ::TempoSensors::MeasurementType_descriptor();
}

}  // namespace protobuf_tempo
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TempoSensors_2fSensors_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoSensors/Sensors.proto
// Original file comments:
// Copyright Tempo Simulation, LLC. All Rights Reserved
//
#ifndef GRPC_TempoSensors_2fSensors_2eproto__INCLUDED
#define GRPC_TempoSensors_2fSensors_2eproto__INCLUDED

#include "TempoSensors/Sensors.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace TempoSensors {

class SensorService final {
 public:
  static constexpr char const* service_full_name() {
    return "TempoSensors.SensorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::TempoSensors::AvailableSensorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoSensors::AvailableSensorsResponse>> AsyncGetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoSensors::AvailableSensorsResponse>>(AsyncGetAvailableSensorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoSensors::AvailableSensorsResponse>> PrepareAsyncGetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoSensors::AvailableSensorsResponse>>(PrepareAsyncGetAvailableSensorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoCamera::ColorImage>> StreamColorImages(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoCamera::ColorImage>>(StreamColorImagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::ColorImage>> AsyncStreamColorImages(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::ColorImage>>(AsyncStreamColorImagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::ColorImage>> PrepareAsyncStreamColorImages(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::ColorImage>>(PrepareAsyncStreamColorImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoCamera::DepthImage>> StreamDepthImages(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoCamera::DepthImage>>(StreamDepthImagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::DepthImage>> AsyncStreamDepthImages(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::DepthImage>>(AsyncStreamDepthImagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::DepthImage>> PrepareAsyncStreamDepthImages(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::DepthImage>>(PrepareAsyncStreamDepthImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoCamera::LabelImage>> StreamLabelImages(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoCamera::LabelImage>>(StreamLabelImagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::LabelImage>> AsyncStreamLabelImages(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::LabelImage>>(AsyncStreamLabelImagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::LabelImage>> PrepareAsyncStreamLabelImages(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoCamera::LabelImage>>(PrepareAsyncStreamLabelImagesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest* request, ::TempoSensors::AvailableSensorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest* request, ::TempoSensors::AvailableSensorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamColorImages(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest* request, ::grpc::ClientReadReactor< ::TempoCamera::ColorImage>* reactor) = 0;
      virtual void StreamDepthImages(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest* request, ::grpc::ClientReadReactor< ::TempoCamera::DepthImage>* reactor) = 0;
      virtual void StreamLabelImages(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest* request, ::grpc::ClientReadReactor< ::TempoCamera::LabelImage>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoSensors::AvailableSensorsResponse>* AsyncGetAvailableSensorsRaw(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoSensors::AvailableSensorsResponse>* PrepareAsyncGetAvailableSensorsRaw(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TempoCamera::ColorImage>* StreamColorImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoCamera::ColorImage>* AsyncStreamColorImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoCamera::ColorImage>* PrepareAsyncStreamColorImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TempoCamera::DepthImage>* StreamDepthImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoCamera::DepthImage>* AsyncStreamDepthImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoCamera::DepthImage>* PrepareAsyncStreamDepthImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TempoCamera::LabelImage>* StreamLabelImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoCamera::LabelImage>* AsyncStreamLabelImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoCamera::LabelImage>* PrepareAsyncStreamLabelImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::TempoSensors::AvailableSensorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoSensors::AvailableSensorsResponse>> AsyncGetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoSensors::AvailableSensorsResponse>>(AsyncGetAvailableSensorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoSensors::AvailableSensorsResponse>> PrepareAsyncGetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoSensors::AvailableSensorsResponse>>(PrepareAsyncGetAvailableSensorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TempoCamera::ColorImage>> StreamColorImages(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TempoCamera::ColorImage>>(StreamColorImagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::ColorImage>> AsyncStreamColorImages(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::ColorImage>>(AsyncStreamColorImagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::ColorImage>> PrepareAsyncStreamColorImages(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::ColorImage>>(PrepareAsyncStreamColorImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TempoCamera::DepthImage>> StreamDepthImages(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TempoCamera::DepthImage>>(StreamDepthImagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::DepthImage>> AsyncStreamDepthImages(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::DepthImage>>(AsyncStreamDepthImagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::DepthImage>> PrepareAsyncStreamDepthImages(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::DepthImage>>(PrepareAsyncStreamDepthImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TempoCamera::LabelImage>> StreamLabelImages(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TempoCamera::LabelImage>>(StreamLabelImagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::LabelImage>> AsyncStreamLabelImages(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::LabelImage>>(AsyncStreamLabelImagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::LabelImage>> PrepareAsyncStreamLabelImages(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoCamera::LabelImage>>(PrepareAsyncStreamLabelImagesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest* request, ::TempoSensors::AvailableSensorsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest* request, ::TempoSensors::AvailableSensorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamColorImages(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest* request, ::grpc::ClientReadReactor< ::TempoCamera::ColorImage>* reactor) override;
      void StreamDepthImages(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest* request, ::grpc::ClientReadReactor< ::TempoCamera::DepthImage>* reactor) override;
      void StreamLabelImages(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest* request, ::grpc::ClientReadReactor< ::TempoCamera::LabelImage>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TempoSensors::AvailableSensorsResponse>* AsyncGetAvailableSensorsRaw(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoSensors::AvailableSensorsResponse>* PrepareAsyncGetAvailableSensorsRaw(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TempoCamera::ColorImage>* StreamColorImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request) override;
    ::grpc::ClientAsyncReader< ::TempoCamera::ColorImage>* AsyncStreamColorImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TempoCamera::ColorImage>* PrepareAsyncStreamColorImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TempoCamera::DepthImage>* StreamDepthImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request) override;
    ::grpc::ClientAsyncReader< ::TempoCamera::DepthImage>* AsyncStreamDepthImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TempoCamera::DepthImage>* PrepareAsyncStreamDepthImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TempoCamera::LabelImage>* StreamLabelImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request) override;
    ::grpc::ClientAsyncReader< ::TempoCamera::LabelImage>* AsyncStreamLabelImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TempoCamera::LabelImage>* PrepareAsyncStreamLabelImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAvailableSensors_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamColorImages_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamDepthImages_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamLabelImages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAvailableSensors(::grpc::ServerContext* context, const ::TempoSensors::AvailableSensorsRequest* request, ::TempoSensors::AvailableSensorsResponse* response);
    virtual ::grpc::Status StreamColorImages(::grpc::ServerContext* context, const ::TempoCamera::ColorImageRequest* request, ::grpc::ServerWriter< ::TempoCamera::ColorImage>* writer);
    virtual ::grpc::Status StreamDepthImages(::grpc::ServerContext* context, const ::TempoCamera::DepthImageRequest* request, ::grpc::ServerWriter< ::TempoCamera::DepthImage>* writer);
    virtual ::grpc::Status StreamLabelImages(::grpc::ServerContext* context, const ::TempoCamera::LabelImageRequest* request, ::grpc::ServerWriter< ::TempoCamera::LabelImage>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAvailableSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAvailableSensors() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAvailableSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableSensors(::grpc::ServerContext* /*context*/, const ::TempoSensors::AvailableSensorsRequest* /*request*/, ::TempoSensors::AvailableSensorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableSensors(::grpc::ServerContext* context, ::TempoSensors::AvailableSensorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoSensors::AvailableSensorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamColorImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamColorImages() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamColorImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamColorImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::ColorImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::ColorImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamColorImages(::grpc::ServerContext* context, ::TempoCamera::ColorImageRequest* request, ::grpc::ServerAsyncWriter< ::TempoCamera::ColorImage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamDepthImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamDepthImages() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StreamDepthImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDepthImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::DepthImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::DepthImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamDepthImages(::grpc::ServerContext* context, ::TempoCamera::DepthImageRequest* request, ::grpc::ServerAsyncWriter< ::TempoCamera::DepthImage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamLabelImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamLabelImages() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StreamLabelImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLabelImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::LabelImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::LabelImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLabelImages(::grpc::ServerContext* context, ::TempoCamera::LabelImageRequest* request, ::grpc::ServerAsyncWriter< ::TempoCamera::LabelImage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAvailableSensors<WithAsyncMethod_StreamColorImages<WithAsyncMethod_StreamDepthImages<WithAsyncMethod_StreamLabelImages<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAvailableSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAvailableSensors() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoSensors::AvailableSensorsRequest, ::TempoSensors::AvailableSensorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoSensors::AvailableSensorsRequest* request, ::TempoSensors::AvailableSensorsResponse* response) { return this->GetAvailableSensors(context, request, response); }));}
    void SetMessageAllocatorFor_GetAvailableSensors(
        ::grpc::MessageAllocator< ::TempoSensors::AvailableSensorsRequest, ::TempoSensors::AvailableSensorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoSensors::AvailableSensorsRequest, ::TempoSensors::AvailableSensorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAvailableSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableSensors(::grpc::ServerContext* /*context*/, const ::TempoSensors::AvailableSensorsRequest* /*request*/, ::TempoSensors::AvailableSensorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAvailableSensors(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoSensors::AvailableSensorsRequest* /*request*/, ::TempoSensors::AvailableSensorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamColorImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamColorImages() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::TempoCamera::ColorImageRequest, ::TempoCamera::ColorImage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoCamera::ColorImageRequest* request) { return this->StreamColorImages(context, request); }));
    }
    ~WithCallbackMethod_StreamColorImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamColorImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::ColorImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::ColorImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::TempoCamera::ColorImage>* StreamColorImages(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoCamera::ColorImageRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamDepthImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamDepthImages() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::TempoCamera::DepthImageRequest, ::TempoCamera::DepthImage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoCamera::DepthImageRequest* request) { return this->StreamDepthImages(context, request); }));
    }
    ~WithCallbackMethod_StreamDepthImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDepthImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::DepthImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::DepthImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::TempoCamera::DepthImage>* StreamDepthImages(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoCamera::DepthImageRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamLabelImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamLabelImages() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::TempoCamera::LabelImageRequest, ::TempoCamera::LabelImage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoCamera::LabelImageRequest* request) { return this->StreamLabelImages(context, request); }));
    }
    ~WithCallbackMethod_StreamLabelImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLabelImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::LabelImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::LabelImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::TempoCamera::LabelImage>* StreamLabelImages(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoCamera::LabelImageRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAvailableSensors<WithCallbackMethod_StreamColorImages<WithCallbackMethod_StreamDepthImages<WithCallbackMethod_StreamLabelImages<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAvailableSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAvailableSensors() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAvailableSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableSensors(::grpc::ServerContext* /*context*/, const ::TempoSensors::AvailableSensorsRequest* /*request*/, ::TempoSensors::AvailableSensorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamColorImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamColorImages() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamColorImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamColorImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::ColorImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::ColorImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamDepthImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamDepthImages() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StreamDepthImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDepthImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::DepthImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::DepthImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamLabelImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamLabelImages() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StreamLabelImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLabelImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::LabelImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::LabelImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAvailableSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAvailableSensors() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAvailableSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableSensors(::grpc::ServerContext* /*context*/, const ::TempoSensors::AvailableSensorsRequest* /*request*/, ::TempoSensors::AvailableSensorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableSensors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamColorImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamColorImages() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamColorImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamColorImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::ColorImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::ColorImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamColorImages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamDepthImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamDepthImages() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StreamDepthImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDepthImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::DepthImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::DepthImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamDepthImages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamLabelImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamLabelImages() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StreamLabelImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLabelImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::LabelImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::LabelImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLabelImages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAvailableSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAvailableSensors() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAvailableSensors(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAvailableSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableSensors(::grpc::ServerContext* /*context*/, const ::TempoSensors::AvailableSensorsRequest* /*request*/, ::TempoSensors::AvailableSensorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAvailableSensors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamColorImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamColorImages() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamColorImages(context, request); }));
    }
    ~WithRawCallbackMethod_StreamColorImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamColorImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::ColorImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::ColorImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamColorImages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamDepthImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamDepthImages() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamDepthImages(context, request); }));
    }
    ~WithRawCallbackMethod_StreamDepthImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDepthImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::DepthImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::DepthImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamDepthImages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamLabelImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamLabelImages() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamLabelImages(context, request); }));
    }
    ~WithRawCallbackMethod_StreamLabelImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLabelImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::LabelImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::LabelImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamLabelImages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAvailableSensors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAvailableSensors() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoSensors::AvailableSensorsRequest, ::TempoSensors::AvailableSensorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoSensors::AvailableSensorsRequest, ::TempoSensors::AvailableSensorsResponse>* streamer) {
                       return this->StreamedGetAvailableSensors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAvailableSensors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAvailableSensors(::grpc::ServerContext* /*context*/, const ::TempoSensors::AvailableSensorsRequest* /*request*/, ::TempoSensors::AvailableSensorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAvailableSensors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoSensors::AvailableSensorsRequest,::TempoSensors::AvailableSensorsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAvailableSensors<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamColorImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamColorImages() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::TempoCamera::ColorImageRequest, ::TempoCamera::ColorImage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::TempoCamera::ColorImageRequest, ::TempoCamera::ColorImage>* streamer) {
                       return this->StreamedStreamColorImages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamColorImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamColorImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::ColorImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::ColorImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamColorImages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TempoCamera::ColorImageRequest,::TempoCamera::ColorImage>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamDepthImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamDepthImages() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::TempoCamera::DepthImageRequest, ::TempoCamera::DepthImage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::TempoCamera::DepthImageRequest, ::TempoCamera::DepthImage>* streamer) {
                       return this->StreamedStreamDepthImages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamDepthImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamDepthImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::DepthImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::DepthImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamDepthImages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TempoCamera::DepthImageRequest,::TempoCamera::DepthImage>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamLabelImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamLabelImages() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::TempoCamera::LabelImageRequest, ::TempoCamera::LabelImage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::TempoCamera::LabelImageRequest, ::TempoCamera::LabelImage>* streamer) {
                       return this->StreamedStreamLabelImages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamLabelImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamLabelImages(::grpc::ServerContext* /*context*/, const ::TempoCamera::LabelImageRequest* /*request*/, ::grpc::ServerWriter< ::TempoCamera::LabelImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamLabelImages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TempoCamera::LabelImageRequest,::TempoCamera::LabelImage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamColorImages<WithSplitStreamingMethod_StreamDepthImages<WithSplitStreamingMethod_StreamLabelImages<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAvailableSensors<WithSplitStreamingMethod_StreamColorImages<WithSplitStreamingMethod_StreamDepthImages<WithSplitStreamingMethod_StreamLabelImages<Service > > > > StreamedService;
};

}  // namespace TempoSensors


#endif  // GRPC_TempoSensors_2fSensors_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoSensors/Sensors.proto

#include "TempoSensors/Sensors.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf_tempo;
namespace _pbi = ::google::protobuf_tempo::internal;
namespace _fl = ::google::protobuf_tempo::internal::field_layout;
namespace TempoSensors {

inline constexpr SensorDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : measurement_types_{},
        _measurement_types_cached_byte_size_{0},
        owner_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rate_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SensorDescriptor::SensorDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SensorDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDescriptorDefaultTypeInternal() {}
  union {
    SensorDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOSENSORS_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDescriptorDefaultTypeInternal _SensorDescriptor_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR AvailableSensorsRequest::AvailableSensorsRequest(::_pbi::ConstantInitialized) {}
struct AvailableSensorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvailableSensorsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvailableSensorsRequestDefaultTypeInternal() {}
  union {
    AvailableSensorsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOSENSORS_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvailableSensorsRequestDefaultTypeInternal _AvailableSensorsRequest_default_instance_;

inline constexpr AvailableSensorsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : available_sensors_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AvailableSensorsResponse::AvailableSensorsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AvailableSensorsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvailableSensorsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvailableSensorsResponseDefaultTypeInternal() {}
  union {
    AvailableSensorsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOSENSORS_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvailableSensorsResponseDefaultTypeInternal _AvailableSensorsResponse_default_instance_;
}  // namespace TempoSensors
static ::_pb::Metadata file_level_metadata_TempoSensors_2fSensors_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TempoSensors_2fSensors_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_TempoSensors_2fSensors_2eproto = nullptr;
const ::uint32_t TableStruct_TempoSensors_2fSensors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoSensors::SensorDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoSensors::SensorDescriptor, _impl_.owner_),
    PROTOBUF_FIELD_OFFSET(::TempoSensors::SensorDescriptor, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::TempoSensors::SensorDescriptor, _impl_.rate_),
    PROTOBUF_FIELD_OFFSET(::TempoSensors::SensorDescriptor, _impl_.measurement_types_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoSensors::AvailableSensorsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoSensors::AvailableSensorsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoSensors::AvailableSensorsResponse, _impl_.available_sensors_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::TempoSensors::SensorDescriptor)},
        {12, -1, -1, sizeof(::TempoSensors::AvailableSensorsRequest)},
        {20, -1, -1, sizeof(::TempoSensors::AvailableSensorsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::TempoSensors::_SensorDescriptor_default_instance_._instance,
    &::TempoSensors::_AvailableSensorsRequest_default_instance_._instance,
    &::TempoSensors::_AvailableSensorsResponse_default_instance_._instance,
};
const char descriptor_table_protodef_TempoSensors_2fSensors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\032TempoSensors/Sensors.proto\022\014TempoSenso"
    "rs\032\030TempoCamera/Camera.proto\"w\n\020SensorDe"
    "scriptor\022\r\n\005owner\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n"
    "\004rate\030\003 \001(\002\0228\n\021measurement_types\030\004 \003(\0162\035"
    ".TempoSensors.MeasurementType\"\031\n\027Availab"
    "leSensorsRequest\"U\n\030AvailableSensorsResp"
    "onse\0229\n\021available_sensors\030\001 \003(\0132\036.TempoS"
    "ensors.SensorDescriptor*D\n\017MeasurementTy"
    "pe\022\017\n\013COLOR_IMAGE\020\000\022\017\n\013DEPTH_IMAGE\020\001\022\017\n\013"
    "LABEL_IMAGE\020\0022\345\002\n\rSensorService\022d\n\023GetAv"
    "ailableSensors\022%.TempoSensors.AvailableS"
    "ensorsRequest\032&.TempoSensors.AvailableSe"
    "nsorsResponse\022N\n\021StreamColorImages\022\036.Tem"
    "poCamera.ColorImageRequest\032\027.TempoCamera"
    ".ColorImage0\001\022N\n\021StreamDepthImages\022\036.Tem"
    "poCamera.DepthImageRequest\032\027.TempoCamera"
    ".DepthImage0\001\022N\n\021StreamLabelImages\022\036.Tem"
    "poCamera.LabelImageRequest\032\027.TempoCamera"
    ".LabelImage0\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_TempoSensors_2fSensors_2eproto_deps[1] =
    {
        &::descriptor_table_TempoCamera_2fCamera_2eproto,
};
static ::absl_tempo::once_flag descriptor_table_TempoSensors_2fSensors_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TempoSensors_2fSensors_2eproto = {
    false,
    false,
    741,
    descriptor_table_protodef_TempoSensors_2fSensors_2eproto,
    "TempoSensors/Sensors.proto",
    &descriptor_table_TempoSensors_2fSensors_2eproto_once,
    descriptor_table_TempoSensors_2fSensors_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_TempoSensors_2fSensors_2eproto::offsets,
    file_level_metadata_TempoSensors_2fSensors_2eproto,
    file_level_enum_descriptors_TempoSensors_2fSensors_2eproto,
    file_level_service_descriptors_TempoSensors_2fSensors_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TempoSensors_2fSensors_2eproto_getter() {
  return &descriptor_table_TempoSensors_2fSensors_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TempoSensors_2fSensors_2eproto(&descriptor_table_TempoSensors_2fSensors_2eproto);
namespace TempoSensors {
const ::google::protobuf_tempo::EnumDescriptor* MeasurementType_descriptor() {
  ::google::protobuf_tempo::internal::AssignDescriptors(&descriptor_table_TempoSensors_2fSensors_2eproto);
  return file_level_enum_descriptors_TempoSensors_2fSensors_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MeasurementType_internal_data_[] = {
    196608u, 0u, };
bool MeasurementType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class SensorDescriptor::_Internal {
 public:
};

SensorDescriptor::SensorDescriptor(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoSensors.SensorDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE SensorDescriptor::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : measurement_types_{visibility, arena, from.measurement_types_},
        _measurement_types_cached_byte_size_{0},
        owner_(arena, from.owner_),
        name_(arena, from.name_),
        _cached_size_{0} {}

SensorDescriptor::SensorDescriptor(
    ::google::protobuf_tempo::Arena* arena,
    const SensorDescriptor& from)
    : ::google::protobuf_tempo::Message(arena) {
  SensorDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.rate_ = from._impl_.rate_;

  // @@protoc_insertion_point(copy_constructor:TempoSensors.SensorDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE SensorDescriptor::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : measurement_types_{visibility, arena},
        _measurement_types_cached_byte_size_{0},
        owner_(arena),
        name_(arena),
        _cached_size_{0} {}

inline void SensorDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_ = {};
}
SensorDescriptor::~SensorDescriptor() {
  // @@protoc_insertion_point(destructor:TempoSensors.SensorDescriptor)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void SensorDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.owner_.Destroy();
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SensorDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoSensors.SensorDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.measurement_types_.Clear();
  _impl_.owner_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.rate_ = 0;
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* SensorDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 47, 2> SensorDescriptor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SensorDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .TempoSensors.MeasurementType measurement_types = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(SensorDescriptor, _impl_.measurement_types_)}},
    // string owner = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SensorDescriptor, _impl_.owner_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SensorDescriptor, _impl_.name_)}},
    // float rate = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(SensorDescriptor, _impl_.rate_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string owner = 1;
    {PROTOBUF_FIELD_OFFSET(SensorDescriptor, _impl_.owner_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(SensorDescriptor, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float rate = 3;
    {PROTOBUF_FIELD_OFFSET(SensorDescriptor, _impl_.rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated .TempoSensors.MeasurementType measurement_types = 4;
    {PROTOBUF_FIELD_OFFSET(SensorDescriptor, _impl_.measurement_types_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }},
  // no aux_entries
  {{
    "\35\5\4\0\0\0\0\0"
    "TempoSensors.SensorDescriptor"
    "owner"
    "name"
  }},
};

::uint8_t* SensorDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoSensors.SensorDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string owner = 1;
  if (!this->_internal_owner().empty()) {
    const std::string& _s = this->_internal_owner();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoSensors.SensorDescriptor.owner");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoSensors.SensorDescriptor.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // float rate = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_rate(), target);
  }

  // repeated .TempoSensors.MeasurementType measurement_types = 4;
  {
    std::size_t byte_size = _impl_._measurement_types_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(4, _internal_measurement_types(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoSensors.SensorDescriptor)
  return target;
}

::size_t SensorDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoSensors.SensorDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TempoSensors.MeasurementType measurement_types = 4;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_measurement_types_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_measurement_types().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._measurement_types_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // string owner = 1;
  if (!this->_internal_owner().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_owner());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // float rate = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData SensorDescriptor::_class_data_ = {
    SensorDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* SensorDescriptor::GetClassData() const {
  return &_class_data_;
}

void SensorDescriptor::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<SensorDescriptor*>(&to_msg);
  auto& from = static_cast<const SensorDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoSensors.SensorDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_measurement_types()->MergeFrom(from._internal_measurement_types());
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = from._internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    _this->_internal_set_rate(from._internal_rate());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void SensorDescriptor::CopyFrom(const SensorDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoSensors.SensorDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SensorDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SensorDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SensorDescriptor::InternalSwap(SensorDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.measurement_types_.InternalSwap(&other->_impl_.measurement_types_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_, &other->_impl_.owner_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.rate_, other->_impl_.rate_);
}

::google::protobuf_tempo::Metadata SensorDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoSensors_2fSensors_2eproto_getter, &descriptor_table_TempoSensors_2fSensors_2eproto_once,
      file_level_metadata_TempoSensors_2fSensors_2eproto[0]);
}
// ===================================================================

class AvailableSensorsRequest::_Internal {
 public:
};

AvailableSensorsRequest::AvailableSensorsRequest(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:TempoSensors.AvailableSensorsRequest)
}
AvailableSensorsRequest::AvailableSensorsRequest(
    ::google::protobuf_tempo::Arena* arena,
    const AvailableSensorsRequest& from)
    : ::google::protobuf_tempo::internal::ZeroFieldsBase(arena) {
  AvailableSensorsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:TempoSensors.AvailableSensorsRequest)
}









::google::protobuf_tempo::Metadata AvailableSensorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoSensors_2fSensors_2eproto_getter, &descriptor_table_TempoSensors_2fSensors_2eproto_once,
      file_level_metadata_TempoSensors_2fSensors_2eproto[1]);
}
// ===================================================================

class AvailableSensorsResponse::_Internal {
 public:
};

AvailableSensorsResponse::AvailableSensorsResponse(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoSensors.AvailableSensorsResponse)
}
inline PROTOBUF_NDEBUG_INLINE AvailableSensorsResponse::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : available_sensors_{visibility, arena, from.available_sensors_},
        _cached_size_{0} {}

AvailableSensorsResponse::AvailableSensorsResponse(
    ::google::protobuf_tempo::Arena* arena,
    const AvailableSensorsResponse& from)
    : ::google::protobuf_tempo::Message(arena) {
  AvailableSensorsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:TempoSensors.AvailableSensorsResponse)
}
inline PROTOBUF_NDEBUG_INLINE AvailableSensorsResponse::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : available_sensors_{visibility, arena},
        _cached_size_{0} {}

inline void AvailableSensorsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AvailableSensorsResponse::~AvailableSensorsResponse() {
  // @@protoc_insertion_point(destructor:TempoSensors.AvailableSensorsResponse)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void AvailableSensorsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AvailableSensorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoSensors.AvailableSensorsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.available_sensors_.Clear();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* AvailableSensorsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AvailableSensorsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AvailableSensorsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .TempoSensors.SensorDescriptor available_sensors = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AvailableSensorsResponse, _impl_.available_sensors_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .TempoSensors.SensorDescriptor available_sensors = 1;
    {PROTOBUF_FIELD_OFFSET(AvailableSensorsResponse, _impl_.available_sensors_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::TempoSensors::SensorDescriptor>()},
  }}, {{
  }},
};

::uint8_t* AvailableSensorsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoSensors.AvailableSensorsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .TempoSensors.SensorDescriptor available_sensors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_available_sensors_size()); i < n; i++) {
    const auto& repfield = this->_internal_available_sensors().Get(i);
    target = ::google::protobuf_tempo::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoSensors.AvailableSensorsResponse)
  return target;
}

::size_t AvailableSensorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoSensors.AvailableSensorsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TempoSensors.SensorDescriptor available_sensors = 1;
  total_size += 1UL * this->_internal_available_sensors_size();
  for (const auto& msg : this->_internal_available_sensors()) {
    total_size +=
      ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData AvailableSensorsResponse::_class_data_ = {
    AvailableSensorsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* AvailableSensorsResponse::GetClassData() const {
  return &_class_data_;
}

void AvailableSensorsResponse::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<AvailableSensorsResponse*>(&to_msg);
  auto& from = static_cast<const AvailableSensorsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoSensors.AvailableSensorsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_available_sensors()->MergeFrom(
      from._internal_available_sensors());
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void AvailableSensorsResponse::CopyFrom(const AvailableSensorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoSensors.AvailableSensorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AvailableSensorsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AvailableSensorsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AvailableSensorsResponse::InternalSwap(AvailableSensorsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.available_sensors_.InternalSwap(&other->_impl_.available_sensors_);
}

::google::protobuf_tempo::Metadata AvailableSensorsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoSensors_2fSensors_2eproto_getter, &descriptor_table_TempoSensors_2fSensors_2eproto_once,
      file_level_metadata_TempoSensors_2fSensors_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoSensors
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoSensors/Sensors.proto

#include "TempoSensors/Sensors.pb.h"
#include "TempoSensors/Sensors.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace TempoSensors {

static const char* SensorService_method_names[] = {
  "/TempoSensors.SensorService/GetAvailableSensors",
  "/TempoSensors.SensorService/StreamColorImages",
  "/TempoSensors.SensorService/StreamDepthImages",
  "/TempoSensors.SensorService/StreamLabelImages",
};

std::unique_ptr< SensorService::Stub> SensorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SensorService::Stub> stub(new SensorService::Stub(channel, options));
  return stub;
}

SensorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAvailableSensors_(SensorService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamColorImages_(SensorService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StreamDepthImages_(SensorService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StreamLabelImages_(SensorService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status SensorService::Stub::GetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::TempoSensors::AvailableSensorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoSensors::AvailableSensorsRequest, ::TempoSensors::AvailableSensorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAvailableSensors_, context, request, response);
}

void SensorService::Stub::async::GetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest* request, ::TempoSensors::AvailableSensorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoSensors::AvailableSensorsRequest, ::TempoSensors::AvailableSensorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAvailableSensors_, context, request, response, std::move(f));
}

void SensorService::Stub::async::GetAvailableSensors(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest* request, ::TempoSensors::AvailableSensorsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAvailableSensors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoSensors::AvailableSensorsResponse>* SensorService::Stub::PrepareAsyncGetAvailableSensorsRaw(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoSensors::AvailableSensorsResponse, ::TempoSensors::AvailableSensorsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAvailableSensors_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoSensors::AvailableSensorsResponse>* SensorService::Stub::AsyncGetAvailableSensorsRaw(::grpc::ClientContext* context, const ::TempoSensors::AvailableSensorsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAvailableSensorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::TempoCamera::ColorImage>* SensorService::Stub::StreamColorImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::TempoCamera::ColorImage>::Create(channel_.get(), rpcmethod_StreamColorImages_, context, request);
}

void SensorService::Stub::async::StreamColorImages(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest* request, ::grpc::ClientReadReactor< ::TempoCamera::ColorImage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::TempoCamera::ColorImage>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamColorImages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TempoCamera::ColorImage>* SensorService::Stub::AsyncStreamColorImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoCamera::ColorImage>::Create(channel_.get(), cq, rpcmethod_StreamColorImages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TempoCamera::ColorImage>* SensorService::Stub::PrepareAsyncStreamColorImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::ColorImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoCamera::ColorImage>::Create(channel_.get(), cq, rpcmethod_StreamColorImages_, context, request, false, nullptr);
}

::grpc::ClientReader< ::TempoCamera::DepthImage>* SensorService::Stub::StreamDepthImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::TempoCamera::DepthImage>::Create(channel_.get(), rpcmethod_StreamDepthImages_, context, request);
}

void SensorService::Stub::async::StreamDepthImages(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest* request, ::grpc::ClientReadReactor< ::TempoCamera::DepthImage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::TempoCamera::DepthImage>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamDepthImages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TempoCamera::DepthImage>* SensorService::Stub::AsyncStreamDepthImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoCamera::DepthImage>::Create(channel_.get(), cq, rpcmethod_StreamDepthImages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TempoCamera::DepthImage>* SensorService::Stub::PrepareAsyncStreamDepthImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::DepthImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoCamera::DepthImage>::Create(channel_.get(), cq, rpcmethod_StreamDepthImages_, context, request, false, nullptr);
}

::grpc::ClientReader< ::TempoCamera::LabelImage>* SensorService::Stub::StreamLabelImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::TempoCamera::LabelImage>::Create(channel_.get(), rpcmethod_StreamLabelImages_, context, request);
}

void SensorService::Stub::async::StreamLabelImages(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest* request, ::grpc::ClientReadReactor< ::TempoCamera::LabelImage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::TempoCamera::LabelImage>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamLabelImages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TempoCamera::LabelImage>* SensorService::Stub::AsyncStreamLabelImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoCamera::LabelImage>::Create(channel_.get(), cq, rpcmethod_StreamLabelImages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TempoCamera::LabelImage>* SensorService::Stub::PrepareAsyncStreamLabelImagesRaw(::grpc::ClientContext* context, const ::TempoCamera::LabelImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoCamera::LabelImage>::Create(channel_.get(), cq, rpcmethod_StreamLabelImages_, context, request, false, nullptr);
}

SensorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorService::Service, ::TempoSensors::AvailableSensorsRequest, ::TempoSensors::AvailableSensorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoSensors::AvailableSensorsRequest* req,
             ::TempoSensors::AvailableSensorsResponse* resp) {
               return service->GetAvailableSensors(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SensorService::Service, ::TempoCamera::ColorImageRequest, ::TempoCamera::ColorImage>(
          [](SensorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoCamera::ColorImageRequest* req,
             ::grpc::ServerWriter<::TempoCamera::ColorImage>* writer) {
               return service->StreamColorImages(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SensorService::Service, ::TempoCamera::DepthImageRequest, ::TempoCamera::DepthImage>(
          [](SensorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoCamera::DepthImageRequest* req,
             ::grpc::ServerWriter<::TempoCamera::DepthImage>* writer) {
               return service->StreamDepthImages(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SensorService::Service, ::TempoCamera::LabelImageRequest, ::TempoCamera::LabelImage>(
          [](SensorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoCamera::LabelImageRequest* req,
             ::grpc::ServerWriter<::TempoCamera::LabelImage>* writer) {
               return service->StreamLabelImages(ctx, req, writer);
             }, this)));
}

SensorService::Service::~Service() {
}

::grpc::Status SensorService::Service::GetAvailableSensors(::grpc::ServerContext* context, const ::TempoSensors::AvailableSensorsRequest* request, ::TempoSensors::AvailableSensorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorService::Service::StreamColorImages(::grpc::ServerContext* context, const ::TempoCamera::ColorImageRequest* request, ::grpc::ServerWriter< ::TempoCamera::ColorImage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorService::Service::StreamDepthImages(::grpc::ServerContext* context, const ::TempoCamera::DepthImageRequest* request, ::grpc::ServerWriter< ::TempoCamera::DepthImage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorService::Service::StreamLabelImages(::grpc::ServerContext* context, const ::TempoCamera::LabelImageRequest* request, ::grpc::ServerWriter< ::TempoCamera::LabelImage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TempoSensors


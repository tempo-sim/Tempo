// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoCamera/Camera.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_TempoCamera_2fCamera_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TempoCamera_2fCamera_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "TempoSensorsShared/Common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TempoCamera_2fCamera_2eproto TEMPOCAMERA_API

namespace google {
namespace protobuf_tempo {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf_tempo
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TEMPOCAMERA_API TableStruct_TempoCamera_2fCamera_2eproto {
  static const ::uint32_t offsets[];
};
TEMPOCAMERA_API extern const ::google::protobuf_tempo::internal::DescriptorTable
    descriptor_table_TempoCamera_2fCamera_2eproto;
namespace TempoCamera {
class ColorImage;
struct ColorImageDefaultTypeInternal;
TEMPOCAMERA_API extern ColorImageDefaultTypeInternal _ColorImage_default_instance_;
class ColorImageRequest;
struct ColorImageRequestDefaultTypeInternal;
TEMPOCAMERA_API extern ColorImageRequestDefaultTypeInternal _ColorImageRequest_default_instance_;
class DepthImage;
struct DepthImageDefaultTypeInternal;
TEMPOCAMERA_API extern DepthImageDefaultTypeInternal _DepthImage_default_instance_;
class DepthImageRequest;
struct DepthImageRequestDefaultTypeInternal;
TEMPOCAMERA_API extern DepthImageRequestDefaultTypeInternal _DepthImageRequest_default_instance_;
class LabelImage;
struct LabelImageDefaultTypeInternal;
TEMPOCAMERA_API extern LabelImageDefaultTypeInternal _LabelImage_default_instance_;
class LabelImageRequest;
struct LabelImageRequestDefaultTypeInternal;
TEMPOCAMERA_API extern LabelImageRequestDefaultTypeInternal _LabelImageRequest_default_instance_;
}  // namespace TempoCamera
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google

namespace TempoCamera {
enum ImageCompressionLevel : int {
  MIN = 0,
  LOW = 1,
  MID = 2,
  HIGH = 3,
  MAX = 4,
  ImageCompressionLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ImageCompressionLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

TEMPOCAMERA_API bool ImageCompressionLevel_IsValid(int value);
TEMPOCAMERA_API extern const uint32_t ImageCompressionLevel_internal_data_[];
constexpr ImageCompressionLevel ImageCompressionLevel_MIN = static_cast<ImageCompressionLevel>(0);
constexpr ImageCompressionLevel ImageCompressionLevel_MAX = static_cast<ImageCompressionLevel>(4);
constexpr int ImageCompressionLevel_ARRAYSIZE = 4 + 1;
TEMPOCAMERA_API const ::google::protobuf_tempo::EnumDescriptor*
ImageCompressionLevel_descriptor();
template <typename T>
const std::string& ImageCompressionLevel_Name(T value) {
  static_assert(std::is_same<T, ImageCompressionLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ImageCompressionLevel_Name().");
  return ImageCompressionLevel_Name(static_cast<ImageCompressionLevel>(value));
}
template <>
inline const std::string& ImageCompressionLevel_Name(ImageCompressionLevel value) {
  return ::google::protobuf_tempo::internal::NameOfDenseEnum<ImageCompressionLevel_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ImageCompressionLevel_Parse(absl_tempo::string_view name, ImageCompressionLevel* value) {
  return ::google::protobuf_tempo::internal::ParseNamedEnum<ImageCompressionLevel>(
      ImageCompressionLevel_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TEMPOCAMERA_API LabelImageRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoCamera.LabelImageRequest) */ {
 public:
  inline LabelImageRequest() : LabelImageRequest(nullptr) {}
  ~LabelImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LabelImageRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline LabelImageRequest(const LabelImageRequest& from)
      : LabelImageRequest(nullptr, from) {}
  LabelImageRequest(LabelImageRequest&& from) noexcept
    : LabelImageRequest() {
    *this = ::std::move(from);
  }

  inline LabelImageRequest& operator=(const LabelImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelImageRequest& operator=(LabelImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelImageRequest* internal_default_instance() {
    return reinterpret_cast<const LabelImageRequest*>(
               &_LabelImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LabelImageRequest& a, LabelImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelImageRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LabelImageRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const LabelImageRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const LabelImageRequest& from) {
    LabelImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(LabelImageRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoCamera.LabelImageRequest";
  }
  protected:
  explicit LabelImageRequest(::google::protobuf_tempo::Arena* arena);
  LabelImageRequest(::google::protobuf_tempo::Arena* arena, const LabelImageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerNameFieldNumber = 1,
    kSensorNameFieldNumber = 2,
  };
  // string owner_name = 1;
  void clear_owner_name() ;
  const std::string& owner_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_name(Arg_&& arg, Args_... args);
  std::string* mutable_owner_name();
  PROTOBUF_NODISCARD std::string* release_owner_name();
  void set_allocated_owner_name(std::string* value);

  private:
  const std::string& _internal_owner_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_name(
      const std::string& value);
  std::string* _internal_mutable_owner_name();

  public:
  // string sensor_name = 2;
  void clear_sensor_name() ;
  const std::string& sensor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sensor_name(Arg_&& arg, Args_... args);
  std::string* mutable_sensor_name();
  PROTOBUF_NODISCARD std::string* release_sensor_name();
  void set_allocated_sensor_name(std::string* value);

  private:
  const std::string& _internal_sensor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_name(
      const std::string& value);
  std::string* _internal_mutable_sensor_name();

  public:
  // @@protoc_insertion_point(class_scope:TempoCamera.LabelImageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOCAMERA_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr owner_name_;
    ::google::protobuf_tempo::internal::ArenaStringPtr sensor_name_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoCamera_2fCamera_2eproto;
};// -------------------------------------------------------------------

class TEMPOCAMERA_API DepthImageRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoCamera.DepthImageRequest) */ {
 public:
  inline DepthImageRequest() : DepthImageRequest(nullptr) {}
  ~DepthImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DepthImageRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline DepthImageRequest(const DepthImageRequest& from)
      : DepthImageRequest(nullptr, from) {}
  DepthImageRequest(DepthImageRequest&& from) noexcept
    : DepthImageRequest() {
    *this = ::std::move(from);
  }

  inline DepthImageRequest& operator=(const DepthImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthImageRequest& operator=(DepthImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DepthImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DepthImageRequest* internal_default_instance() {
    return reinterpret_cast<const DepthImageRequest*>(
               &_DepthImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DepthImageRequest& a, DepthImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DepthImageRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DepthImageRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const DepthImageRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const DepthImageRequest& from) {
    DepthImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(DepthImageRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoCamera.DepthImageRequest";
  }
  protected:
  explicit DepthImageRequest(::google::protobuf_tempo::Arena* arena);
  DepthImageRequest(::google::protobuf_tempo::Arena* arena, const DepthImageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerNameFieldNumber = 1,
    kSensorNameFieldNumber = 2,
  };
  // string owner_name = 1;
  void clear_owner_name() ;
  const std::string& owner_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_name(Arg_&& arg, Args_... args);
  std::string* mutable_owner_name();
  PROTOBUF_NODISCARD std::string* release_owner_name();
  void set_allocated_owner_name(std::string* value);

  private:
  const std::string& _internal_owner_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_name(
      const std::string& value);
  std::string* _internal_mutable_owner_name();

  public:
  // string sensor_name = 2;
  void clear_sensor_name() ;
  const std::string& sensor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sensor_name(Arg_&& arg, Args_... args);
  std::string* mutable_sensor_name();
  PROTOBUF_NODISCARD std::string* release_sensor_name();
  void set_allocated_sensor_name(std::string* value);

  private:
  const std::string& _internal_sensor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_name(
      const std::string& value);
  std::string* _internal_mutable_sensor_name();

  public:
  // @@protoc_insertion_point(class_scope:TempoCamera.DepthImageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOCAMERA_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr owner_name_;
    ::google::protobuf_tempo::internal::ArenaStringPtr sensor_name_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoCamera_2fCamera_2eproto;
};// -------------------------------------------------------------------

class TEMPOCAMERA_API ColorImageRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoCamera.ColorImageRequest) */ {
 public:
  inline ColorImageRequest() : ColorImageRequest(nullptr) {}
  ~ColorImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ColorImageRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline ColorImageRequest(const ColorImageRequest& from)
      : ColorImageRequest(nullptr, from) {}
  ColorImageRequest(ColorImageRequest&& from) noexcept
    : ColorImageRequest() {
    *this = ::std::move(from);
  }

  inline ColorImageRequest& operator=(const ColorImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorImageRequest& operator=(ColorImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorImageRequest* internal_default_instance() {
    return reinterpret_cast<const ColorImageRequest*>(
               &_ColorImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ColorImageRequest& a, ColorImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorImageRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorImageRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const ColorImageRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const ColorImageRequest& from) {
    ColorImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(ColorImageRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoCamera.ColorImageRequest";
  }
  protected:
  explicit ColorImageRequest(::google::protobuf_tempo::Arena* arena);
  ColorImageRequest(::google::protobuf_tempo::Arena* arena, const ColorImageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerNameFieldNumber = 1,
    kSensorNameFieldNumber = 2,
    kCompressionLevelFieldNumber = 3,
  };
  // string owner_name = 1;
  void clear_owner_name() ;
  const std::string& owner_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_name(Arg_&& arg, Args_... args);
  std::string* mutable_owner_name();
  PROTOBUF_NODISCARD std::string* release_owner_name();
  void set_allocated_owner_name(std::string* value);

  private:
  const std::string& _internal_owner_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_name(
      const std::string& value);
  std::string* _internal_mutable_owner_name();

  public:
  // string sensor_name = 2;
  void clear_sensor_name() ;
  const std::string& sensor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sensor_name(Arg_&& arg, Args_... args);
  std::string* mutable_sensor_name();
  PROTOBUF_NODISCARD std::string* release_sensor_name();
  void set_allocated_sensor_name(std::string* value);

  private:
  const std::string& _internal_sensor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_name(
      const std::string& value);
  std::string* _internal_mutable_sensor_name();

  public:
  // .TempoCamera.ImageCompressionLevel compression_level = 3;
  void clear_compression_level() ;
  ::TempoCamera::ImageCompressionLevel compression_level() const;
  void set_compression_level(::TempoCamera::ImageCompressionLevel value);

  private:
  ::TempoCamera::ImageCompressionLevel _internal_compression_level() const;
  void _internal_set_compression_level(::TempoCamera::ImageCompressionLevel value);

  public:
  // @@protoc_insertion_point(class_scope:TempoCamera.ColorImageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 3, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOCAMERA_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr owner_name_;
    ::google::protobuf_tempo::internal::ArenaStringPtr sensor_name_;
    int compression_level_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoCamera_2fCamera_2eproto;
};// -------------------------------------------------------------------

class TEMPOCAMERA_API LabelImage final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoCamera.LabelImage) */ {
 public:
  inline LabelImage() : LabelImage(nullptr) {}
  ~LabelImage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LabelImage(::google::protobuf_tempo::internal::ConstantInitialized);

  inline LabelImage(const LabelImage& from)
      : LabelImage(nullptr, from) {}
  LabelImage(LabelImage&& from) noexcept
    : LabelImage() {
    *this = ::std::move(from);
  }

  inline LabelImage& operator=(const LabelImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelImage& operator=(LabelImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelImage* internal_default_instance() {
    return reinterpret_cast<const LabelImage*>(
               &_LabelImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LabelImage& a, LabelImage& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelImage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelImage* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LabelImage>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const LabelImage& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const LabelImage& from) {
    LabelImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(LabelImage* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoCamera.LabelImage";
  }
  protected:
  explicit LabelImage(::google::protobuf_tempo::Arena* arena);
  LabelImage(::google::protobuf_tempo::Arena* arena, const LabelImage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // bytes data = 4;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .TempoSensorsShared.MeasurementHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::TempoSensorsShared::MeasurementHeader& header() const;
  PROTOBUF_NODISCARD ::TempoSensorsShared::MeasurementHeader* release_header();
  ::TempoSensorsShared::MeasurementHeader* mutable_header();
  void set_allocated_header(::TempoSensorsShared::MeasurementHeader* value);
  void unsafe_arena_set_allocated_header(::TempoSensorsShared::MeasurementHeader* value);
  ::TempoSensorsShared::MeasurementHeader* unsafe_arena_release_header();

  private:
  const ::TempoSensorsShared::MeasurementHeader& _internal_header() const;
  ::TempoSensorsShared::MeasurementHeader* _internal_mutable_header();

  public:
  // uint32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TempoCamera.LabelImage)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOCAMERA_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr data_;
    ::TempoSensorsShared::MeasurementHeader* header_;
    ::uint32_t width_;
    ::uint32_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoCamera_2fCamera_2eproto;
};// -------------------------------------------------------------------

class TEMPOCAMERA_API DepthImage final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoCamera.DepthImage) */ {
 public:
  inline DepthImage() : DepthImage(nullptr) {}
  ~DepthImage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DepthImage(::google::protobuf_tempo::internal::ConstantInitialized);

  inline DepthImage(const DepthImage& from)
      : DepthImage(nullptr, from) {}
  DepthImage(DepthImage&& from) noexcept
    : DepthImage() {
    *this = ::std::move(from);
  }

  inline DepthImage& operator=(const DepthImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthImage& operator=(DepthImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DepthImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DepthImage* internal_default_instance() {
    return reinterpret_cast<const DepthImage*>(
               &_DepthImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DepthImage& a, DepthImage& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthImage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DepthImage* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DepthImage>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const DepthImage& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const DepthImage& from) {
    DepthImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(DepthImage* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoCamera.DepthImage";
  }
  protected:
  explicit DepthImage(::google::protobuf_tempo::Arena* arena);
  DepthImage(::google::protobuf_tempo::Arena* arena, const DepthImage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepthsFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated float depths = 4;
  int depths_size() const;
  private:
  int _internal_depths_size() const;

  public:
  void clear_depths() ;
  float depths(int index) const;
  void set_depths(int index, float value);
  void add_depths(float value);
  const ::google::protobuf_tempo::RepeatedField<float>& depths() const;
  ::google::protobuf_tempo::RepeatedField<float>* mutable_depths();

  private:
  const ::google::protobuf_tempo::RepeatedField<float>& _internal_depths() const;
  ::google::protobuf_tempo::RepeatedField<float>* _internal_mutable_depths();

  public:
  // .TempoSensorsShared.MeasurementHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::TempoSensorsShared::MeasurementHeader& header() const;
  PROTOBUF_NODISCARD ::TempoSensorsShared::MeasurementHeader* release_header();
  ::TempoSensorsShared::MeasurementHeader* mutable_header();
  void set_allocated_header(::TempoSensorsShared::MeasurementHeader* value);
  void unsafe_arena_set_allocated_header(::TempoSensorsShared::MeasurementHeader* value);
  ::TempoSensorsShared::MeasurementHeader* unsafe_arena_release_header();

  private:
  const ::TempoSensorsShared::MeasurementHeader& _internal_header() const;
  ::TempoSensorsShared::MeasurementHeader* _internal_mutable_header();

  public:
  // uint32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TempoCamera.DepthImage)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOCAMERA_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::google::protobuf_tempo::RepeatedField<float> depths_;
    ::TempoSensorsShared::MeasurementHeader* header_;
    ::uint32_t width_;
    ::uint32_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoCamera_2fCamera_2eproto;
};// -------------------------------------------------------------------

class TEMPOCAMERA_API ColorImage final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoCamera.ColorImage) */ {
 public:
  inline ColorImage() : ColorImage(nullptr) {}
  ~ColorImage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ColorImage(::google::protobuf_tempo::internal::ConstantInitialized);

  inline ColorImage(const ColorImage& from)
      : ColorImage(nullptr, from) {}
  ColorImage(ColorImage&& from) noexcept
    : ColorImage() {
    *this = ::std::move(from);
  }

  inline ColorImage& operator=(const ColorImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorImage& operator=(ColorImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorImage* internal_default_instance() {
    return reinterpret_cast<const ColorImage*>(
               &_ColorImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ColorImage& a, ColorImage& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorImage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorImage* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorImage>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const ColorImage& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const ColorImage& from) {
    ColorImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(ColorImage* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoCamera.ColorImage";
  }
  protected:
  explicit ColorImage(::google::protobuf_tempo::Arena* arena);
  ColorImage(::google::protobuf_tempo::Arena* arena, const ColorImage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // bytes data = 4;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .TempoSensorsShared.MeasurementHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::TempoSensorsShared::MeasurementHeader& header() const;
  PROTOBUF_NODISCARD ::TempoSensorsShared::MeasurementHeader* release_header();
  ::TempoSensorsShared::MeasurementHeader* mutable_header();
  void set_allocated_header(::TempoSensorsShared::MeasurementHeader* value);
  void unsafe_arena_set_allocated_header(::TempoSensorsShared::MeasurementHeader* value);
  ::TempoSensorsShared::MeasurementHeader* unsafe_arena_release_header();

  private:
  const ::TempoSensorsShared::MeasurementHeader& _internal_header() const;
  ::TempoSensorsShared::MeasurementHeader* _internal_mutable_header();

  public:
  // uint32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TempoCamera.ColorImage)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOCAMERA_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr data_;
    ::TempoSensorsShared::MeasurementHeader* header_;
    ::uint32_t width_;
    ::uint32_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoCamera_2fCamera_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ColorImage

// .TempoSensorsShared.MeasurementHeader header = 1;
inline bool ColorImage::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::TempoSensorsShared::MeasurementHeader& ColorImage::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoSensorsShared::MeasurementHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoSensorsShared::MeasurementHeader&>(::TempoSensorsShared::_MeasurementHeader_default_instance_);
}
inline const ::TempoSensorsShared::MeasurementHeader& ColorImage::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.ColorImage.header)
  return _internal_header();
}
inline void ColorImage::unsafe_arena_set_allocated_header(::TempoSensorsShared::MeasurementHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::TempoSensorsShared::MeasurementHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoCamera.ColorImage.header)
}
inline ::TempoSensorsShared::MeasurementHeader* ColorImage::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoSensorsShared::MeasurementHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoSensorsShared::MeasurementHeader* ColorImage::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.ColorImage.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoSensorsShared::MeasurementHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::TempoSensorsShared::MeasurementHeader* ColorImage::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoSensorsShared::MeasurementHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::TempoSensorsShared::MeasurementHeader*>(p);
  }
  return _impl_.header_;
}
inline ::TempoSensorsShared::MeasurementHeader* ColorImage::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoSensorsShared::MeasurementHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:TempoCamera.ColorImage.header)
  return _msg;
}
inline void ColorImage::set_allocated_header(::TempoSensorsShared::MeasurementHeader* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::TempoSensorsShared::MeasurementHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.ColorImage.header)
}

// uint32 width = 2;
inline void ColorImage::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0u;
}
inline ::uint32_t ColorImage::width() const {
  // @@protoc_insertion_point(field_get:TempoCamera.ColorImage.width)
  return _internal_width();
}
inline void ColorImage::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:TempoCamera.ColorImage.width)
}
inline ::uint32_t ColorImage::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void ColorImage::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// uint32 height = 3;
inline void ColorImage::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0u;
}
inline ::uint32_t ColorImage::height() const {
  // @@protoc_insertion_point(field_get:TempoCamera.ColorImage.height)
  return _internal_height();
}
inline void ColorImage::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:TempoCamera.ColorImage.height)
}
inline ::uint32_t ColorImage::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void ColorImage::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// bytes data = 4;
inline void ColorImage::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ColorImage::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.ColorImage.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ColorImage::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoCamera.ColorImage.data)
}
inline std::string* ColorImage::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TempoCamera.ColorImage.data)
  return _s;
}
inline const std::string& ColorImage::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void ColorImage::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ColorImage::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ColorImage::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.ColorImage.data)
  return _impl_.data_.Release();
}
inline void ColorImage::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.ColorImage.data)
}

// -------------------------------------------------------------------

// DepthImage

// .TempoSensorsShared.MeasurementHeader header = 1;
inline bool DepthImage::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::TempoSensorsShared::MeasurementHeader& DepthImage::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoSensorsShared::MeasurementHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoSensorsShared::MeasurementHeader&>(::TempoSensorsShared::_MeasurementHeader_default_instance_);
}
inline const ::TempoSensorsShared::MeasurementHeader& DepthImage::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.DepthImage.header)
  return _internal_header();
}
inline void DepthImage::unsafe_arena_set_allocated_header(::TempoSensorsShared::MeasurementHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::TempoSensorsShared::MeasurementHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoCamera.DepthImage.header)
}
inline ::TempoSensorsShared::MeasurementHeader* DepthImage::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoSensorsShared::MeasurementHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoSensorsShared::MeasurementHeader* DepthImage::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.DepthImage.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoSensorsShared::MeasurementHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::TempoSensorsShared::MeasurementHeader* DepthImage::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoSensorsShared::MeasurementHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::TempoSensorsShared::MeasurementHeader*>(p);
  }
  return _impl_.header_;
}
inline ::TempoSensorsShared::MeasurementHeader* DepthImage::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoSensorsShared::MeasurementHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:TempoCamera.DepthImage.header)
  return _msg;
}
inline void DepthImage::set_allocated_header(::TempoSensorsShared::MeasurementHeader* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::TempoSensorsShared::MeasurementHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.DepthImage.header)
}

// uint32 width = 2;
inline void DepthImage::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0u;
}
inline ::uint32_t DepthImage::width() const {
  // @@protoc_insertion_point(field_get:TempoCamera.DepthImage.width)
  return _internal_width();
}
inline void DepthImage::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:TempoCamera.DepthImage.width)
}
inline ::uint32_t DepthImage::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void DepthImage::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// uint32 height = 3;
inline void DepthImage::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0u;
}
inline ::uint32_t DepthImage::height() const {
  // @@protoc_insertion_point(field_get:TempoCamera.DepthImage.height)
  return _internal_height();
}
inline void DepthImage::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:TempoCamera.DepthImage.height)
}
inline ::uint32_t DepthImage::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void DepthImage::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// repeated float depths = 4;
inline int DepthImage::_internal_depths_size() const {
  return _internal_depths().size();
}
inline int DepthImage::depths_size() const {
  return _internal_depths_size();
}
inline void DepthImage::clear_depths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.depths_.Clear();
}
inline float DepthImage::depths(int index) const {
  // @@protoc_insertion_point(field_get:TempoCamera.DepthImage.depths)
  return _internal_depths().Get(index);
}
inline void DepthImage::set_depths(int index, float value) {
  _internal_mutable_depths()->Set(index, value);
  // @@protoc_insertion_point(field_set:TempoCamera.DepthImage.depths)
}
inline void DepthImage::add_depths(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_depths()->Add(value);
  // @@protoc_insertion_point(field_add:TempoCamera.DepthImage.depths)
}
inline const ::google::protobuf_tempo::RepeatedField<float>& DepthImage::depths() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoCamera.DepthImage.depths)
  return _internal_depths();
}
inline ::google::protobuf_tempo::RepeatedField<float>* DepthImage::mutable_depths()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoCamera.DepthImage.depths)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_depths();
}
inline const ::google::protobuf_tempo::RepeatedField<float>& DepthImage::_internal_depths()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.depths_;
}
inline ::google::protobuf_tempo::RepeatedField<float>* DepthImage::_internal_mutable_depths() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.depths_;
}

// -------------------------------------------------------------------

// LabelImage

// .TempoSensorsShared.MeasurementHeader header = 1;
inline bool LabelImage::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::TempoSensorsShared::MeasurementHeader& LabelImage::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoSensorsShared::MeasurementHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoSensorsShared::MeasurementHeader&>(::TempoSensorsShared::_MeasurementHeader_default_instance_);
}
inline const ::TempoSensorsShared::MeasurementHeader& LabelImage::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.LabelImage.header)
  return _internal_header();
}
inline void LabelImage::unsafe_arena_set_allocated_header(::TempoSensorsShared::MeasurementHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::TempoSensorsShared::MeasurementHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoCamera.LabelImage.header)
}
inline ::TempoSensorsShared::MeasurementHeader* LabelImage::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoSensorsShared::MeasurementHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoSensorsShared::MeasurementHeader* LabelImage::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.LabelImage.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoSensorsShared::MeasurementHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::TempoSensorsShared::MeasurementHeader* LabelImage::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoSensorsShared::MeasurementHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::TempoSensorsShared::MeasurementHeader*>(p);
  }
  return _impl_.header_;
}
inline ::TempoSensorsShared::MeasurementHeader* LabelImage::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoSensorsShared::MeasurementHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:TempoCamera.LabelImage.header)
  return _msg;
}
inline void LabelImage::set_allocated_header(::TempoSensorsShared::MeasurementHeader* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::TempoSensorsShared::MeasurementHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.LabelImage.header)
}

// uint32 width = 2;
inline void LabelImage::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0u;
}
inline ::uint32_t LabelImage::width() const {
  // @@protoc_insertion_point(field_get:TempoCamera.LabelImage.width)
  return _internal_width();
}
inline void LabelImage::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:TempoCamera.LabelImage.width)
}
inline ::uint32_t LabelImage::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void LabelImage::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// uint32 height = 3;
inline void LabelImage::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0u;
}
inline ::uint32_t LabelImage::height() const {
  // @@protoc_insertion_point(field_get:TempoCamera.LabelImage.height)
  return _internal_height();
}
inline void LabelImage::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:TempoCamera.LabelImage.height)
}
inline ::uint32_t LabelImage::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void LabelImage::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// bytes data = 4;
inline void LabelImage::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& LabelImage::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.LabelImage.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LabelImage::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoCamera.LabelImage.data)
}
inline std::string* LabelImage::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TempoCamera.LabelImage.data)
  return _s;
}
inline const std::string& LabelImage::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void LabelImage::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* LabelImage::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* LabelImage::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.LabelImage.data)
  return _impl_.data_.Release();
}
inline void LabelImage::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.LabelImage.data)
}

// -------------------------------------------------------------------

// ColorImageRequest

// string owner_name = 1;
inline void ColorImageRequest::clear_owner_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.owner_name_.ClearToEmpty();
}
inline const std::string& ColorImageRequest::owner_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.ColorImageRequest.owner_name)
  return _internal_owner_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ColorImageRequest::set_owner_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.owner_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoCamera.ColorImageRequest.owner_name)
}
inline std::string* ColorImageRequest::mutable_owner_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner_name();
  // @@protoc_insertion_point(field_mutable:TempoCamera.ColorImageRequest.owner_name)
  return _s;
}
inline const std::string& ColorImageRequest::_internal_owner_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.owner_name_.Get();
}
inline void ColorImageRequest::_internal_set_owner_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.owner_name_.Set(value, GetArena());
}
inline std::string* ColorImageRequest::_internal_mutable_owner_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.owner_name_.Mutable( GetArena());
}
inline std::string* ColorImageRequest::release_owner_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.ColorImageRequest.owner_name)
  return _impl_.owner_name_.Release();
}
inline void ColorImageRequest::set_allocated_owner_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.owner_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_name_.IsDefault()) {
          _impl_.owner_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.ColorImageRequest.owner_name)
}

// string sensor_name = 2;
inline void ColorImageRequest::clear_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sensor_name_.ClearToEmpty();
}
inline const std::string& ColorImageRequest::sensor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.ColorImageRequest.sensor_name)
  return _internal_sensor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ColorImageRequest::set_sensor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sensor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoCamera.ColorImageRequest.sensor_name)
}
inline std::string* ColorImageRequest::mutable_sensor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sensor_name();
  // @@protoc_insertion_point(field_mutable:TempoCamera.ColorImageRequest.sensor_name)
  return _s;
}
inline const std::string& ColorImageRequest::_internal_sensor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sensor_name_.Get();
}
inline void ColorImageRequest::_internal_set_sensor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sensor_name_.Set(value, GetArena());
}
inline std::string* ColorImageRequest::_internal_mutable_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sensor_name_.Mutable( GetArena());
}
inline std::string* ColorImageRequest::release_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.ColorImageRequest.sensor_name)
  return _impl_.sensor_name_.Release();
}
inline void ColorImageRequest::set_allocated_sensor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sensor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sensor_name_.IsDefault()) {
          _impl_.sensor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.ColorImageRequest.sensor_name)
}

// .TempoCamera.ImageCompressionLevel compression_level = 3;
inline void ColorImageRequest::clear_compression_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.compression_level_ = 0;
}
inline ::TempoCamera::ImageCompressionLevel ColorImageRequest::compression_level() const {
  // @@protoc_insertion_point(field_get:TempoCamera.ColorImageRequest.compression_level)
  return _internal_compression_level();
}
inline void ColorImageRequest::set_compression_level(::TempoCamera::ImageCompressionLevel value) {
  _internal_set_compression_level(value);
  // @@protoc_insertion_point(field_set:TempoCamera.ColorImageRequest.compression_level)
}
inline ::TempoCamera::ImageCompressionLevel ColorImageRequest::_internal_compression_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::TempoCamera::ImageCompressionLevel>(_impl_.compression_level_);
}
inline void ColorImageRequest::_internal_set_compression_level(::TempoCamera::ImageCompressionLevel value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.compression_level_ = value;
}

// -------------------------------------------------------------------

// DepthImageRequest

// string owner_name = 1;
inline void DepthImageRequest::clear_owner_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.owner_name_.ClearToEmpty();
}
inline const std::string& DepthImageRequest::owner_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.DepthImageRequest.owner_name)
  return _internal_owner_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DepthImageRequest::set_owner_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.owner_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoCamera.DepthImageRequest.owner_name)
}
inline std::string* DepthImageRequest::mutable_owner_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner_name();
  // @@protoc_insertion_point(field_mutable:TempoCamera.DepthImageRequest.owner_name)
  return _s;
}
inline const std::string& DepthImageRequest::_internal_owner_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.owner_name_.Get();
}
inline void DepthImageRequest::_internal_set_owner_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.owner_name_.Set(value, GetArena());
}
inline std::string* DepthImageRequest::_internal_mutable_owner_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.owner_name_.Mutable( GetArena());
}
inline std::string* DepthImageRequest::release_owner_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.DepthImageRequest.owner_name)
  return _impl_.owner_name_.Release();
}
inline void DepthImageRequest::set_allocated_owner_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.owner_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_name_.IsDefault()) {
          _impl_.owner_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.DepthImageRequest.owner_name)
}

// string sensor_name = 2;
inline void DepthImageRequest::clear_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sensor_name_.ClearToEmpty();
}
inline const std::string& DepthImageRequest::sensor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.DepthImageRequest.sensor_name)
  return _internal_sensor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DepthImageRequest::set_sensor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sensor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoCamera.DepthImageRequest.sensor_name)
}
inline std::string* DepthImageRequest::mutable_sensor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sensor_name();
  // @@protoc_insertion_point(field_mutable:TempoCamera.DepthImageRequest.sensor_name)
  return _s;
}
inline const std::string& DepthImageRequest::_internal_sensor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sensor_name_.Get();
}
inline void DepthImageRequest::_internal_set_sensor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sensor_name_.Set(value, GetArena());
}
inline std::string* DepthImageRequest::_internal_mutable_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sensor_name_.Mutable( GetArena());
}
inline std::string* DepthImageRequest::release_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.DepthImageRequest.sensor_name)
  return _impl_.sensor_name_.Release();
}
inline void DepthImageRequest::set_allocated_sensor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sensor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sensor_name_.IsDefault()) {
          _impl_.sensor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.DepthImageRequest.sensor_name)
}

// -------------------------------------------------------------------

// LabelImageRequest

// string owner_name = 1;
inline void LabelImageRequest::clear_owner_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.owner_name_.ClearToEmpty();
}
inline const std::string& LabelImageRequest::owner_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.LabelImageRequest.owner_name)
  return _internal_owner_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LabelImageRequest::set_owner_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.owner_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoCamera.LabelImageRequest.owner_name)
}
inline std::string* LabelImageRequest::mutable_owner_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner_name();
  // @@protoc_insertion_point(field_mutable:TempoCamera.LabelImageRequest.owner_name)
  return _s;
}
inline const std::string& LabelImageRequest::_internal_owner_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.owner_name_.Get();
}
inline void LabelImageRequest::_internal_set_owner_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.owner_name_.Set(value, GetArena());
}
inline std::string* LabelImageRequest::_internal_mutable_owner_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.owner_name_.Mutable( GetArena());
}
inline std::string* LabelImageRequest::release_owner_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.LabelImageRequest.owner_name)
  return _impl_.owner_name_.Release();
}
inline void LabelImageRequest::set_allocated_owner_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.owner_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_name_.IsDefault()) {
          _impl_.owner_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.LabelImageRequest.owner_name)
}

// string sensor_name = 2;
inline void LabelImageRequest::clear_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sensor_name_.ClearToEmpty();
}
inline const std::string& LabelImageRequest::sensor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoCamera.LabelImageRequest.sensor_name)
  return _internal_sensor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LabelImageRequest::set_sensor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sensor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoCamera.LabelImageRequest.sensor_name)
}
inline std::string* LabelImageRequest::mutable_sensor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sensor_name();
  // @@protoc_insertion_point(field_mutable:TempoCamera.LabelImageRequest.sensor_name)
  return _s;
}
inline const std::string& LabelImageRequest::_internal_sensor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sensor_name_.Get();
}
inline void LabelImageRequest::_internal_set_sensor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sensor_name_.Set(value, GetArena());
}
inline std::string* LabelImageRequest::_internal_mutable_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sensor_name_.Mutable( GetArena());
}
inline std::string* LabelImageRequest::release_sensor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoCamera.LabelImageRequest.sensor_name)
  return _impl_.sensor_name_.Release();
}
inline void LabelImageRequest::set_allocated_sensor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sensor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sensor_name_.IsDefault()) {
          _impl_.sensor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoCamera.LabelImageRequest.sensor_name)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoCamera


namespace google {
namespace protobuf_tempo {

template <>
struct is_proto_enum<::TempoCamera::ImageCompressionLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TempoCamera::ImageCompressionLevel>() {
  return ::TempoCamera::ImageCompressionLevel_descriptor();
}

}  // namespace protobuf_tempo
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TempoCamera_2fCamera_2eproto_2epb_2eh

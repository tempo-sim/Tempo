// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoCamera/Camera.proto

#include "TempoCamera/Camera.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf_tempo;
namespace _pbi = ::google::protobuf_tempo::internal;
namespace _fl = ::google::protobuf_tempo::internal::field_layout;
namespace TempoCamera {

inline constexpr LabelImageRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : owner_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sensor_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LabelImageRequest::LabelImageRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LabelImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelImageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelImageRequestDefaultTypeInternal() {}
  union {
    LabelImageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOCAMERA_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelImageRequestDefaultTypeInternal _LabelImageRequest_default_instance_;

inline constexpr DepthImageRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : owner_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sensor_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DepthImageRequest::DepthImageRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DepthImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DepthImageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DepthImageRequestDefaultTypeInternal() {}
  union {
    DepthImageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOCAMERA_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DepthImageRequestDefaultTypeInternal _DepthImageRequest_default_instance_;

inline constexpr ColorImageRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : owner_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sensor_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        compression_level_{static_cast< ::TempoCamera::ImageCompressionLevel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ColorImageRequest::ColorImageRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ColorImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorImageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorImageRequestDefaultTypeInternal() {}
  union {
    ColorImageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOCAMERA_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorImageRequestDefaultTypeInternal _ColorImageRequest_default_instance_;

inline constexpr LabelImage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        header_{nullptr},
        width_{0u},
        height_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR LabelImage::LabelImage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LabelImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelImageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelImageDefaultTypeInternal() {}
  union {
    LabelImage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOCAMERA_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelImageDefaultTypeInternal _LabelImage_default_instance_;

inline constexpr DepthImage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        depths_{},
        header_{nullptr},
        width_{0u},
        height_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR DepthImage::DepthImage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DepthImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DepthImageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DepthImageDefaultTypeInternal() {}
  union {
    DepthImage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOCAMERA_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DepthImageDefaultTypeInternal _DepthImage_default_instance_;

inline constexpr ColorImage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        header_{nullptr},
        width_{0u},
        height_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR ColorImage::ColorImage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ColorImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorImageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorImageDefaultTypeInternal() {}
  union {
    ColorImage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOCAMERA_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorImageDefaultTypeInternal _ColorImage_default_instance_;
}  // namespace TempoCamera
static ::_pb::Metadata file_level_metadata_TempoCamera_2fCamera_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TempoCamera_2fCamera_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_TempoCamera_2fCamera_2eproto = nullptr;
const ::uint32_t TableStruct_TempoCamera_2fCamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::TempoCamera::ColorImage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::ColorImage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoCamera::ColorImage, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::ColorImage, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::ColorImage, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::ColorImage, _impl_.data_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::TempoCamera::DepthImage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::DepthImage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoCamera::DepthImage, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::DepthImage, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::DepthImage, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::DepthImage, _impl_.depths_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::TempoCamera::LabelImage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::LabelImage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoCamera::LabelImage, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::LabelImage, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::LabelImage, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::LabelImage, _impl_.data_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoCamera::ColorImageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoCamera::ColorImageRequest, _impl_.owner_name_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::ColorImageRequest, _impl_.sensor_name_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::ColorImageRequest, _impl_.compression_level_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoCamera::DepthImageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoCamera::DepthImageRequest, _impl_.owner_name_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::DepthImageRequest, _impl_.sensor_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoCamera::LabelImageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoCamera::LabelImageRequest, _impl_.owner_name_),
    PROTOBUF_FIELD_OFFSET(::TempoCamera::LabelImageRequest, _impl_.sensor_name_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::TempoCamera::ColorImage)},
        {16, 28, -1, sizeof(::TempoCamera::DepthImage)},
        {32, 44, -1, sizeof(::TempoCamera::LabelImage)},
        {48, -1, -1, sizeof(::TempoCamera::ColorImageRequest)},
        {59, -1, -1, sizeof(::TempoCamera::DepthImageRequest)},
        {69, -1, -1, sizeof(::TempoCamera::LabelImageRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::TempoCamera::_ColorImage_default_instance_._instance,
    &::TempoCamera::_DepthImage_default_instance_._instance,
    &::TempoCamera::_LabelImage_default_instance_._instance,
    &::TempoCamera::_ColorImageRequest_default_instance_._instance,
    &::TempoCamera::_DepthImageRequest_default_instance_._instance,
    &::TempoCamera::_LabelImageRequest_default_instance_._instance,
};
const char descriptor_table_protodef_TempoCamera_2fCamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030TempoCamera/Camera.proto\022\013TempoCamera\032"
    "\037TempoSensorsShared/Common.proto\"p\n\nColo"
    "rImage\0225\n\006header\030\001 \001(\0132%.TempoSensorsSha"
    "red.MeasurementHeader\022\r\n\005width\030\002 \001(\r\022\016\n\006"
    "height\030\003 \001(\r\022\014\n\004data\030\004 \001(\014\"r\n\nDepthImage"
    "\0225\n\006header\030\001 \001(\0132%.TempoSensorsShared.Me"
    "asurementHeader\022\r\n\005width\030\002 \001(\r\022\016\n\006height"
    "\030\003 \001(\r\022\016\n\006depths\030\004 \003(\002\"p\n\nLabelImage\0225\n\006"
    "header\030\001 \001(\0132%.TempoSensorsShared.Measur"
    "ementHeader\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001"
    "(\r\022\014\n\004data\030\004 \001(\014\"{\n\021ColorImageRequest\022\022\n"
    "\nowner_name\030\001 \001(\t\022\023\n\013sensor_name\030\002 \001(\t\022="
    "\n\021compression_level\030\003 \001(\0162\".TempoCamera."
    "ImageCompressionLevel\"<\n\021DepthImageReque"
    "st\022\022\n\nowner_name\030\001 \001(\t\022\023\n\013sensor_name\030\002 "
    "\001(\t\"<\n\021LabelImageRequest\022\022\n\nowner_name\030\001"
    " \001(\t\022\023\n\013sensor_name\030\002 \001(\t*E\n\025ImageCompre"
    "ssionLevel\022\007\n\003MIN\020\000\022\007\n\003LOW\020\001\022\007\n\003MID\020\002\022\010\n"
    "\004HIGH\020\003\022\007\n\003MAX\020\004b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_TempoCamera_2fCamera_2eproto_deps[1] =
    {
        &::descriptor_table_TempoSensorsShared_2fCommon_2eproto,
};
static ::absl_tempo::once_flag descriptor_table_TempoCamera_2fCamera_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TempoCamera_2fCamera_2eproto = {
    false,
    false,
    744,
    descriptor_table_protodef_TempoCamera_2fCamera_2eproto,
    "TempoCamera/Camera.proto",
    &descriptor_table_TempoCamera_2fCamera_2eproto_once,
    descriptor_table_TempoCamera_2fCamera_2eproto_deps,
    1,
    6,
    schemas,
    file_default_instances,
    TableStruct_TempoCamera_2fCamera_2eproto::offsets,
    file_level_metadata_TempoCamera_2fCamera_2eproto,
    file_level_enum_descriptors_TempoCamera_2fCamera_2eproto,
    file_level_service_descriptors_TempoCamera_2fCamera_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TempoCamera_2fCamera_2eproto_getter() {
  return &descriptor_table_TempoCamera_2fCamera_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TempoCamera_2fCamera_2eproto(&descriptor_table_TempoCamera_2fCamera_2eproto);
namespace TempoCamera {
const ::google::protobuf_tempo::EnumDescriptor* ImageCompressionLevel_descriptor() {
  ::google::protobuf_tempo::internal::AssignDescriptors(&descriptor_table_TempoCamera_2fCamera_2eproto);
  return file_level_enum_descriptors_TempoCamera_2fCamera_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ImageCompressionLevel_internal_data_[] = {
    327680u, 0u, };
bool ImageCompressionLevel_IsValid(int value) {
  return 0 <= value && value <= 4;
}
// ===================================================================

class ColorImage::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorImage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ColorImage, _impl_._has_bits_);
  static const ::TempoSensorsShared::MeasurementHeader& header(const ColorImage* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TempoSensorsShared::MeasurementHeader& ColorImage::_Internal::header(const ColorImage* msg) {
  return *msg->_impl_.header_;
}
void ColorImage::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ColorImage::ColorImage(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoCamera.ColorImage)
}
inline PROTOBUF_NDEBUG_INLINE ColorImage::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_(arena, from.data_) {}

ColorImage::ColorImage(
    ::google::protobuf_tempo::Arena* arena,
    const ColorImage& from)
    : ::google::protobuf_tempo::Message(arena) {
  ColorImage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::TempoSensorsShared::MeasurementHeader>(arena, *from._impl_.header_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:TempoCamera.ColorImage)
}
inline PROTOBUF_NDEBUG_INLINE ColorImage::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : _cached_size_{0},
        data_(arena) {}

inline void ColorImage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::height_));
}
ColorImage::~ColorImage() {
  // @@protoc_insertion_point(destructor:TempoCamera.ColorImage)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void ColorImage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.data_.Destroy();
  delete _impl_.header_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ColorImage::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoCamera.ColorImage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* ColorImage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> ColorImage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ColorImage, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ColorImage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bytes data = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ColorImage, _impl_.data_)}},
    // .TempoSensorsShared.MeasurementHeader header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ColorImage, _impl_.header_)}},
    // uint32 width = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ColorImage, _impl_.width_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ColorImage, _impl_.width_)}},
    // uint32 height = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ColorImage, _impl_.height_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ColorImage, _impl_.height_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .TempoSensorsShared.MeasurementHeader header = 1;
    {PROTOBUF_FIELD_OFFSET(ColorImage, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 width = 2;
    {PROTOBUF_FIELD_OFFSET(ColorImage, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 height = 3;
    {PROTOBUF_FIELD_OFFSET(ColorImage, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes data = 4;
    {PROTOBUF_FIELD_OFFSET(ColorImage, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::TempoSensorsShared::MeasurementHeader>()},
  }}, {{
  }},
};

::uint8_t* ColorImage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoCamera.ColorImage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .TempoSensorsShared.MeasurementHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_height(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoCamera.ColorImage)
  return target;
}

::size_t ColorImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoCamera.ColorImage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // .TempoSensorsShared.MeasurementHeader header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(*_impl_.header_);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData ColorImage::_class_data_ = {
    ColorImage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* ColorImage::GetClassData() const {
  return &_class_data_;
}

void ColorImage::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<ColorImage*>(&to_msg);
  auto& from = static_cast<const ColorImage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoCamera.ColorImage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::TempoSensorsShared::MeasurementHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void ColorImage::CopyFrom(const ColorImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoCamera.ColorImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ColorImage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ColorImage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ColorImage::InternalSwap(ColorImage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorImage, _impl_.height_)
      + sizeof(ColorImage::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(ColorImage, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf_tempo::Metadata ColorImage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoCamera_2fCamera_2eproto_getter, &descriptor_table_TempoCamera_2fCamera_2eproto_once,
      file_level_metadata_TempoCamera_2fCamera_2eproto[0]);
}
// ===================================================================

class DepthImage::_Internal {
 public:
  using HasBits = decltype(std::declval<DepthImage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DepthImage, _impl_._has_bits_);
  static const ::TempoSensorsShared::MeasurementHeader& header(const DepthImage* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TempoSensorsShared::MeasurementHeader& DepthImage::_Internal::header(const DepthImage* msg) {
  return *msg->_impl_.header_;
}
void DepthImage::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DepthImage::DepthImage(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoCamera.DepthImage)
}
inline PROTOBUF_NDEBUG_INLINE DepthImage::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        depths_{visibility, arena, from.depths_} {}

DepthImage::DepthImage(
    ::google::protobuf_tempo::Arena* arena,
    const DepthImage& from)
    : ::google::protobuf_tempo::Message(arena) {
  DepthImage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::TempoSensorsShared::MeasurementHeader>(arena, *from._impl_.header_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:TempoCamera.DepthImage)
}
inline PROTOBUF_NDEBUG_INLINE DepthImage::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : _cached_size_{0},
        depths_{visibility, arena} {}

inline void DepthImage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::height_));
}
DepthImage::~DepthImage() {
  // @@protoc_insertion_point(destructor:TempoCamera.DepthImage)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void DepthImage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DepthImage::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoCamera.DepthImage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.depths_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* DepthImage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> DepthImage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DepthImage, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DepthImage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float depths = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(DepthImage, _impl_.depths_)}},
    // .TempoSensorsShared.MeasurementHeader header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DepthImage, _impl_.header_)}},
    // uint32 width = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DepthImage, _impl_.width_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DepthImage, _impl_.width_)}},
    // uint32 height = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DepthImage, _impl_.height_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DepthImage, _impl_.height_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .TempoSensorsShared.MeasurementHeader header = 1;
    {PROTOBUF_FIELD_OFFSET(DepthImage, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 width = 2;
    {PROTOBUF_FIELD_OFFSET(DepthImage, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 height = 3;
    {PROTOBUF_FIELD_OFFSET(DepthImage, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated float depths = 4;
    {PROTOBUF_FIELD_OFFSET(DepthImage, _impl_.depths_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::TempoSensorsShared::MeasurementHeader>()},
  }}, {{
  }},
};

::uint8_t* DepthImage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoCamera.DepthImage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .TempoSensorsShared.MeasurementHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_height(), target);
  }

  // repeated float depths = 4;
  if (this->_internal_depths_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_depths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoCamera.DepthImage)
  return target;
}

::size_t DepthImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoCamera.DepthImage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float depths = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_depths_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .TempoSensorsShared.MeasurementHeader header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(*_impl_.header_);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData DepthImage::_class_data_ = {
    DepthImage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* DepthImage::GetClassData() const {
  return &_class_data_;
}

void DepthImage::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<DepthImage*>(&to_msg);
  auto& from = static_cast<const DepthImage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoCamera.DepthImage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_depths()->MergeFrom(from._internal_depths());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::TempoSensorsShared::MeasurementHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void DepthImage::CopyFrom(const DepthImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoCamera.DepthImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DepthImage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DepthImage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DepthImage::InternalSwap(DepthImage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.depths_.InternalSwap(&other->_impl_.depths_);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DepthImage, _impl_.height_)
      + sizeof(DepthImage::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(DepthImage, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf_tempo::Metadata DepthImage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoCamera_2fCamera_2eproto_getter, &descriptor_table_TempoCamera_2fCamera_2eproto_once,
      file_level_metadata_TempoCamera_2fCamera_2eproto[1]);
}
// ===================================================================

class LabelImage::_Internal {
 public:
  using HasBits = decltype(std::declval<LabelImage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LabelImage, _impl_._has_bits_);
  static const ::TempoSensorsShared::MeasurementHeader& header(const LabelImage* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TempoSensorsShared::MeasurementHeader& LabelImage::_Internal::header(const LabelImage* msg) {
  return *msg->_impl_.header_;
}
void LabelImage::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LabelImage::LabelImage(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoCamera.LabelImage)
}
inline PROTOBUF_NDEBUG_INLINE LabelImage::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_(arena, from.data_) {}

LabelImage::LabelImage(
    ::google::protobuf_tempo::Arena* arena,
    const LabelImage& from)
    : ::google::protobuf_tempo::Message(arena) {
  LabelImage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::TempoSensorsShared::MeasurementHeader>(arena, *from._impl_.header_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:TempoCamera.LabelImage)
}
inline PROTOBUF_NDEBUG_INLINE LabelImage::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : _cached_size_{0},
        data_(arena) {}

inline void LabelImage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::height_));
}
LabelImage::~LabelImage() {
  // @@protoc_insertion_point(destructor:TempoCamera.LabelImage)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void LabelImage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.data_.Destroy();
  delete _impl_.header_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LabelImage::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoCamera.LabelImage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* LabelImage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> LabelImage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LabelImage, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LabelImage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bytes data = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(LabelImage, _impl_.data_)}},
    // .TempoSensorsShared.MeasurementHeader header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LabelImage, _impl_.header_)}},
    // uint32 width = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LabelImage, _impl_.width_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LabelImage, _impl_.width_)}},
    // uint32 height = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LabelImage, _impl_.height_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(LabelImage, _impl_.height_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .TempoSensorsShared.MeasurementHeader header = 1;
    {PROTOBUF_FIELD_OFFSET(LabelImage, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 width = 2;
    {PROTOBUF_FIELD_OFFSET(LabelImage, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 height = 3;
    {PROTOBUF_FIELD_OFFSET(LabelImage, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes data = 4;
    {PROTOBUF_FIELD_OFFSET(LabelImage, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::TempoSensorsShared::MeasurementHeader>()},
  }}, {{
  }},
};

::uint8_t* LabelImage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoCamera.LabelImage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .TempoSensorsShared.MeasurementHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_height(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoCamera.LabelImage)
  return target;
}

::size_t LabelImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoCamera.LabelImage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // .TempoSensorsShared.MeasurementHeader header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(*_impl_.header_);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData LabelImage::_class_data_ = {
    LabelImage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* LabelImage::GetClassData() const {
  return &_class_data_;
}

void LabelImage::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<LabelImage*>(&to_msg);
  auto& from = static_cast<const LabelImage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoCamera.LabelImage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::TempoSensorsShared::MeasurementHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void LabelImage::CopyFrom(const LabelImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoCamera.LabelImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LabelImage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LabelImage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LabelImage::InternalSwap(LabelImage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabelImage, _impl_.height_)
      + sizeof(LabelImage::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(LabelImage, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf_tempo::Metadata LabelImage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoCamera_2fCamera_2eproto_getter, &descriptor_table_TempoCamera_2fCamera_2eproto_once,
      file_level_metadata_TempoCamera_2fCamera_2eproto[2]);
}
// ===================================================================

class ColorImageRequest::_Internal {
 public:
};

ColorImageRequest::ColorImageRequest(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoCamera.ColorImageRequest)
}
inline PROTOBUF_NDEBUG_INLINE ColorImageRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : owner_name_(arena, from.owner_name_),
        sensor_name_(arena, from.sensor_name_),
        _cached_size_{0} {}

ColorImageRequest::ColorImageRequest(
    ::google::protobuf_tempo::Arena* arena,
    const ColorImageRequest& from)
    : ::google::protobuf_tempo::Message(arena) {
  ColorImageRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.compression_level_ = from._impl_.compression_level_;

  // @@protoc_insertion_point(copy_constructor:TempoCamera.ColorImageRequest)
}
inline PROTOBUF_NDEBUG_INLINE ColorImageRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : owner_name_(arena),
        sensor_name_(arena),
        _cached_size_{0} {}

inline void ColorImageRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.compression_level_ = {};
}
ColorImageRequest::~ColorImageRequest() {
  // @@protoc_insertion_point(destructor:TempoCamera.ColorImageRequest)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void ColorImageRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.owner_name_.Destroy();
  _impl_.sensor_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ColorImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoCamera.ColorImageRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_name_.ClearToEmpty();
  _impl_.sensor_name_.ClearToEmpty();
  _impl_.compression_level_ = 0;
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* ColorImageRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 59, 2> ColorImageRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ColorImageRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string owner_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ColorImageRequest, _impl_.owner_name_)}},
    // string sensor_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ColorImageRequest, _impl_.sensor_name_)}},
    // .TempoCamera.ImageCompressionLevel compression_level = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ColorImageRequest, _impl_.compression_level_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ColorImageRequest, _impl_.compression_level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string owner_name = 1;
    {PROTOBUF_FIELD_OFFSET(ColorImageRequest, _impl_.owner_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sensor_name = 2;
    {PROTOBUF_FIELD_OFFSET(ColorImageRequest, _impl_.sensor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .TempoCamera.ImageCompressionLevel compression_level = 3;
    {PROTOBUF_FIELD_OFFSET(ColorImageRequest, _impl_.compression_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\35\12\13\0\0\0\0\0"
    "TempoCamera.ColorImageRequest"
    "owner_name"
    "sensor_name"
  }},
};

::uint8_t* ColorImageRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoCamera.ColorImageRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string owner_name = 1;
  if (!this->_internal_owner_name().empty()) {
    const std::string& _s = this->_internal_owner_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoCamera.ColorImageRequest.owner_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sensor_name = 2;
  if (!this->_internal_sensor_name().empty()) {
    const std::string& _s = this->_internal_sensor_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoCamera.ColorImageRequest.sensor_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .TempoCamera.ImageCompressionLevel compression_level = 3;
  if (this->_internal_compression_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_compression_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoCamera.ColorImageRequest)
  return target;
}

::size_t ColorImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoCamera.ColorImageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_name = 1;
  if (!this->_internal_owner_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_owner_name());
  }

  // string sensor_name = 2;
  if (!this->_internal_sensor_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_sensor_name());
  }

  // .TempoCamera.ImageCompressionLevel compression_level = 3;
  if (this->_internal_compression_level() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_compression_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData ColorImageRequest::_class_data_ = {
    ColorImageRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* ColorImageRequest::GetClassData() const {
  return &_class_data_;
}

void ColorImageRequest::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<ColorImageRequest*>(&to_msg);
  auto& from = static_cast<const ColorImageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoCamera.ColorImageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_name().empty()) {
    _this->_internal_set_owner_name(from._internal_owner_name());
  }
  if (!from._internal_sensor_name().empty()) {
    _this->_internal_set_sensor_name(from._internal_sensor_name());
  }
  if (from._internal_compression_level() != 0) {
    _this->_internal_set_compression_level(from._internal_compression_level());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void ColorImageRequest::CopyFrom(const ColorImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoCamera.ColorImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ColorImageRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ColorImageRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ColorImageRequest::InternalSwap(ColorImageRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_name_, &other->_impl_.owner_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sensor_name_, &other->_impl_.sensor_name_, arena);
  swap(_impl_.compression_level_, other->_impl_.compression_level_);
}

::google::protobuf_tempo::Metadata ColorImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoCamera_2fCamera_2eproto_getter, &descriptor_table_TempoCamera_2fCamera_2eproto_once,
      file_level_metadata_TempoCamera_2fCamera_2eproto[3]);
}
// ===================================================================

class DepthImageRequest::_Internal {
 public:
};

DepthImageRequest::DepthImageRequest(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoCamera.DepthImageRequest)
}
inline PROTOBUF_NDEBUG_INLINE DepthImageRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : owner_name_(arena, from.owner_name_),
        sensor_name_(arena, from.sensor_name_),
        _cached_size_{0} {}

DepthImageRequest::DepthImageRequest(
    ::google::protobuf_tempo::Arena* arena,
    const DepthImageRequest& from)
    : ::google::protobuf_tempo::Message(arena) {
  DepthImageRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:TempoCamera.DepthImageRequest)
}
inline PROTOBUF_NDEBUG_INLINE DepthImageRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : owner_name_(arena),
        sensor_name_(arena),
        _cached_size_{0} {}

inline void DepthImageRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DepthImageRequest::~DepthImageRequest() {
  // @@protoc_insertion_point(destructor:TempoCamera.DepthImageRequest)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void DepthImageRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.owner_name_.Destroy();
  _impl_.sensor_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DepthImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoCamera.DepthImageRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_name_.ClearToEmpty();
  _impl_.sensor_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* DepthImageRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 59, 2> DepthImageRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DepthImageRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string sensor_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DepthImageRequest, _impl_.sensor_name_)}},
    // string owner_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DepthImageRequest, _impl_.owner_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string owner_name = 1;
    {PROTOBUF_FIELD_OFFSET(DepthImageRequest, _impl_.owner_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sensor_name = 2;
    {PROTOBUF_FIELD_OFFSET(DepthImageRequest, _impl_.sensor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\35\12\13\0\0\0\0\0"
    "TempoCamera.DepthImageRequest"
    "owner_name"
    "sensor_name"
  }},
};

::uint8_t* DepthImageRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoCamera.DepthImageRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string owner_name = 1;
  if (!this->_internal_owner_name().empty()) {
    const std::string& _s = this->_internal_owner_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoCamera.DepthImageRequest.owner_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sensor_name = 2;
  if (!this->_internal_sensor_name().empty()) {
    const std::string& _s = this->_internal_sensor_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoCamera.DepthImageRequest.sensor_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoCamera.DepthImageRequest)
  return target;
}

::size_t DepthImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoCamera.DepthImageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_name = 1;
  if (!this->_internal_owner_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_owner_name());
  }

  // string sensor_name = 2;
  if (!this->_internal_sensor_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_sensor_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData DepthImageRequest::_class_data_ = {
    DepthImageRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* DepthImageRequest::GetClassData() const {
  return &_class_data_;
}

void DepthImageRequest::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<DepthImageRequest*>(&to_msg);
  auto& from = static_cast<const DepthImageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoCamera.DepthImageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_name().empty()) {
    _this->_internal_set_owner_name(from._internal_owner_name());
  }
  if (!from._internal_sensor_name().empty()) {
    _this->_internal_set_sensor_name(from._internal_sensor_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void DepthImageRequest::CopyFrom(const DepthImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoCamera.DepthImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DepthImageRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DepthImageRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DepthImageRequest::InternalSwap(DepthImageRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_name_, &other->_impl_.owner_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sensor_name_, &other->_impl_.sensor_name_, arena);
}

::google::protobuf_tempo::Metadata DepthImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoCamera_2fCamera_2eproto_getter, &descriptor_table_TempoCamera_2fCamera_2eproto_once,
      file_level_metadata_TempoCamera_2fCamera_2eproto[4]);
}
// ===================================================================

class LabelImageRequest::_Internal {
 public:
};

LabelImageRequest::LabelImageRequest(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoCamera.LabelImageRequest)
}
inline PROTOBUF_NDEBUG_INLINE LabelImageRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : owner_name_(arena, from.owner_name_),
        sensor_name_(arena, from.sensor_name_),
        _cached_size_{0} {}

LabelImageRequest::LabelImageRequest(
    ::google::protobuf_tempo::Arena* arena,
    const LabelImageRequest& from)
    : ::google::protobuf_tempo::Message(arena) {
  LabelImageRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:TempoCamera.LabelImageRequest)
}
inline PROTOBUF_NDEBUG_INLINE LabelImageRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : owner_name_(arena),
        sensor_name_(arena),
        _cached_size_{0} {}

inline void LabelImageRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LabelImageRequest::~LabelImageRequest() {
  // @@protoc_insertion_point(destructor:TempoCamera.LabelImageRequest)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void LabelImageRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.owner_name_.Destroy();
  _impl_.sensor_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LabelImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoCamera.LabelImageRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_name_.ClearToEmpty();
  _impl_.sensor_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* LabelImageRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 59, 2> LabelImageRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LabelImageRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string sensor_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LabelImageRequest, _impl_.sensor_name_)}},
    // string owner_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LabelImageRequest, _impl_.owner_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string owner_name = 1;
    {PROTOBUF_FIELD_OFFSET(LabelImageRequest, _impl_.owner_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sensor_name = 2;
    {PROTOBUF_FIELD_OFFSET(LabelImageRequest, _impl_.sensor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\35\12\13\0\0\0\0\0"
    "TempoCamera.LabelImageRequest"
    "owner_name"
    "sensor_name"
  }},
};

::uint8_t* LabelImageRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoCamera.LabelImageRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string owner_name = 1;
  if (!this->_internal_owner_name().empty()) {
    const std::string& _s = this->_internal_owner_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoCamera.LabelImageRequest.owner_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sensor_name = 2;
  if (!this->_internal_sensor_name().empty()) {
    const std::string& _s = this->_internal_sensor_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoCamera.LabelImageRequest.sensor_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoCamera.LabelImageRequest)
  return target;
}

::size_t LabelImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoCamera.LabelImageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_name = 1;
  if (!this->_internal_owner_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_owner_name());
  }

  // string sensor_name = 2;
  if (!this->_internal_sensor_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_sensor_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData LabelImageRequest::_class_data_ = {
    LabelImageRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* LabelImageRequest::GetClassData() const {
  return &_class_data_;
}

void LabelImageRequest::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<LabelImageRequest*>(&to_msg);
  auto& from = static_cast<const LabelImageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoCamera.LabelImageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_name().empty()) {
    _this->_internal_set_owner_name(from._internal_owner_name());
  }
  if (!from._internal_sensor_name().empty()) {
    _this->_internal_set_sensor_name(from._internal_sensor_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void LabelImageRequest::CopyFrom(const LabelImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoCamera.LabelImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LabelImageRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LabelImageRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LabelImageRequest::InternalSwap(LabelImageRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_name_, &other->_impl_.owner_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sensor_name_, &other->_impl_.sensor_name_, arena);
}

::google::protobuf_tempo::Metadata LabelImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoCamera_2fCamera_2eproto_getter, &descriptor_table_TempoCamera_2fCamera_2eproto_once,
      file_level_metadata_TempoCamera_2fCamera_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoCamera
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

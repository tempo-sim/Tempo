// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoLabels/Labels.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_TempoLabels_2fLabels_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TempoLabels_2fLabels_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "TempoScripting/Empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TempoLabels_2fLabels_2eproto TEMPOLABELS_API

namespace google {
namespace protobuf_tempo {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf_tempo
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TEMPOLABELS_API TableStruct_TempoLabels_2fLabels_2eproto {
  static const ::uint32_t offsets[];
};
TEMPOLABELS_API extern const ::google::protobuf_tempo::internal::DescriptorTable
    descriptor_table_TempoLabels_2fLabels_2eproto;
namespace TempoLabels {
class InstanceSemanticIdPair;
struct InstanceSemanticIdPairDefaultTypeInternal;
TEMPOLABELS_API extern InstanceSemanticIdPairDefaultTypeInternal _InstanceSemanticIdPair_default_instance_;
class InstanceToSemanticIdMap;
struct InstanceToSemanticIdMapDefaultTypeInternal;
TEMPOLABELS_API extern InstanceToSemanticIdMapDefaultTypeInternal _InstanceToSemanticIdMap_default_instance_;
}  // namespace TempoLabels
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google

namespace TempoLabels {

// ===================================================================


// -------------------------------------------------------------------

class TEMPOLABELS_API InstanceSemanticIdPair final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoLabels.InstanceSemanticIdPair) */ {
 public:
  inline InstanceSemanticIdPair() : InstanceSemanticIdPair(nullptr) {}
  ~InstanceSemanticIdPair() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InstanceSemanticIdPair(::google::protobuf_tempo::internal::ConstantInitialized);

  inline InstanceSemanticIdPair(const InstanceSemanticIdPair& from)
      : InstanceSemanticIdPair(nullptr, from) {}
  InstanceSemanticIdPair(InstanceSemanticIdPair&& from) noexcept
    : InstanceSemanticIdPair() {
    *this = ::std::move(from);
  }

  inline InstanceSemanticIdPair& operator=(const InstanceSemanticIdPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceSemanticIdPair& operator=(InstanceSemanticIdPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstanceSemanticIdPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstanceSemanticIdPair* internal_default_instance() {
    return reinterpret_cast<const InstanceSemanticIdPair*>(
               &_InstanceSemanticIdPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InstanceSemanticIdPair& a, InstanceSemanticIdPair& b) {
    a.Swap(&b);
  }
  inline void Swap(InstanceSemanticIdPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstanceSemanticIdPair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstanceSemanticIdPair* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstanceSemanticIdPair>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const InstanceSemanticIdPair& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const InstanceSemanticIdPair& from) {
    InstanceSemanticIdPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(InstanceSemanticIdPair* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoLabels.InstanceSemanticIdPair";
  }
  protected:
  explicit InstanceSemanticIdPair(::google::protobuf_tempo::Arena* arena);
  InstanceSemanticIdPair(::google::protobuf_tempo::Arena* arena, const InstanceSemanticIdPair& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kSemanticIdFieldNumber = 2,
  };
  // int32 InstanceId = 1;
  void clear_instanceid() ;
  ::int32_t instanceid() const;
  void set_instanceid(::int32_t value);

  private:
  ::int32_t _internal_instanceid() const;
  void _internal_set_instanceid(::int32_t value);

  public:
  // int32 SemanticId = 2;
  void clear_semanticid() ;
  ::int32_t semanticid() const;
  void set_semanticid(::int32_t value);

  private:
  ::int32_t _internal_semanticid() const;
  void _internal_set_semanticid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TempoLabels.InstanceSemanticIdPair)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOLABELS_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::int32_t instanceid_;
    ::int32_t semanticid_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoLabels_2fLabels_2eproto;
};// -------------------------------------------------------------------

class TEMPOLABELS_API InstanceToSemanticIdMap final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoLabels.InstanceToSemanticIdMap) */ {
 public:
  inline InstanceToSemanticIdMap() : InstanceToSemanticIdMap(nullptr) {}
  ~InstanceToSemanticIdMap() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InstanceToSemanticIdMap(::google::protobuf_tempo::internal::ConstantInitialized);

  inline InstanceToSemanticIdMap(const InstanceToSemanticIdMap& from)
      : InstanceToSemanticIdMap(nullptr, from) {}
  InstanceToSemanticIdMap(InstanceToSemanticIdMap&& from) noexcept
    : InstanceToSemanticIdMap() {
    *this = ::std::move(from);
  }

  inline InstanceToSemanticIdMap& operator=(const InstanceToSemanticIdMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceToSemanticIdMap& operator=(InstanceToSemanticIdMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstanceToSemanticIdMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstanceToSemanticIdMap* internal_default_instance() {
    return reinterpret_cast<const InstanceToSemanticIdMap*>(
               &_InstanceToSemanticIdMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InstanceToSemanticIdMap& a, InstanceToSemanticIdMap& b) {
    a.Swap(&b);
  }
  inline void Swap(InstanceToSemanticIdMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstanceToSemanticIdMap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstanceToSemanticIdMap* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstanceToSemanticIdMap>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const InstanceToSemanticIdMap& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const InstanceToSemanticIdMap& from) {
    InstanceToSemanticIdMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(InstanceToSemanticIdMap* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoLabels.InstanceToSemanticIdMap";
  }
  protected:
  explicit InstanceToSemanticIdMap(::google::protobuf_tempo::Arena* arena);
  InstanceToSemanticIdMap(::google::protobuf_tempo::Arena* arena, const InstanceToSemanticIdMap& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceSemanticIdPairsFieldNumber = 1,
  };
  // repeated .TempoLabels.InstanceSemanticIdPair instance_semantic_id_pairs = 1;
  int instance_semantic_id_pairs_size() const;
  private:
  int _internal_instance_semantic_id_pairs_size() const;

  public:
  void clear_instance_semantic_id_pairs() ;
  ::TempoLabels::InstanceSemanticIdPair* mutable_instance_semantic_id_pairs(int index);
  ::google::protobuf_tempo::RepeatedPtrField< ::TempoLabels::InstanceSemanticIdPair >*
      mutable_instance_semantic_id_pairs();
  private:
  const ::google::protobuf_tempo::RepeatedPtrField<::TempoLabels::InstanceSemanticIdPair>& _internal_instance_semantic_id_pairs() const;
  ::google::protobuf_tempo::RepeatedPtrField<::TempoLabels::InstanceSemanticIdPair>* _internal_mutable_instance_semantic_id_pairs();
  public:
  const ::TempoLabels::InstanceSemanticIdPair& instance_semantic_id_pairs(int index) const;
  ::TempoLabels::InstanceSemanticIdPair* add_instance_semantic_id_pairs();
  const ::google::protobuf_tempo::RepeatedPtrField< ::TempoLabels::InstanceSemanticIdPair >&
      instance_semantic_id_pairs() const;
  // @@protoc_insertion_point(class_scope:TempoLabels.InstanceToSemanticIdMap)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOLABELS_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField< ::TempoLabels::InstanceSemanticIdPair > instance_semantic_id_pairs_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoLabels_2fLabels_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InstanceSemanticIdPair

// int32 InstanceId = 1;
inline void InstanceSemanticIdPair::clear_instanceid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instanceid_ = 0;
}
inline ::int32_t InstanceSemanticIdPair::instanceid() const {
  // @@protoc_insertion_point(field_get:TempoLabels.InstanceSemanticIdPair.InstanceId)
  return _internal_instanceid();
}
inline void InstanceSemanticIdPair::set_instanceid(::int32_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:TempoLabels.InstanceSemanticIdPair.InstanceId)
}
inline ::int32_t InstanceSemanticIdPair::_internal_instanceid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instanceid_;
}
inline void InstanceSemanticIdPair::_internal_set_instanceid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instanceid_ = value;
}

// int32 SemanticId = 2;
inline void InstanceSemanticIdPair::clear_semanticid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.semanticid_ = 0;
}
inline ::int32_t InstanceSemanticIdPair::semanticid() const {
  // @@protoc_insertion_point(field_get:TempoLabels.InstanceSemanticIdPair.SemanticId)
  return _internal_semanticid();
}
inline void InstanceSemanticIdPair::set_semanticid(::int32_t value) {
  _internal_set_semanticid(value);
  // @@protoc_insertion_point(field_set:TempoLabels.InstanceSemanticIdPair.SemanticId)
}
inline ::int32_t InstanceSemanticIdPair::_internal_semanticid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.semanticid_;
}
inline void InstanceSemanticIdPair::_internal_set_semanticid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.semanticid_ = value;
}

// -------------------------------------------------------------------

// InstanceToSemanticIdMap

// repeated .TempoLabels.InstanceSemanticIdPair instance_semantic_id_pairs = 1;
inline int InstanceToSemanticIdMap::_internal_instance_semantic_id_pairs_size() const {
  return _internal_instance_semantic_id_pairs().size();
}
inline int InstanceToSemanticIdMap::instance_semantic_id_pairs_size() const {
  return _internal_instance_semantic_id_pairs_size();
}
inline void InstanceToSemanticIdMap::clear_instance_semantic_id_pairs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instance_semantic_id_pairs_.Clear();
}
inline ::TempoLabels::InstanceSemanticIdPair* InstanceToSemanticIdMap::mutable_instance_semantic_id_pairs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoLabels.InstanceToSemanticIdMap.instance_semantic_id_pairs)
  return _internal_mutable_instance_semantic_id_pairs()->Mutable(index);
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoLabels::InstanceSemanticIdPair>* InstanceToSemanticIdMap::mutable_instance_semantic_id_pairs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoLabels.InstanceToSemanticIdMap.instance_semantic_id_pairs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instance_semantic_id_pairs();
}
inline const ::TempoLabels::InstanceSemanticIdPair& InstanceToSemanticIdMap::instance_semantic_id_pairs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoLabels.InstanceToSemanticIdMap.instance_semantic_id_pairs)
  return _internal_instance_semantic_id_pairs().Get(index);
}
inline ::TempoLabels::InstanceSemanticIdPair* InstanceToSemanticIdMap::add_instance_semantic_id_pairs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::TempoLabels::InstanceSemanticIdPair* _add = _internal_mutable_instance_semantic_id_pairs()->Add();
  // @@protoc_insertion_point(field_add:TempoLabels.InstanceToSemanticIdMap.instance_semantic_id_pairs)
  return _add;
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoLabels::InstanceSemanticIdPair>& InstanceToSemanticIdMap::instance_semantic_id_pairs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoLabels.InstanceToSemanticIdMap.instance_semantic_id_pairs)
  return _internal_instance_semantic_id_pairs();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoLabels::InstanceSemanticIdPair>&
InstanceToSemanticIdMap::_internal_instance_semantic_id_pairs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instance_semantic_id_pairs_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoLabels::InstanceSemanticIdPair>*
InstanceToSemanticIdMap::_internal_mutable_instance_semantic_id_pairs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instance_semantic_id_pairs_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoLabels


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TempoLabels_2fLabels_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoLabels/Labels.proto

#include "TempoLabels/Labels.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf_tempo;
namespace _pbi = ::google::protobuf_tempo::internal;
namespace _fl = ::google::protobuf_tempo::internal::field_layout;
namespace TempoLabels {

inline constexpr InstanceSemanticIdPair::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instanceid_{0},
        semanticid_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InstanceSemanticIdPair::InstanceSemanticIdPair(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstanceSemanticIdPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstanceSemanticIdPairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstanceSemanticIdPairDefaultTypeInternal() {}
  union {
    InstanceSemanticIdPair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOLABELS_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstanceSemanticIdPairDefaultTypeInternal _InstanceSemanticIdPair_default_instance_;

inline constexpr InstanceToSemanticIdMap::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instance_semantic_id_pairs_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InstanceToSemanticIdMap::InstanceToSemanticIdMap(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstanceToSemanticIdMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstanceToSemanticIdMapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstanceToSemanticIdMapDefaultTypeInternal() {}
  union {
    InstanceToSemanticIdMap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOLABELS_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstanceToSemanticIdMapDefaultTypeInternal _InstanceToSemanticIdMap_default_instance_;
}  // namespace TempoLabels
static ::_pb::Metadata file_level_metadata_TempoLabels_2fLabels_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_TempoLabels_2fLabels_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_TempoLabels_2fLabels_2eproto = nullptr;
const ::uint32_t TableStruct_TempoLabels_2fLabels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoLabels::InstanceSemanticIdPair, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoLabels::InstanceSemanticIdPair, _impl_.instanceid_),
    PROTOBUF_FIELD_OFFSET(::TempoLabels::InstanceSemanticIdPair, _impl_.semanticid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoLabels::InstanceToSemanticIdMap, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoLabels::InstanceToSemanticIdMap, _impl_.instance_semantic_id_pairs_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::TempoLabels::InstanceSemanticIdPair)},
        {10, -1, -1, sizeof(::TempoLabels::InstanceToSemanticIdMap)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::TempoLabels::_InstanceSemanticIdPair_default_instance_._instance,
    &::TempoLabels::_InstanceToSemanticIdMap_default_instance_._instance,
};
const char descriptor_table_protodef_TempoLabels_2fLabels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030TempoLabels/Labels.proto\022\013TempoLabels\032"
    "\032TempoScripting/Empty.proto\"@\n\026InstanceS"
    "emanticIdPair\022\022\n\nInstanceId\030\001 \001(\005\022\022\n\nSem"
    "anticId\030\002 \001(\005\"b\n\027InstanceToSemanticIdMap"
    "\022G\n\032instance_semantic_id_pairs\030\001 \003(\0132#.T"
    "empoLabels.InstanceSemanticIdPair2i\n\014Lab"
    "elService\022Y\n\032GetInstanceToSemanticIdMap\022"
    "\025.TempoScripting.Empty\032$.TempoLabels.Ins"
    "tanceToSemanticIdMapb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_TempoLabels_2fLabels_2eproto_deps[1] =
    {
        &::descriptor_table_TempoScripting_2fEmpty_2eproto,
};
static ::absl_tempo::once_flag descriptor_table_TempoLabels_2fLabels_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TempoLabels_2fLabels_2eproto = {
    false,
    false,
    348,
    descriptor_table_protodef_TempoLabels_2fLabels_2eproto,
    "TempoLabels/Labels.proto",
    &descriptor_table_TempoLabels_2fLabels_2eproto_once,
    descriptor_table_TempoLabels_2fLabels_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_TempoLabels_2fLabels_2eproto::offsets,
    file_level_metadata_TempoLabels_2fLabels_2eproto,
    file_level_enum_descriptors_TempoLabels_2fLabels_2eproto,
    file_level_service_descriptors_TempoLabels_2fLabels_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TempoLabels_2fLabels_2eproto_getter() {
  return &descriptor_table_TempoLabels_2fLabels_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TempoLabels_2fLabels_2eproto(&descriptor_table_TempoLabels_2fLabels_2eproto);
namespace TempoLabels {
// ===================================================================

class InstanceSemanticIdPair::_Internal {
 public:
};

InstanceSemanticIdPair::InstanceSemanticIdPair(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoLabels.InstanceSemanticIdPair)
}
InstanceSemanticIdPair::InstanceSemanticIdPair(
    ::google::protobuf_tempo::Arena* arena, const InstanceSemanticIdPair& from)
    : InstanceSemanticIdPair(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE InstanceSemanticIdPair::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : _cached_size_{0} {}

inline void InstanceSemanticIdPair::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instanceid_),
           0,
           offsetof(Impl_, semanticid_) -
               offsetof(Impl_, instanceid_) +
               sizeof(Impl_::semanticid_));
}
InstanceSemanticIdPair::~InstanceSemanticIdPair() {
  // @@protoc_insertion_point(destructor:TempoLabels.InstanceSemanticIdPair)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void InstanceSemanticIdPair::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InstanceSemanticIdPair::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoLabels.InstanceSemanticIdPair)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.instanceid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.semanticid_) -
      reinterpret_cast<char*>(&_impl_.instanceid_)) + sizeof(_impl_.semanticid_));
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* InstanceSemanticIdPair::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> InstanceSemanticIdPair::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_InstanceSemanticIdPair_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 SemanticId = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstanceSemanticIdPair, _impl_.semanticid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(InstanceSemanticIdPair, _impl_.semanticid_)}},
    // int32 InstanceId = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstanceSemanticIdPair, _impl_.instanceid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(InstanceSemanticIdPair, _impl_.instanceid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 InstanceId = 1;
    {PROTOBUF_FIELD_OFFSET(InstanceSemanticIdPair, _impl_.instanceid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 SemanticId = 2;
    {PROTOBUF_FIELD_OFFSET(InstanceSemanticIdPair, _impl_.semanticid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* InstanceSemanticIdPair::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoLabels.InstanceSemanticIdPair)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 InstanceId = 1;
  if (this->_internal_instanceid() != 0) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_instanceid(), target);
  }

  // int32 SemanticId = 2;
  if (this->_internal_semanticid() != 0) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_semanticid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoLabels.InstanceSemanticIdPair)
  return target;
}

::size_t InstanceSemanticIdPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoLabels.InstanceSemanticIdPair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 InstanceId = 1;
  if (this->_internal_instanceid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_instanceid());
  }

  // int32 SemanticId = 2;
  if (this->_internal_semanticid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_semanticid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData InstanceSemanticIdPair::_class_data_ = {
    InstanceSemanticIdPair::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* InstanceSemanticIdPair::GetClassData() const {
  return &_class_data_;
}

void InstanceSemanticIdPair::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<InstanceSemanticIdPair*>(&to_msg);
  auto& from = static_cast<const InstanceSemanticIdPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoLabels.InstanceSemanticIdPair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instanceid() != 0) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (from._internal_semanticid() != 0) {
    _this->_internal_set_semanticid(from._internal_semanticid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void InstanceSemanticIdPair::CopyFrom(const InstanceSemanticIdPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoLabels.InstanceSemanticIdPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InstanceSemanticIdPair::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InstanceSemanticIdPair::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InstanceSemanticIdPair::InternalSwap(InstanceSemanticIdPair* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstanceSemanticIdPair, _impl_.semanticid_)
      + sizeof(InstanceSemanticIdPair::_impl_.semanticid_)
      - PROTOBUF_FIELD_OFFSET(InstanceSemanticIdPair, _impl_.instanceid_)>(
          reinterpret_cast<char*>(&_impl_.instanceid_),
          reinterpret_cast<char*>(&other->_impl_.instanceid_));
}

::google::protobuf_tempo::Metadata InstanceSemanticIdPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoLabels_2fLabels_2eproto_getter, &descriptor_table_TempoLabels_2fLabels_2eproto_once,
      file_level_metadata_TempoLabels_2fLabels_2eproto[0]);
}
// ===================================================================

class InstanceToSemanticIdMap::_Internal {
 public:
};

InstanceToSemanticIdMap::InstanceToSemanticIdMap(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoLabels.InstanceToSemanticIdMap)
}
inline PROTOBUF_NDEBUG_INLINE InstanceToSemanticIdMap::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : instance_semantic_id_pairs_{visibility, arena, from.instance_semantic_id_pairs_},
        _cached_size_{0} {}

InstanceToSemanticIdMap::InstanceToSemanticIdMap(
    ::google::protobuf_tempo::Arena* arena,
    const InstanceToSemanticIdMap& from)
    : ::google::protobuf_tempo::Message(arena) {
  InstanceToSemanticIdMap* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:TempoLabels.InstanceToSemanticIdMap)
}
inline PROTOBUF_NDEBUG_INLINE InstanceToSemanticIdMap::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : instance_semantic_id_pairs_{visibility, arena},
        _cached_size_{0} {}

inline void InstanceToSemanticIdMap::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
InstanceToSemanticIdMap::~InstanceToSemanticIdMap() {
  // @@protoc_insertion_point(destructor:TempoLabels.InstanceToSemanticIdMap)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void InstanceToSemanticIdMap::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InstanceToSemanticIdMap::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoLabels.InstanceToSemanticIdMap)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instance_semantic_id_pairs_.Clear();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* InstanceToSemanticIdMap::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> InstanceToSemanticIdMap::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InstanceToSemanticIdMap_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .TempoLabels.InstanceSemanticIdPair instance_semantic_id_pairs = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InstanceToSemanticIdMap, _impl_.instance_semantic_id_pairs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .TempoLabels.InstanceSemanticIdPair instance_semantic_id_pairs = 1;
    {PROTOBUF_FIELD_OFFSET(InstanceToSemanticIdMap, _impl_.instance_semantic_id_pairs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::TempoLabels::InstanceSemanticIdPair>()},
  }}, {{
  }},
};

::uint8_t* InstanceToSemanticIdMap::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoLabels.InstanceToSemanticIdMap)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .TempoLabels.InstanceSemanticIdPair instance_semantic_id_pairs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instance_semantic_id_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_instance_semantic_id_pairs().Get(i);
    target = ::google::protobuf_tempo::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoLabels.InstanceToSemanticIdMap)
  return target;
}

::size_t InstanceToSemanticIdMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoLabels.InstanceToSemanticIdMap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TempoLabels.InstanceSemanticIdPair instance_semantic_id_pairs = 1;
  total_size += 1UL * this->_internal_instance_semantic_id_pairs_size();
  for (const auto& msg : this->_internal_instance_semantic_id_pairs()) {
    total_size +=
      ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData InstanceToSemanticIdMap::_class_data_ = {
    InstanceToSemanticIdMap::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* InstanceToSemanticIdMap::GetClassData() const {
  return &_class_data_;
}

void InstanceToSemanticIdMap::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<InstanceToSemanticIdMap*>(&to_msg);
  auto& from = static_cast<const InstanceToSemanticIdMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoLabels.InstanceToSemanticIdMap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instance_semantic_id_pairs()->MergeFrom(
      from._internal_instance_semantic_id_pairs());
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void InstanceToSemanticIdMap::CopyFrom(const InstanceToSemanticIdMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoLabels.InstanceToSemanticIdMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InstanceToSemanticIdMap::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InstanceToSemanticIdMap::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InstanceToSemanticIdMap::InternalSwap(InstanceToSemanticIdMap* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instance_semantic_id_pairs_.InternalSwap(&other->_impl_.instance_semantic_id_pairs_);
}

::google::protobuf_tempo::Metadata InstanceToSemanticIdMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoLabels_2fLabels_2eproto_getter, &descriptor_table_TempoLabels_2fLabels_2eproto_once,
      file_level_metadata_TempoLabels_2fLabels_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoLabels
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

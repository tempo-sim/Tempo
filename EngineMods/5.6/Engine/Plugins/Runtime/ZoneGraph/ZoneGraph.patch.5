diff --git Source/ZoneGraph/Private/ZoneShapeUtilities.cpp Source/ZoneGraph/Private/ZoneShapeUtilities.cpp
index 641d8be..f6e25da 100644
--- Source/ZoneGraph/Private/ZoneShapeUtilities.cpp
+++ Source/ZoneGraph/Private/ZoneShapeUtilities.cpp
@@ -999,15 +999,6 @@ void TessellateSplineShape(TConstArrayView<FZoneShapePoint> Points, const FZoneL
 	}
 }
 
-struct FLaneConnectionCandidate
-{
-	FLaneConnectionCandidate() = default;
-	FLaneConnectionCandidate(const int32 InSourceSlot, const int32 InDestSlot, const FZoneGraphTagMask InTagMask) : SourceSlot(InSourceSlot), DestSlot(InDestSlot), TagMask(InTagMask) {}
-	int32 SourceSlot = 0;
-	int32 DestSlot = 0;
-	FZoneGraphTagMask TagMask;
-};
-
 static bool CalcDestinationSide(TConstArrayView<FLaneConnectionSlot> SourceSlots, TConstArrayView<FLaneConnectionSlot> DestSlots)
 {
 	const FVector SourceCenter = (SourceSlots[0].Position + SourceSlots.Last().Position);
@@ -1028,7 +1019,7 @@ static int32 FitRange(const int32 RangeFirst, const int32 RangeNum, const int32
 	return First;
 }
 
-static void AddOrUpdateConnection(TArray<FLaneConnectionCandidate>& Candidates, const int32 SourceSlot, const int32 DestSlot, const FZoneGraphTagMask& TagMask)
+static void AddOrUpdateConnection(TArray<FLaneConnectionCandidate>& Candidates, const int32 SourceSlot, const int32 DestSlot, const FZoneGraphTagMask& TagMask, const EZoneGraphTurnType TurnType)
 {
 	FLaneConnectionCandidate* Cand = Candidates.FindByPredicate([SourceSlot, DestSlot](const FLaneConnectionCandidate& Cand) -> bool { return Cand.SourceSlot == SourceSlot&& Cand.DestSlot == DestSlot; });
 	if (Cand != nullptr)
@@ -1037,12 +1028,12 @@ static void AddOrUpdateConnection(TArray<FLaneConnectionCandidate>& Candidates,
 	}
 	else
 	{
-		Candidates.Add(FLaneConnectionCandidate(SourceSlot, DestSlot, TagMask));
+		Candidates.Add(FLaneConnectionCandidate(SourceSlot, DestSlot, TagMask, TurnType));
 	}
 }
 	
 static void AppendLaneConnectionCandidates(TArray<FLaneConnectionCandidate>& Candidates, TConstArrayView<FLaneConnectionSlot> SourceSlots, TConstArrayView<FLaneConnectionSlot> DestSlots,
-										   const FZoneGraphTagMask& TagMask, const int32 MainDestPointIndex, bool bTurning)
+										   const FZoneGraphTagMask& TagMask, const int32 MainDestPointIndex, EZoneGraphTurnType TurnType)
 {
 	const int32 SourceNum = SourceSlots.Num();
 	const int32 DestNum = DestSlots.Num();
@@ -1065,7 +1056,7 @@ static void AppendLaneConnectionCandidates(TArray<FLaneConnectionCandidate>& Can
 		const int32 DestIdx = CalcDestinationSide(SourceSlots, DestSlots) ? (DestNum - 1) : 0;
 
 		// If a connection exists, we'll just update the tags, otherwise create new.
-		AddOrUpdateConnection(Candidates, SourceSlots[SourceIdx].Index, DestSlots[DestIdx].Index, TagMask);
+		AddOrUpdateConnection(Candidates, SourceSlots[SourceIdx].Index, DestSlots[DestIdx].Index, TagMask, TurnType);
 
 		return;
 	}
@@ -1080,7 +1071,7 @@ static void AppendLaneConnectionCandidates(TArray<FLaneConnectionCandidate>& Can
 			const int32 SourceIdx = i;
 			const int32 DestIdx = BestDestLaneIndex;
 
-			AddOrUpdateConnection(Candidates, SourceSlots[SourceIdx].Index, DestSlots[DestIdx].Index, TagMask);
+			AddOrUpdateConnection(Candidates, SourceSlots[SourceIdx].Index, DestSlots[DestIdx].Index, TagMask, TurnType);
 		}
 		
 		return;
@@ -1088,14 +1079,14 @@ static void AppendLaneConnectionCandidates(TArray<FLaneConnectionCandidate>& Can
 
 	const bool bOneLanePerDestination = EnumHasAnyFlags(ConnectionRestrictions, EZoneShapeLaneConnectionRestrictions::OneLanePerDestination);
 
-	if (bTurning)
+	if (TurnType != EZoneGraphTurnType::NoTurn)
 	{
 		// Turning connections by default get fully-connected slots. The builder may filter them later.
 		for (const FLaneConnectionSlot& SourceSlot : SourceSlots)
 		{
 			for (const FLaneConnectionSlot& DestSlot : DestSlots)
 			{
-				AddOrUpdateConnection(Candidates, SourceSlot.Index, DestSlot.Index, TagMask);
+				AddOrUpdateConnection(Candidates, SourceSlot.Index, DestSlot.Index, TagMask, TurnType);
 			}
 		}
 	}
@@ -1120,7 +1111,7 @@ static void AppendLaneConnectionCandidates(TArray<FLaneConnectionCandidate>& Can
 				const int32 SourceIdx = FMath::Clamp(SourceIdxUnClamped, 0, SourceNum - 1);
 				const int32 DestIdx = i;
 			
-				AddOrUpdateConnection(Candidates, SourceSlots[SourceIdx].Index, DestSlots[DestIdx].Index, TagMask);
+				AddOrUpdateConnection(Candidates, SourceSlots[SourceIdx].Index, DestSlots[DestIdx].Index, TagMask, TurnType);
 			}
 		}
 		else
@@ -1134,7 +1125,7 @@ static void AppendLaneConnectionCandidates(TArray<FLaneConnectionCandidate>& Can
 			{
 				const int32 SourceIdx = i;
 				const int32 DestIdx = FMath::Clamp(i - FirstIndex, 0, DestNum - 1);
-				AddOrUpdateConnection(Candidates, SourceSlots[SourceIdx].Index, DestSlots[DestIdx].Index, TagMask);
+				AddOrUpdateConnection(Candidates, SourceSlots[SourceIdx].Index, DestSlots[DestIdx].Index, TagMask, TurnType);
 			}
 		}
 	}
@@ -1198,6 +1189,56 @@ struct FConnectionEntry
 	const int32 IncomingConnections;
 };
 
+static EZoneGraphTurnType GetTurnTypeBetweenSourceDest(const FConnectionEntry& Source, TConstArrayView<FConnectionEntry> Destinations, int32 DestIdx, const FMatrix& LocalToWorld, const FZoneGraphBuildSettings& BuildSettings)
+{
+	const FVector SourceForward = LocalToWorld.TransformVector(Source.Point.Rotation.RotateVector(FVector::ForwardVector));
+	const FVector SourceUp = LocalToWorld.TransformVector(Source.Point.Rotation.RotateVector(FVector::UpVector));
+
+	float MinAngle = UE_PI;
+	float MaxAngle = -UE_PI;
+	int32 MinDestIdx = -1;
+	int32 MaxDestIdx = -1;
+	for (int32 Idx = 0; Idx < Destinations.Num(); ++Idx)
+	{
+		const FConnectionEntry& Destination = Destinations[Idx];
+		const FVector DestForward = LocalToWorld.TransformVector(Destination.Point.Rotation.RotateVector(FVector::ForwardVector));
+
+		const float AngleMagnitude = FMath::Acos(FVector::DotProduct(SourceForward, -DestForward));
+		const float AngleSign = FMath::Sign(FVector::CrossProduct(SourceForward, -DestForward).Dot(SourceUp));
+		const float Angle = AngleSign * AngleMagnitude;
+
+		if (Angle < MinAngle)
+		{
+			MinAngle = Angle;
+			MinDestIdx = Idx;
+		}
+		if (Angle > MaxAngle)
+		{
+			MaxAngle = Angle;
+			MaxDestIdx = Idx;
+		}
+	}
+
+	const float TurnThresholdAngle = FMath::DegreesToRadians(BuildSettings.TurnThresholdAngle);
+
+	// A connection must have an angle above the threshold *and* be the right-most connection to be a right turn,
+	// unless bSingleTurningConnectionPerTurnType is false.
+	if ((!BuildSettings.bSingleTurningConnectionPerTurnType || DestIdx == MaxDestIdx) && MaxAngle > TurnThresholdAngle)
+	{
+		return EZoneGraphTurnType::Right;
+	}
+
+	// A connection must have an angle below the threshold *and* be the left-most connection to be a left turn,
+	// unless bSingleTurningConnectionPerTurnType is false.
+	if ((!BuildSettings.bSingleTurningConnectionPerTurnType || DestIdx == MinDestIdx) && MinAngle < -TurnThresholdAngle)
+	{
+		return EZoneGraphTurnType::Left;
+	}
+
+	// Otherwise, the connection is not considered a turn.
+	return EZoneGraphTurnType::NoTurn;
+}
+
 static void BuildLanesBetweenPoints(const FConnectionEntry& Source, TConstArrayView<FConnectionEntry> Destinations,
 									const UZoneShapeComponent& PolygonShapeComp, const TMap<int32, const UZoneShapeComponent*>& PointIndexToZoneShapeComponent, const FZoneGraphBuilder& ZoneGraphBuilder,
 									const EZoneShapePolygonRoutingType RoutingType, const FZoneGraphTagMask ZoneTags, const FZoneGraphBuildSettings& BuildSettings, const FMatrix& LocalToWorld,
@@ -1205,7 +1246,6 @@ static void BuildLanesBetweenPoints(const FConnectionEntry& Source, TConstArrayV
 {
 	const float LaneConnectionAngle = BuildSettings.LaneConnectionAngle;
 	const float MaxConnectionAngleCos = FMath::Cos(FMath::DegreesToRadians(LaneConnectionAngle));
-	const float TurnThresholdAngleCos = FMath::Cos(FMath::DegreesToRadians(BuildSettings.TurnThresholdAngle));
 
 	const float SourceTotalWidth = Source.Profile.GetLanesTotalWidth();
 
@@ -1280,6 +1320,7 @@ static void BuildLanesBetweenPoints(const FConnectionEntry& Source, TConstArrayV
 			continue;
 		}
 
+		// Use closest point on dest so that lane profile widths do not affect direction.
 		const FVector ClosestDestPoint = FMath::ClosestPointOnSegment(SourcePosition, DestLaneLeft, DestLaneRight);
 		const FVector DirToDest = (ClosestDestPoint - SourcePosition).GetSafeNormal();
 
@@ -1290,13 +1331,12 @@ static void BuildLanesBetweenPoints(const FConnectionEntry& Source, TConstArrayV
 
 		const EZoneShapeLaneConnectionRestrictions Restrictions = Source.Point.GetLaneConnectionRestrictions() | RestrictionsFromRules;
 
-		// Use closest point on dest so that lane profile widths do not affect direction.
-		const FVector SourceSide = FVector::CrossProduct(SourceForward, SourceUp);
+		const EZoneGraphTurnType TurnType = GetTurnTypeBetweenSourceDest(Source, Destinations, PointIndex, LocalToWorld, BuildSettings);
 
-		const bool bIsTurning = FVector::DotProduct(SourceForward, DirToDest) < TurnThresholdAngleCos;
-		const bool bIsLeftTurn = bIsTurning && FVector::DotProduct(SourceSide, DirToDest) > 0.0f;
+		const bool bIsTurning = TurnType != EZoneGraphTurnType::NoTurn;
+		const bool bIsLeftTurn = TurnType == EZoneGraphTurnType::Left;
 
-		DestinationTurnTypes.Add(PointIndex, bIsTurning ? (bIsLeftTurn ? EZoneGraphTurnType::Left : EZoneGraphTurnType::Right) : EZoneGraphTurnType::NoTurn);
+		DestinationTurnTypes.Add(PointIndex, TurnType);
 
 		// Discard destination that would result in left or right turns.
 		if (EnumHasAnyFlags(Restrictions, EZoneShapeLaneConnectionRestrictions::NoLeftTurn | EZoneShapeLaneConnectionRestrictions::NoRightTurn))
@@ -1424,7 +1464,7 @@ static void BuildLanesBetweenPoints(const FConnectionEntry& Source, TConstArrayV
 
 			if (TagSourceSlots.Num() > 0 && TagDestSlots.Num() > 0)
 			{
-				AppendLaneConnectionCandidates(Candidates, TagSourceSlots, TagDestSlots, TagMask, MainDestPointIndex, TurnType != EZoneGraphTurnType::NoTurn);
+				AppendLaneConnectionCandidates(Candidates, TagSourceSlots, TagDestSlots, TagMask, MainDestPointIndex, TurnType);
 			}
 		}
 	}
@@ -1629,7 +1669,8 @@ static void BuildLanesBetweenPoints(const FConnectionEntry& Source, TConstArrayV
 			}
 			if (NearestSourceSlot != INDEX_NONE)
 			{
-				Candidates.Add(FLaneConnectionCandidate(NearestSourceSlot, DestSlotIdx, NearestSlotTags));
+				const EZoneGraphTurnType TurnType = GetTurnTypeBetweenSourceDest(Source, Destinations, DestPointIndex, LocalToWorld, BuildSettings);
+				Candidates.Add(FLaneConnectionCandidate(NearestSourceSlot, DestSlotIdx, NearestSlotTags, TurnType));
 			}
 		}
 	}
@@ -1640,7 +1681,8 @@ static void BuildLanesBetweenPoints(const FConnectionEntry& Source, TConstArrayV
 	const bool bAllZoneShapeComponentsInMapAreValid = !ShapeComponentsInMap.Contains(nullptr);
 	if (bAllZoneShapeComponentsInMapAreValid)
 	{
-		Candidates.RemoveAll([&ZoneGraphBuilder, &PolygonShapeComp, &SourceSlots, &DestSlots, &PointIndexToZoneShapeComponent](const FLaneConnectionCandidate& Candidate)
+		TArray<FLaneConnectionCandidate> AllCandidates = Candidates;
+		Candidates.RemoveAll([&ZoneGraphBuilder, &PolygonShapeComp, &SourceSlots, &DestSlots, &PointIndexToZoneShapeComponent, &AllCandidates](const FLaneConnectionCandidate& Candidate)
 		{
 			// The true index to the ZoneShapePoint in this context is the slot's EntryID, not PointIndex field.
 			// In fact, SourceSlots don't even fill-out their PointIndex fields.
@@ -1654,7 +1696,7 @@ static void BuildLanesBetweenPoints(const FConnectionEntry& Source, TConstArrayV
 			const FLaneConnectionSlot& DestSlot = DestSlots[Candidate.DestSlot];
 			const UZoneShapeComponent* DestShapeComp = PointIndexToZoneShapeComponent[DestSlot.EntryID];
 
-			return ZoneGraphBuilder.ShouldFilterLaneConnection(PolygonShapeComp, *SourceShapeComp, SourceSlots, Candidate.SourceSlot, *DestShapeComp, DestSlots, Candidate.DestSlot);
+			return ZoneGraphBuilder.ShouldFilterLaneConnection(PolygonShapeComp, *SourceShapeComp, SourceSlots, Candidate.SourceSlot, *DestShapeComp, DestSlots, Candidate.DestSlot, AllCandidates);
 		});
 	}
 
diff --git Source/ZoneGraph/Public/ZoneGraphBuilder.h Source/ZoneGraph/Public/ZoneGraphBuilder.h
index 6b894f8..e330d3a 100644
--- Source/ZoneGraph/Public/ZoneGraphBuilder.h
+++ Source/ZoneGraph/Public/ZoneGraphBuilder.h
@@ -62,6 +62,27 @@ struct FZoneGraphBuildData
 	TMap<TObjectPtr<const UZoneShapeComponent>, FZoneShapeComponentBuildData> ZoneShapeComponentBuildData;
 };
 
+USTRUCT(BlueprintType)
+struct FLaneConnectionCandidate
+{
+	GENERATED_BODY()
+
+	FLaneConnectionCandidate() = default;
+	FLaneConnectionCandidate(const int32 InSourceSlot, const int32 InDestSlot, const FZoneGraphTagMask InTagMask, const EZoneGraphTurnType InTurnType) : SourceSlot(InSourceSlot), DestSlot(InDestSlot), TagMask(InTagMask), TurnType(InTurnType) {}
+
+	UPROPERTY()
+	int32 SourceSlot = 0;
+
+	UPROPERTY()
+	int32 DestSlot = 0;
+
+	UPROPERTY()
+	FZoneGraphTagMask TagMask;
+
+	UPROPERTY()
+	EZoneGraphTurnType TurnType;
+};
+
 USTRUCT()
 struct FZoneGraphBuilder
 {
@@ -96,7 +117,7 @@ public:
 	 */
 	UE_API void QueryHashGrid(const FBox& Bounds, TArray<FZoneGraphBuilderHashGrid2D::ItemIDType>& OutResults);
 
-	UE_API virtual bool ShouldFilterLaneConnection(const UZoneShapeComponent& PolygonShapeComp, const UZoneShapeComponent& SourceShapeComp, const TArray<FLaneConnectionSlot>& SourceSlots, const int32 SourceSlotQueryIndex, const UZoneShapeComponent& DestShapeComp, const TArray<FLaneConnectionSlot>& DestSlots, const int32 DestSlotQueryIndex) const { return false; };
+	UE_API virtual bool ShouldFilterLaneConnection(const UZoneShapeComponent& PolygonShapeComp, const UZoneShapeComponent& SourceShapeComp, const TArray<FLaneConnectionSlot>& SourceSlots, const int32 SourceSlotQueryIndex, const UZoneShapeComponent& DestShapeComp, const TArray<FLaneConnectionSlot>& DestSlots, const int32 DestSlotQueryIndex, const TArray<FLaneConnectionCandidate>& AllCandidates) const { return false; };
 
 protected:
 	UE_API void Build(AZoneGraphData& ZoneGraphData);
diff --git Source/ZoneGraph/Public/ZoneGraphTypes.h Source/ZoneGraph/Public/ZoneGraphTypes.h
index f938060..4bbadfb 100644
--- Source/ZoneGraph/Public/ZoneGraphTypes.h
+++ Source/ZoneGraph/Public/ZoneGraphTypes.h
@@ -1051,6 +1051,10 @@ struct FZoneGraphBuildSettings
 	UPROPERTY(Category = Lanes, EditAnywhere)
 	bool bFillEmptyDestination = true;
 
+	/** Whether to limit turning connections to only the left-most or right-most turning connections. */
+	UPROPERTY(Category = Lanes, EditAnywhere)
+	bool bSingleTurningConnectionPerTurnType = true;
+
 	/** Max distance between two shape points for them to be snapped together. */
 	UPROPERTY(Category = PointSnapping, EditAnywhere)
 	float ConnectionSnapDistance = 25.0f;

diff --git Source/ZoneGraph/Private/ZoneShapeUtilities.cpp Source/ZoneGraph/Private/ZoneShapeUtilities.cpp
index fb7d038..641d8be 100644
--- Source/ZoneGraph/Private/ZoneShapeUtilities.cpp
+++ Source/ZoneGraph/Private/ZoneShapeUtilities.cpp
@@ -7,6 +7,7 @@
 #include "HAL/IConsoleManager.h"
 #include "ZoneGraphSettings.h"
 #include "ZoneShapeComponent.h"
+#include "Kismet/KismetMathLibrary.h"
 
 namespace UE::ZoneShape::Utilities {
 
@@ -1687,7 +1688,46 @@ static void BuildLanesBetweenPoints(const FConnectionEntry& Source, TConstArrayV
 
 		Lane.PointsBegin = OutZoneStorage.LanePoints.Num();
 
-		if (RoutingType == EZoneShapePolygonRoutingType::Bezier)
+		if (RoutingType == EZoneShapePolygonRoutingType::TempoBezier)
+		{
+			// For non-turning connections, use Distance between source and dest slots / 3.0 as the radius.
+			float SourceTangentLength = FVector::Distance(SourceSlot.Position, DestSlot.Position) / 3.0;
+			float DestTangentLength = SourceTangentLength;
+
+			static const float MinAngleCos = FMath::Cos(FMath::DegreesToRadians(BuildSettings.TurnThresholdAngle));
+			const bool bIsTurning = FVector2D::DotProduct(FVector2D(SourceSlot.Forward), FVector2D(-DestSlot.Forward)) < MinAngleCos;
+			if (bIsTurning)
+			{
+				// For turning connections, choose source and dest radius to approximate a circle
+				const FVector2D SourcePoint2D(SourceSlot.Position);
+				const FVector2D DestPoint2D(DestSlot.Position);
+				const FVector2D SourceRadial2D = Rotate90CCW(FVector2D(SourceSlot.Forward));
+				const FVector2D DestRadial2D = Rotate90CCW(FVector2D(DestSlot.Forward));
+				float SourceRadius, DestRadius;
+				if (ensureMsgf(IntersectRayRay2D(FVector2D(SourceSlot.Position), SourceRadial2D.GetSafeNormal(),
+						FVector2D(DestSlot.Position), DestRadial2D.GetSafeNormal(),
+						/*out*/ SourceRadius, /*out*/ DestRadius),
+					TEXT("No intersection found between radial directions while building ZoneShape with TempoBezier routing")))
+				{
+					// Credit: https://stackoverflow.com/questions/1734745/how-to-create-circle-with-b%C3%A9zier-curves
+					const float TurnAngle = UKismetMathLibrary::DegreesToRadians(UKismetMathLibrary::NormalizedDeltaRotator(SourceSlot.Forward.Rotation(), (-DestSlot.Forward).Rotation()).Yaw);
+					const float Mul = FMath::Abs(4.0 / 3.0 * FMath::Tan(TurnAngle / 4.0)) * BuildSettings.TempoBezierTangentLengthMultiplier;
+
+					// Abs because IntersectRayRay2D will return negative radii if the intersection is in the opposite direction of the radial directions supplied.
+					SourceTangentLength = FMath::Abs(SourceRadius) * Mul;
+					DestTangentLength = FMath::Abs(DestRadius) * Mul;
+				}
+			}
+
+			// Calculate Bezier curve connecting the source and destination.
+			const FVector SourceControlPoint = SourceSlot.Position + SourceSlot.Forward * SourceTangentLength;
+			const FVector DestControlPoint = DestSlot.Position + DestSlot.Forward * DestTangentLength;
+
+			OutZoneStorage.LanePoints.Add(SourceSlot.Position); // Explicitly add the start point as tessellate omits the start point.
+			const float TessTolerance = BuildSettings.GetLaneTessellationTolerance(Lane.Tags);
+			UE::CubicBezier::Tessellate(OutZoneStorage.LanePoints, SourceSlot.Position, SourceControlPoint, DestControlPoint, DestSlot.Position, TessTolerance);
+		}
+		else if (RoutingType == EZoneShapePolygonRoutingType::Bezier)
 		{
 			// Calculate Bezier curve connecting the source and destination.
 			const float TangentLength = FVector::Distance(SourceSlot.Position, DestSlot.Position) / 3.0f;
diff --git Source/ZoneGraph/Public/ZoneGraphTypes.h Source/ZoneGraph/Public/ZoneGraphTypes.h
index 1fc6656..f938060 100644
--- Source/ZoneGraph/Public/ZoneGraphTypes.h
+++ Source/ZoneGraph/Public/ZoneGraphTypes.h
@@ -760,6 +760,7 @@ enum class FZoneShapeType : uint8
 UENUM(BlueprintType)
 enum class EZoneShapePolygonRoutingType : uint8
 {
+	TempoBezier,	// Use bezier curves with Tempo-adjusted tangents for routing.
 	Bezier,			// Use bezier curves for routing.
 	Arcs,			// Use arcs for lane routing.
 };
@@ -1026,6 +1027,10 @@ struct FZoneGraphBuildSettings
 	UPROPERTY(Category = Lanes, EditAnywhere)
 	float TurnThresholdAngle = 5.0f;
 
+	/** When using TemopBezier routing type, scale the nominal tangent lengths for turning connections by this amount. */
+	UPROPERTY(Category = Lanes, EditAnywhere)
+	float TempoBezierTangentLengthMultiplier = 1.0f;
+
 	/** Routing rules applied to polygon shapes */
 	UPROPERTY(Category = Lanes, EditAnywhere)
 	TArray<FZoneGraphLaneRoutingRule> PolygonRoutingRules;
diff --git Source/ZoneGraph/Public/ZoneShapeComponent.h Source/ZoneGraph/Public/ZoneShapeComponent.h
index 82bb913..d654e0f 100644
--- Source/ZoneGraph/Public/ZoneShapeComponent.h
+++ Source/ZoneGraph/Public/ZoneShapeComponent.h
@@ -204,7 +204,7 @@ private:
 
 	/** Polygon shape routing type */
 	UPROPERTY(Category = Zone, EditAnywhere, BlueprintReadWrite, meta = (AllowPrivateAccess = "true", IncludeInHash, EditCondition = "ShapeType == FZoneShapeType::Polygon"))
-	EZoneShapePolygonRoutingType PolygonRoutingType = EZoneShapePolygonRoutingType::Bezier;
+	EZoneShapePolygonRoutingType PolygonRoutingType = EZoneShapePolygonRoutingType::TempoBezier;
 	
 	/** Zone tags, the lanes inherit zone tags. */
 	UPROPERTY(Category = Zone, EditAnywhere, BlueprintReadWrite, meta = (AllowPrivateAccess = "true", IncludeInHash))

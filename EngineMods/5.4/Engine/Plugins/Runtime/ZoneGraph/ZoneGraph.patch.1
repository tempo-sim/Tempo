diff --color -urN Source/ZoneGraph/Private/ZoneGraphBuilder.cpp /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Private/ZoneGraphBuilder.cpp
--- Source/ZoneGraph/Private/ZoneGraphBuilder.cpp	2024-09-26 22:04:48
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Private/ZoneGraphBuilder.cpp	2024-09-17 17:52:05
@@ -1,11 +1,10 @@
 // Copyright Epic Games, Inc. All Rights Reserved.
 
 #include "ZoneGraphBuilder.h"
+
 #include "ZoneGraphTypes.h"
 #include "ZoneGraphDelegates.h"
 #include "ZoneGraphData.h"
-#include "ZoneShapeComponent.h"
-#include "ZoneShapeUtilities.h"
 #include "ZoneGraphSettings.h"
 
 namespace UE::ZoneGraph::Internal
@@ -312,6 +311,9 @@
 void FZoneGraphBuilder::BuildSingleShape(const UZoneShapeComponent& ShapeComp, const FMatrix& LocalToWorld, FZoneGraphStorage& OutZoneStorage)
 {
 	TArray<FZoneShapeLaneInternalLink> InternalLinks;
+
+	// Const cast is intentional.  Need to update connected shapes before running through the build pathway.
+	const_cast<UZoneShapeComponent&>(ShapeComp).UpdateConnectedShapes();
 	AppendShapeToZoneStorage(ShapeComp, LocalToWorld, OutZoneStorage, InternalLinks);
 	ConnectLanes(InternalLinks, OutZoneStorage);
 }
@@ -437,7 +439,7 @@
 			}
 		}
 
-		UE::ZoneShape::Utilities::TessellatePolygonShape(AdjustedPoints, ShapeComp.GetPolygonRoutingType(), PolyLaneProfiles, ShapeComp.GetTags(), LocalToWorld, OutZoneStorage, OutInternalLinks);
+		UE::ZoneShape::Utilities::TessellatePolygonShape(ShapeComp, *this, AdjustedPoints, PolyLaneProfiles, LocalToWorld, OutZoneStorage, OutInternalLinks);
 	}
 	else
 	{
@@ -500,7 +502,7 @@
 	const uint32 NewHash = CalculateCombinedShapeHash(ZoneGraphData);
 	ZoneGraphData.SetCombinedShapeHash(NewHash);
 
-	ZoneGraphData.UpdateDrawing();
+ZoneGraphData.UpdateDrawing();
 }
 
 void FZoneGraphBuilder::ConnectLanes(TArray<FZoneShapeLaneInternalLink>& InternalLinks, FZoneGraphStorage& ZoneStorage)
diff --color -urN Source/ZoneGraph/Private/ZoneGraphSubsystem.cpp /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Private/ZoneGraphSubsystem.cpp
--- Source/ZoneGraph/Private/ZoneGraphSubsystem.cpp	2024-09-26 22:04:48
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Private/ZoneGraphSubsystem.cpp	2024-09-26 20:29:34
@@ -60,7 +60,7 @@
 	const UWorld* World = GetWorld();
 	if (!World->IsGameWorld())
 	{
-		if (Builder.NeedsRebuild())
+		if (GetBuilder().NeedsRebuild())
 		{
 			const UZoneGraphSettings* ZoneGraphSettings = GetDefault<UZoneGraphSettings>();
 			check(ZoneGraphSettings);
@@ -73,7 +73,7 @@
 	else
 	{
 		// Zone graph is not meant to update during game tick.
-		ensureMsgf(!Builder.NeedsRebuild(), TEXT("Builder should not need update during game."));
+		ensureMsgf(!GetBuilder().NeedsRebuild(), TEXT("Builder should not need update during game."));
 	}
 #endif
 }
@@ -194,7 +194,7 @@
 	{
 		if (UZoneShapeComponent* ShapeComp = Actor->FindComponentByClass<UZoneShapeComponent>())
 		{
-			Builder.OnZoneShapeComponentChanged(*ShapeComp);
+			GetBuilder().OnZoneShapeComponentChanged(*ShapeComp);
 		}
 	}
 }
@@ -216,7 +216,7 @@
 
 	// Find the levels where the splines are located.
 	TSet<ULevel*> SupportedLevels;
-	for (const FZoneGraphBuilderRegisteredComponent& Registered : Builder.GetRegisteredZoneShapeComponents())
+	for (const FZoneGraphBuilderRegisteredComponent& Registered : GetBuilder().GetRegisteredZoneShapeComponents())
 	{
 		if (Registered.Component)
 		{
@@ -270,7 +270,7 @@
 		}
 	}
 
-	Builder.BuildAll(AllZoneGraphData, bForceRebuild);
+	GetBuilder().BuildAll(AllZoneGraphData, bForceRebuild);
 }
 
 #endif // WITH_EDITOR
@@ -472,6 +472,23 @@
 		}
 	}
 	return FName();
+}
+
+TArray<FName> UZoneGraphSubsystem::GetTagNamesFromTagMask(const FZoneGraphTagMask& TagMask) const
+{
+	TArray<FName> TagNames;
+	
+	const TConstArrayView<FZoneGraphTagInfo>& TagInfos = GetTagInfos();
+	for (const FZoneGraphTagInfo& TagInfo : TagInfos)
+	{
+		if (TagMask.Contains(TagInfo.Tag))
+		{
+			const FName& TagName = GetTagName(TagInfo.Tag);
+			TagNames.Add(TagName);
+		}
+	}
+
+	return TagNames;
 }
 
 const FZoneGraphTagInfo* UZoneGraphSubsystem::GetTagInfo(FZoneGraphTag Tag) const
diff --color -urN Source/ZoneGraph/Private/ZoneGraphTypes.cpp /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Private/ZoneGraphTypes.cpp
--- Source/ZoneGraph/Private/ZoneGraphTypes.cpp	2024-09-26 22:04:48
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Private/ZoneGraphTypes.cpp	2024-09-17 17:52:05
@@ -135,6 +135,29 @@
 	}
 }
 
+bool FZoneLaneProfile::IsValid(const bool bMustHaveName) const
+{
+	if (bMustHaveName && Name == NAME_None)
+	{
+		return false;
+	}
+		
+	if (!ID.IsValid())
+	{
+		return false;
+	}
+		
+	for (const FZoneLaneDesc& Lane : Lanes)
+	{
+		if (Lane.Width <= 0.0f)
+		{
+			return false;
+		}
+	}
+
+	return true;
+}
+
 float FZoneGraphBuildSettings::GetLaneTessellationTolerance(const FZoneGraphTagMask LaneTags) const
 {
 	float Tolerance = CommonTessellationTolerance;
diff --color -urN Source/ZoneGraph/Private/ZoneShapeUtilities.cpp /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Private/ZoneShapeUtilities.cpp
--- Source/ZoneGraph/Private/ZoneShapeUtilities.cpp	2024-09-26 22:04:48
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Private/ZoneShapeUtilities.cpp	2024-09-17 17:52:05
@@ -2,9 +2,11 @@
 
 #include "ZoneShapeUtilities.h"
 #include "BezierUtilities.h"
+#include "ZoneGraphBuilder.h"
 #include "Algo/Reverse.h"
 #include "HAL/IConsoleManager.h"
 #include "ZoneGraphSettings.h"
+#include "ZoneShapeComponent.h"
 
 namespace UE::ZoneGraph::Debug {
 
@@ -998,23 +1000,6 @@
 	}
 }
 
-
-struct FLaneConnectionSlot
-{
-	FVector Position = FVector::ZeroVector;
-	FVector Forward = FVector::ZeroVector;
-	FVector Up = FVector::ZeroVector;
-	FZoneLaneDesc LaneDesc;
-	int32 PointIndex = 0;	// Index in dest point array
-	int32 Index = 0;		// Index within an entry
-	uint16 EntryID = 0;		// Entry ID from source data
-	const FZoneLaneProfile* Profile = nullptr;
-	EZoneShapeLaneConnectionRestrictions Restrictions = EZoneShapeLaneConnectionRestrictions::None;
-	float DistanceFromProfileEdge = 0.0f;	// Distance from lane profile edge
-	float DistanceFromFarProfileEdge = 0.0f; // Distance to other lane profile edge
-	float InnerTurningRadius = 0.0f; // Inner/minimum turning radius when using Arc routing.
-};
-
 struct FLaneConnectionCandidate
 {
 	FLaneConnectionCandidate() = default;
@@ -1201,6 +1186,7 @@
 };
 
 static void BuildLanesBetweenPoints(const FConnectionEntry& Source, TConstArrayView<FConnectionEntry> Destinations,
+									const UZoneShapeComponent& PolygonShapeComp, const TMap<int32, const UZoneShapeComponent*>& PointIndexToZoneShapeComponent, const FZoneGraphBuilder& ZoneGraphBuilder,
 									const EZoneShapePolygonRoutingType RoutingType, const FZoneGraphTagMask ZoneTags, const FZoneGraphBuildSettings& BuildSettings, const FMatrix& LocalToWorld,
 									FZoneGraphStorage& OutZoneStorage, TArray<FZoneShapeLaneInternalLink>& OutInternalLinks)
 {
@@ -1611,6 +1597,30 @@
 		}
 	}
 
+	TArray<const UZoneShapeComponent*> ShapeComponentsInMap;
+	PointIndexToZoneShapeComponent.GenerateValueArray(ShapeComponentsInMap);
+
+	const bool bAllZoneShapeComponentsInMapAreValid = !ShapeComponentsInMap.Contains(nullptr);
+	if (bAllZoneShapeComponentsInMapAreValid)
+	{
+		Candidates.RemoveAll([&ZoneGraphBuilder, &PolygonShapeComp, &SourceSlots, &DestSlots, &PointIndexToZoneShapeComponent](const FLaneConnectionCandidate& Candidate)
+		{
+			// The true index to the ZoneShapePoint in this context is the slot's EntryID, not PointIndex field.
+			// In fact, SourceSlots don't even fill-out their PointIndex fields.
+			// So, we look up the ZoneShapeComponent for this slot via EntryID.
+			const FLaneConnectionSlot& SourceSlot = SourceSlots[Candidate.SourceSlot];
+			const UZoneShapeComponent* SourceShapeComp = PointIndexToZoneShapeComponent[SourceSlot.EntryID];
+
+			// The true index to the ZoneShapePoint in this context is the slot's EntryID, not PointIndex field.
+			// DestSlots use PointIndex to point into the Destinations array, not the ZoneShapePoints array.
+			// So, we look up the ZoneShapeComponent for this slot via EntryID.
+			const FLaneConnectionSlot& DestSlot = DestSlots[Candidate.DestSlot];
+			const UZoneShapeComponent* DestShapeComp = PointIndexToZoneShapeComponent[DestSlot.EntryID];
+
+			return ZoneGraphBuilder.ShouldFilterLaneConnection(PolygonShapeComp, *SourceShapeComp, SourceSlots, Candidate.SourceSlot, *DestShapeComp, DestSlots, Candidate.DestSlot);
+		});
+	}
+
 	// Sort candidates for lane adjacency. First by source index, then by destination index.
 	// Lane adjacency is not that obvious in polygons. With this sort we make sure that they are somewhat in order and that the whole set can be iterated over.
 	Candidates.Sort([](const FLaneConnectionCandidate& A, const FLaneConnectionCandidate& B) { return A.SourceSlot < B.SourceSlot || (A.SourceSlot == B.SourceSlot && A.DestSlot < B.DestSlot); });
@@ -1729,9 +1739,27 @@
 	return TessTolerance;
 }
 
-void TessellatePolygonShape(TConstArrayView<FZoneShapePoint> Points, const EZoneShapePolygonRoutingType RoutingType, TConstArrayView<FZoneLaneProfile> LaneProfiles, const FZoneGraphTagMask ZoneTags, const FMatrix& LocalToWorld,
+void TessellatePolygonShape(const UZoneShapeComponent& PolygonShapeComp, const FZoneGraphBuilder& ZoneGraphBuilder,
+							TConstArrayView<FZoneShapePoint> Points, TConstArrayView<FZoneLaneProfile> LaneProfiles, const FMatrix& LocalToWorld,
 							FZoneGraphStorage& OutZoneStorage, TArray<FZoneShapeLaneInternalLink>& OutInternalLinks)
 {
+	const EZoneShapePolygonRoutingType RoutingType = PolygonShapeComp.GetPolygonRoutingType();
+	const FZoneGraphTagMask ZoneTags = PolygonShapeComp.GetTags();
+
+	TConstArrayView<FZoneShapeConnector> ShapeConnectors = PolygonShapeComp.GetShapeConnectors();
+	TConstArrayView<FZoneShapeConnection> ConnectedShapes = PolygonShapeComp.GetConnectedShapes();
+
+	checkf(ConnectedShapes.Num() == ShapeConnectors.Num(), TEXT("ConnectedShapes and ShapeConnectors should have the same number of entries."));
+	
+	TMap<int32, const UZoneShapeComponent*> PointIndexToZoneShapeComponent;
+	for (int32 ConnectionIndex = 0; ConnectionIndex < ConnectedShapes.Num(); ++ConnectionIndex)
+	{
+		const int32 PointIndex = ShapeConnectors[ConnectionIndex].PointIndex;
+		const UZoneShapeComponent* ZoneShapeComponent = ConnectedShapes[ConnectionIndex].ShapeComponent.Get();
+		
+		PointIndexToZoneShapeComponent.Add(PointIndex, ZoneShapeComponent);
+	}
+	
 	const UZoneGraphSettings* ZoneGraphSettings = GetDefault<UZoneGraphSettings>();
 	check(ZoneGraphSettings);
 	const FZoneGraphBuildSettings& BuildSettings = ZoneGraphSettings->GetBuildSettings();
@@ -1822,7 +1850,7 @@
 		}
 		// Connect source to destinations.
 		BuildLanesBetweenPoints(FConnectionEntry(SourcePoint, SourceLaneProfile, SourceIdx, OutgoingConnections[SourceIdx], IncomingConnections[SourceIdx]),
-								Destinations, RoutingType, ZoneTags, BuildSettings, LocalToWorld, OutZoneStorage, OutInternalLinks);
+								Destinations, PolygonShapeComp, PointIndexToZoneShapeComponent, ZoneGraphBuilder, RoutingType, ZoneTags, BuildSettings, LocalToWorld, OutZoneStorage, OutInternalLinks);
 	}
 
 	Zone.LanesEnd = OutZoneStorage.Lanes.Num();
diff --color -urN Source/ZoneGraph/Public/ZoneGraphBuilder.h /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneGraphBuilder.h
--- Source/ZoneGraph/Public/ZoneGraphBuilder.h	2024-09-26 22:04:46
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneGraphBuilder.h	2024-09-17 17:52:05
@@ -5,6 +5,8 @@
 #include "CoreMinimal.h"
 #include "ZoneGraphTypes.h"
 #include "HierarchicalHashGrid2D.h"
+#include "ZoneShapeComponent.h"
+#include "ZoneShapeUtilities.h"
 #include "ZoneGraphBuilder.generated.h"
 
 class AZoneGraphData;
@@ -65,7 +67,7 @@
 
 public:
 	FZoneGraphBuilder();
-	~FZoneGraphBuilder();
+	virtual ~FZoneGraphBuilder();
 
 	void RegisterZoneShapeComponent(UZoneShapeComponent& ShapeComp);
 	void UnregisterZoneShapeComponent(UZoneShapeComponent& ShapeComp);
@@ -84,7 +86,7 @@
 
 	/** Converts single zone shape into a zone storage, used in UI for editing and rendering.
 	*/
-	static void BuildSingleShape(const UZoneShapeComponent& ShapeComp, const FMatrix& LocalToWorld, FZoneGraphStorage& OutZoneStorage);
+	void BuildSingleShape(const UZoneShapeComponent& ShapeComp, const FMatrix& LocalToWorld, FZoneGraphStorage& OutZoneStorage);
 
 	/** Returns items that potentially touch the bounds in the HashGrid. Operates on grid level, can have false positives.
 	 * @param Bounds - Query bounding box.
@@ -92,12 +94,14 @@
 	 */
 	void QueryHashGrid(const FBox& Bounds, TArray<FZoneGraphBuilderHashGrid2D::ItemIDType>& OutResults);
 
+	virtual bool ShouldFilterLaneConnection(const UZoneShapeComponent& PolygonShapeComp, const UZoneShapeComponent& SourceShapeComp, const TArray<FLaneConnectionSlot>& SourceSlots, const int32 SourceSlotQueryIndex, const UZoneShapeComponent& DestShapeComp, const TArray<FLaneConnectionSlot>& DestSlots, const int32 DestSlotQueryIndex) const { return false; };
+
 protected:
 	void Build(AZoneGraphData& ZoneGraphData);
 	void RequestRebuild();
 	void OnLaneProfileChanged(const FZoneLaneProfileRef& ChangedLaneProfileRef);
 	uint32 CalculateCombinedShapeHash(const AZoneGraphData& ZoneGraphData) const;
-	static void AppendShapeToZoneStorage(const UZoneShapeComponent& ShapeComp, const FMatrix& LocalToWorld, FZoneGraphStorage& OutZoneStorage, TArray<FZoneShapeLaneInternalLink>& OutInternalLinks, FZoneGraphBuildData* InBuildData = nullptr);
+	void AppendShapeToZoneStorage(const UZoneShapeComponent& ShapeComp, const FMatrix& LocalToWorld, FZoneGraphStorage& OutZoneStorage, TArray<FZoneShapeLaneInternalLink>& OutInternalLinks, FZoneGraphBuildData* InBuildData = nullptr);
 	static void ConnectLanes(TArray<FZoneShapeLaneInternalLink>& InternalLinks, FZoneGraphStorage& OutZoneStorage);
 
 	UPROPERTY(Transient)
diff --color -urN Source/ZoneGraph/Public/ZoneGraphSubsystem.h /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneGraphSubsystem.h
--- Source/ZoneGraph/Public/ZoneGraphSubsystem.h	2024-09-26 22:04:46
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneGraphSubsystem.h	2024-09-26 20:29:34
@@ -47,7 +47,9 @@
 	TConstArrayView<FRegisteredZoneGraphData> GetRegisteredZoneGraphData() const { return RegisteredZoneGraphData; }
 
 #if WITH_EDITOR
-	FZoneGraphBuilder& GetBuilder() { return Builder; }
+	void RegisterBuilder(FZoneGraphBuilder* Builder) { OverrideBuilder = Builder; }
+	void ResetBuilder() { OverrideBuilder = nullptr; }
+	FZoneGraphBuilder& GetBuilder() { return OverrideBuilder != nullptr ? *OverrideBuilder : DefaultBuilder; }
 #endif
 
 	// Queries
@@ -113,11 +115,17 @@
 	// Tags
 	
 	// Returns tag based on name.
+	UFUNCTION(BlueprintCallable, Category = "ZoneGraphSubsystem|Tags")
 	FZoneGraphTag GetTagByName(FName TagName) const;
 
 	// Returns the name of a specific tag.
+	UFUNCTION(BlueprintCallable, Category = "ZoneGraphSubsystem|Tags")
 	FName GetTagName(FZoneGraphTag Tag) const;
 
+	// Returns the names of all the tags in a given tag mask.
+	UFUNCTION(BlueprintCallable, Category = "ZoneGraphSubsystem|Tags")
+	TArray<FName> GetTagNamesFromTagMask(const FZoneGraphTagMask& TagMask) const;
+
 	// Returns info about a specific tag.
 	const FZoneGraphTagInfo* GetTagInfo(FZoneGraphTag Tag) const;
 
@@ -159,6 +167,7 @@
 #if WITH_EDITOR
 	FDelegateHandle OnActorMovedHandle;
 	FDelegateHandle OnRequestRebuildHandle;
-	FZoneGraphBuilder Builder;
+	FZoneGraphBuilder* OverrideBuilder;
+	FZoneGraphBuilder DefaultBuilder;
 #endif
 };
diff --color -urN Source/ZoneGraph/Public/ZoneGraphTypes.h /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneGraphTypes.h
--- Source/ZoneGraph/Public/ZoneGraphTypes.h	2024-09-26 22:04:46
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneGraphTypes.h	2024-09-17 17:52:05
@@ -192,11 +192,20 @@
 
 // Filter passes if any of the 'AnyTags', and all of the 'AllTags', and none of the 'NotTags' are present.
 // Setting include or exclude tags to None, will skip that particular check.
-USTRUCT()
+USTRUCT(BlueprintType)
 struct ZONEGRAPH_API FZoneGraphTagFilter
 {
 	GENERATED_BODY()
 
+	FZoneGraphTagFilter() = default;
+
+	FZoneGraphTagFilter(const FZoneGraphTagMask& InAnyTags, const FZoneGraphTagMask& InAllTags, const FZoneGraphTagMask& InNotTags)
+		: AnyTags(InAnyTags)
+		, AllTags(InAllTags)
+		, NotTags(InNotTags)
+	{
+	}
+
 	bool Pass(const FZoneGraphTagMask Tags) const
 	{
 		return (AnyTags == FZoneGraphTagMask::None || Tags.ContainsAny(AnyTags))
@@ -207,13 +216,19 @@
 	bool operator==(const FZoneGraphTagFilter& RHS) const { return AnyTags == RHS.AnyTags && AllTags == RHS.AllTags && NotTags == RHS.NotTags; }
 	bool operator!=(const FZoneGraphTagFilter& RHS) const { return AnyTags != RHS.AnyTags || AllTags != RHS.AllTags || NotTags != RHS.NotTags; }
 
-	UPROPERTY(Category = Zone, EditAnywhere)
+	friend uint32 GetTypeHash(const FZoneGraphTagFilter& ZoneGraphTagFilter)
+	{
+		const uint32 AnyAllHash = HashCombine(GetTypeHash(ZoneGraphTagFilter.AnyTags), GetTypeHash(ZoneGraphTagFilter.AllTags));
+		return HashCombine(AnyAllHash, GetTypeHash(ZoneGraphTagFilter.NotTags));
+	}
+
+	UPROPERTY(Category = Zone, EditAnywhere, BlueprintReadWrite)
 	FZoneGraphTagMask AnyTags = FZoneGraphTagMask::None;
 
-	UPROPERTY(Category = Zone, EditAnywhere)
+	UPROPERTY(Category = Zone, EditAnywhere, BlueprintReadWrite)
 	FZoneGraphTagMask AllTags = FZoneGraphTagMask::None;
 
-	UPROPERTY(Category = Zone, EditAnywhere)
+	UPROPERTY(Category = Zone, EditAnywhere, BlueprintReadWrite)
 	FZoneGraphTagMask NotTags = FZoneGraphTagMask::None;
 };
 
@@ -290,6 +305,8 @@
 
 	// Reverses the lane profile. The lanes array will be reversed, as well as the lane directions. 
 	void ReverseLanes();
+
+	bool IsValid(const bool bMustHaveName = true) const;
 
 	UPROPERTY(Category = Lane, EditAnywhere)
 	FName Name;
diff --color -urN Source/ZoneGraph/Public/ZoneShapeComponent.h /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneShapeComponent.h
--- Source/ZoneGraph/Public/ZoneShapeComponent.h	2024-09-26 22:04:46
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneShapeComponent.h	2024-09-17 17:52:05
@@ -5,7 +5,6 @@
 #include "CoreMinimal.h"
 #include "UObject/ObjectMacros.h"
 #include "Components/PrimitiveComponent.h"
-#include "ZoneGraphSubsystem.h"
 #include "ZoneGraphTypes.h"
 #include "ZoneShapeComponent.generated.h"
 
diff --color -urN Source/ZoneGraph/Public/ZoneShapeUtilities.h /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneShapeUtilities.h
--- Source/ZoneGraph/Public/ZoneShapeUtilities.h	2024-09-26 22:04:46
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneShapeUtilities.h	2024-09-17 17:52:05
@@ -5,6 +5,8 @@
 #include "ZoneGraphTypes.h"
 #include "ZoneShapeUtilities.generated.h"
 
+struct FZoneGraphBuilder;
+
 /** Struct describing a link for a specified lane, used during building */
 USTRUCT()
 struct FZoneShapeLaneInternalLink
@@ -25,6 +27,22 @@
 	FZoneLaneLinkData LinkData = {};
 };
 
+struct FLaneConnectionSlot
+{
+	FVector Position = FVector::ZeroVector;
+	FVector Forward = FVector::ZeroVector;
+	FVector Up = FVector::ZeroVector;
+	FZoneLaneDesc LaneDesc;
+	int32 PointIndex = 0;	// Index in dest point array
+	int32 Index = 0;		// Index within an entry
+	uint16 EntryID = 0;		// Entry ID from source data
+	const FZoneLaneProfile* Profile = nullptr;
+	EZoneShapeLaneConnectionRestrictions Restrictions = EZoneShapeLaneConnectionRestrictions::None;
+	float DistanceFromProfileEdge = 0.0f;	// Distance from lane profile edge
+	float DistanceFromFarProfileEdge = 0.0f; // Distance to other lane profile edge
+	float InnerTurningRadius = 0.0f; // Inner/minimum turning radius when using Arc routing.
+};
+
 namespace UE { namespace ZoneShape { namespace Utilities
 {
 
@@ -33,7 +51,8 @@
 										 FZoneGraphStorage& OutZoneStorage, TArray<FZoneShapeLaneInternalLink>& OutInternalLinks);
 
 // Converts polygon shape to a zone data.
-ZONEGRAPH_API void TessellatePolygonShape(TConstArrayView<FZoneShapePoint> Points, const EZoneShapePolygonRoutingType RoutingType, TConstArrayView<FZoneLaneProfile> LaneProfiles, const FZoneGraphTagMask ZoneTags, const FMatrix& LocalToWorld,
+ZONEGRAPH_API void TessellatePolygonShape(const UZoneShapeComponent& SourceShapeComp, const FZoneGraphBuilder& ZoneGraphBuilder,
+										  TConstArrayView<FZoneShapePoint> Points, TConstArrayView<FZoneLaneProfile> LaneProfiles, const FMatrix& LocalToWorld,
 										  FZoneGraphStorage& OutZoneStorage, TArray<FZoneShapeLaneInternalLink>& OutInternalLinks);
 
 // Returns cubic bezier points for give shape segment. Adjusts end points based on shape point types. 
diff --color -urN Source/ZoneGraph/ZoneGraph.Build.cs /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/ZoneGraph.Build.cs
--- Source/ZoneGraph/ZoneGraph.Build.cs	2024-09-26 22:04:46
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/ZoneGraph.Build.cs	2024-09-17 17:52:05
@@ -20,7 +20,6 @@
 					"DeveloperSettings",
 				}
 			);
-
 			if (Target.bBuildEditor == true)
 			{
 				PrivateDependencyModuleNames.Add("EditorFramework");
diff --color -urN Source/ZoneGraphTestSuite/ZoneGraphTestSuite.Build.cs /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraphTestSuite/ZoneGraphTestSuite.Build.cs
--- Source/ZoneGraphTestSuite/ZoneGraphTestSuite.Build.cs	2024-09-26 22:04:46
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraphTestSuite/ZoneGraphTestSuite.Build.cs	2024-09-17 17:52:05
@@ -39,4 +39,4 @@
 			}
 		}
 	}
-}
\ No newline at end of file
+}

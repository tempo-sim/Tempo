diff --git Source/ZoneGraph/Private/ZoneGraphBuilder.cpp Source/ZoneGraph/Private/ZoneGraphBuilder.cpp
index 2b85d58..826f7f4 100644
--- Source/ZoneGraph/Private/ZoneGraphBuilder.cpp
+++ Source/ZoneGraph/Private/ZoneGraphBuilder.cpp
@@ -287,7 +287,7 @@ void FZoneGraphBuilder::FindShapeConnections(const UZoneShapeComponent& SourceSh
 					&& FVector::DotProduct(SourceWorldNormal, -DestWorldNormal) > ConnectionSnapAngleCos)
 				{
 					// Check that the profile orientation matches before connecting.
-					if (const FZoneLaneProfile* LaneProfile = ZoneGraphSettings->GetLaneProfileByRef(SourceConnector.LaneProfile))
+					if (const FZoneLaneProfile* LaneProfile = ZoneGraphSettings->GetLaneProfileByRef(SourceConnector.LaneProfile, &SourceShapeComp))
 					{
 						if (LaneProfile->IsSymmetrical() || SourceConnector.bReverseLaneProfile != DestConnector.bReverseLaneProfile)
 						{
diff --git Source/ZoneGraph/Private/ZoneGraphRenderingUtilities.cpp Source/ZoneGraph/Private/ZoneGraphRenderingUtilities.cpp
index 73edba6..066f94f 100644
--- Source/ZoneGraph/Private/ZoneGraphRenderingUtilities.cpp
+++ Source/ZoneGraph/Private/ZoneGraphRenderingUtilities.cpp
@@ -421,7 +421,7 @@ void DrawZoneShapeConnector(const FZoneShapeConnector& Connector, const FZoneSha
     PDI->DrawLine(WorldPosition - WorldNormal * ChevronSize, WorldPosition + WorldSide * ChevronSize, Color, SDPG_World, LineThickness, DepthBias, true);
 
     // Draw small chevrons indicating the lane locations and directions. This is useful when debugging non-connect lanes.
-    if (const FZoneLaneProfile* LaneProfile = ZoneGraphSettings->GetLaneProfileByRef(Connector.LaneProfile))
+    if (const FZoneLaneProfile* LaneProfile = ZoneGraphSettings->GetLaneProfileByRef(Connector.LaneProfile, nullptr))
     {
         const float TotalWidth = LaneProfile->GetLanesTotalWidth();
         const float HalfWidth = TotalWidth * 0.5f;
diff --git Source/ZoneGraph/Private/ZoneGraphSettings.cpp Source/ZoneGraph/Private/ZoneGraphSettings.cpp
index e780038..c9c1dfe 100644
--- Source/ZoneGraph/Private/ZoneGraphSettings.cpp
+++ Source/ZoneGraph/Private/ZoneGraphSettings.cpp
@@ -3,6 +3,9 @@
 #include "ZoneGraphSettings.h"
 #include "ZoneGraphDelegates.h"
 #include "ZoneGraphObjectCRC32.h"
+#include "ZoneGraphSubsystem.h"
+
+#include "Engine/World.h"
 
 namespace UE::ZoneGraph
 {
@@ -108,14 +111,50 @@ UZoneGraphSettings::UZoneGraphSettings(const FObjectInitializer& ObjectInitializ
 //----------------------------------------------------------------------//
 // UZoneGraphSettings
 //----------------------------------------------------------------------//
-const FZoneLaneProfile* UZoneGraphSettings::GetLaneProfileByRef(const FZoneLaneProfileRef& LaneProfileRef) const
+const FZoneLaneProfile* UZoneGraphSettings::GetLaneProfileByRef(const FZoneLaneProfileRef& LaneProfileRef, const UObject* WorldContextObject) const
 {
-	return LaneProfiles.FindByPredicate([&LaneProfileRef](const FZoneLaneProfile& LaneProfile) -> bool { return LaneProfile.ID == LaneProfileRef.ID; });
+	// First check if the lane profile is in our configured profiles.
+	if (const FZoneLaneProfile* ZoneLaneProfile = LaneProfiles.FindByPredicate([&LaneProfileRef](const FZoneLaneProfile& LaneProfile) -> bool { return LaneProfile.ID == LaneProfileRef.ID; }))
+	{
+		return ZoneLaneProfile;
+	}
+
+	// Then fall back on checking the world's zone graph storage, if a world context object was provided.
+	if (WorldContextObject)
+	{
+		if (const UWorld* World = WorldContextObject->GetWorld())
+		{
+			if (const UZoneGraphSubsystem* ZoneGraphSubsystem = World->GetSubsystem<UZoneGraphSubsystem>())
+			{
+				return ZoneGraphSubsystem->GetLaneProfileByRef(LaneProfileRef);
+			}
+		}
+	}
+
+	return nullptr;
 }
 
-const FZoneLaneProfile* UZoneGraphSettings::GetLaneProfileByID(const FGuid& ID) const
+const FZoneLaneProfile* UZoneGraphSettings::GetLaneProfileByID(const FGuid& ID, const UObject* WorldContextObject) const
 {
-	return LaneProfiles.FindByPredicate([&ID](const FZoneLaneProfile& LaneProfile) -> bool { return LaneProfile.ID == ID; });
+	// First check if the lane profile is in our configured profiles.
+	if (const FZoneLaneProfile* ZoneLaneProfile = LaneProfiles.FindByPredicate([&ID](const FZoneLaneProfile& LaneProfile) -> bool { return LaneProfile.ID == ID; }))
+	{
+		return ZoneLaneProfile;
+	}
+
+	// Then fall back on checking the world's zone graph storage, if a world context object was provided.
+	if (WorldContextObject)
+	{
+		if (const UWorld* World = WorldContextObject->GetWorld())
+		{
+			if (const UZoneGraphSubsystem* ZoneGraphSubsystem = World->GetSubsystem<UZoneGraphSubsystem>())
+			{
+				return ZoneGraphSubsystem->GetLaneProfileByID(ID);
+			}
+		}
+	}
+
+	return nullptr;
 }
 
 #if WITH_EDITOR
diff --git Source/ZoneGraph/Private/ZoneGraphSubsystem.cpp Source/ZoneGraph/Private/ZoneGraphSubsystem.cpp
index 7281448..5f671ec 100644
--- Source/ZoneGraph/Private/ZoneGraphSubsystem.cpp
+++ Source/ZoneGraph/Private/ZoneGraphSubsystem.cpp
@@ -11,6 +11,7 @@
 #include "Engine/LevelBounds.h"
 #include "Engine/Level.h"
 #include "EngineUtils.h"
+#include "Kismet/GameplayStatics.h"
 #if WITH_EDITOR
 #include "LevelEditorViewport.h"
 #endif
@@ -461,6 +462,81 @@ FBox UZoneGraphSubsystem::GetCombinedBounds() const
 	return CombinedBounds;
 }
 
+const FZoneLaneProfile* UZoneGraphSubsystem::GetLaneProfileByRef(const FZoneLaneProfileRef& LaneProfileRef) const
+{
+	for (const FRegisteredZoneGraphData& RegisteredData : RegisteredZoneGraphData)
+	{
+		if (RegisteredData.ZoneGraphData)
+		{
+			const FZoneGraphStorage& Storage = RegisteredData.ZoneGraphData->GetStorage();
+			if (const FZoneLaneProfile* ZoneLaneProfile = Storage.LaneProfiles.FindByPredicate([&LaneProfileRef](const FZoneLaneProfile& LaneProfile) -> bool { return LaneProfile.ID == LaneProfileRef.ID; }))
+			{
+				return ZoneLaneProfile;
+			}
+		}
+	}
+
+	return nullptr;
+}
+
+const FZoneLaneProfile* UZoneGraphSubsystem::GetLaneProfileByID(const FGuid& ID) const
+{
+	for (const FRegisteredZoneGraphData& RegisteredData : RegisteredZoneGraphData)
+	{
+		if (RegisteredData.ZoneGraphData)
+		{
+			const FZoneGraphStorage& Storage = RegisteredData.ZoneGraphData->GetStorage();
+			if (const FZoneLaneProfile* ZoneLaneProfile = Storage.LaneProfiles.FindByPredicate([&ID](const FZoneLaneProfile& LaneProfile) -> bool { return LaneProfile.ID == ID; }))
+			{
+				return ZoneLaneProfile;
+			}
+		}
+	}
+
+	return nullptr;
+}
+
+const FZoneLaneProfile* UZoneGraphSubsystem::FindOrAddLaneProfile(const FZoneLaneProfile& LaneProfile)
+{
+	// Ensure there is at least one ZoneGraphData Actor in the world.
+	UWorld* World = GetWorld();
+	if (World && !UGameplayStatics::GetActorOfClass(World, AZoneGraphData::StaticClass()))
+	{
+		World->SpawnActor<AZoneGraphData>(AZoneGraphData::StaticClass());
+	}
+
+	const FZoneLaneProfile* ToReturn = nullptr;
+
+	// Add this lane profile to all registered zone graph data Actors.
+	for (const FRegisteredZoneGraphData& RegisteredData : RegisteredZoneGraphData)
+	{
+		if (RegisteredData.ZoneGraphData)
+		{
+			FZoneGraphStorage& Storage = RegisteredData.ZoneGraphData->GetStorageMutable();
+			if (const FZoneLaneProfile* ZoneLaneProfile = Storage.LaneProfiles.FindByPredicate([&LaneProfile](const FZoneLaneProfile& OtherLaneProfile) -> bool { return OtherLaneProfile.Lanes == LaneProfile.Lanes; }))
+			{
+				ToReturn = ZoneLaneProfile;
+				continue;
+			}
+			ToReturn = &Storage.LaneProfiles.Add_GetRef(LaneProfile);
+		}
+	}
+
+	return ToReturn;
+}
+
+void UZoneGraphSubsystem::ClearLaneProfiles() const
+{
+	for (const FRegisteredZoneGraphData& RegisteredData : RegisteredZoneGraphData)
+	{
+		if (RegisteredData.ZoneGraphData)
+		{
+			FZoneGraphStorage& Storage = RegisteredData.ZoneGraphData->GetStorageMutable();
+			Storage.LaneProfiles.Empty();
+		}
+	}
+}
+
 FName UZoneGraphSubsystem::GetTagName(FZoneGraphTag Tag) const
 {
 	if (const UZoneGraphSettings* ZoneGraphSettings = GetDefault<UZoneGraphSettings>())
diff --git Source/ZoneGraph/Private/ZoneShapeComponent.cpp Source/ZoneGraph/Private/ZoneShapeComponent.cpp
index 77447ef..3bd05d5 100644
--- Source/ZoneGraph/Private/ZoneShapeComponent.cpp
+++ Source/ZoneGraph/Private/ZoneShapeComponent.cpp
@@ -601,7 +601,7 @@ void UZoneShapeComponent::GetSplineLaneProfile(FZoneLaneProfile& OutLaneProfile)
 	{
 		if (const UZoneGraphSettings* ZoneGraphSettings = GetDefault<UZoneGraphSettings>())
 		{
-			if (const FZoneLaneProfile* CurrentLaneProfile = ZoneGraphSettings->GetLaneProfileByRef(LaneProfile))
+			if (const FZoneLaneProfile* CurrentLaneProfile = ZoneGraphSettings->GetLaneProfileByRef(LaneProfile, this))
 			{
 				OutLaneProfile = *CurrentLaneProfile;
 				return;
@@ -641,7 +641,7 @@ void UZoneShapeComponent::GetPolygonLaneProfiles(TArray<FZoneLaneProfile>& OutLa
 					TemplateRef = LaneProfile;
 				}
 
-				if (const FZoneLaneProfile* CurrentLaneProfile = ZoneGraphSettings->GetLaneProfileByRef(TemplateRef))
+				if (const FZoneLaneProfile* CurrentLaneProfile = ZoneGraphSettings->GetLaneProfileByRef(TemplateRef, this))
 				{
 					OutLaneProfiles.Add(*CurrentLaneProfile);
 				}
@@ -878,4 +878,3 @@ FPrimitiveSceneProxy* UZoneShapeComponent::CreateSceneProxy()
 }
 
 #endif // !UE_BUILD_SHIPPING
-
diff --git Source/ZoneGraph/Public/ZoneGraphSettings.h Source/ZoneGraph/Public/ZoneGraphSettings.h
index 3f69fb8..a8141ff 100644
--- Source/ZoneGraph/Public/ZoneGraphSettings.h
+++ Source/ZoneGraph/Public/ZoneGraphSettings.h
@@ -22,8 +22,8 @@ public:
 
 	const TArray<FZoneLaneProfile>& GetLaneProfiles() const { return LaneProfiles; }
 
-	const FZoneLaneProfile* GetLaneProfileByRef(const FZoneLaneProfileRef& LaneProfileRef) const;
-	const FZoneLaneProfile* GetLaneProfileByID(const FGuid& ID) const;
+	const FZoneLaneProfile* GetLaneProfileByRef(const FZoneLaneProfileRef& LaneProfileRef, const UObject* WorldContextObject) const;
+	const FZoneLaneProfile* GetLaneProfileByID(const FGuid& ID, const UObject* WorldContextObject) const;
 
 #if WITH_EDITOR
 	virtual void PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent) override;
@@ -70,4 +70,4 @@ protected:
 	/** When set to true ZoneGraph will build as it is being edited. */
 	UPROPERTY(EditAnywhere, config, Category = ZoneGraph)
 	bool bBuildZoneGraphWhileEditing = false;
-};
\ No newline at end of file
+};
diff --git Source/ZoneGraph/Public/ZoneGraphSubsystem.h Source/ZoneGraph/Public/ZoneGraphSubsystem.h
index 627d10a..2ca0caa 100644
--- Source/ZoneGraph/Public/ZoneGraphSubsystem.h
+++ Source/ZoneGraph/Public/ZoneGraphSubsystem.h
@@ -111,7 +111,19 @@ public:
 
 	// Returns bounds of all ZoneGraph data.
 	FBox GetCombinedBounds() const;
-	
+
+	// Returns the ZoneLaneProfile indicated by the lane profile ref.
+	const FZoneLaneProfile* GetLaneProfileByRef(const FZoneLaneProfileRef& LaneProfileRef) const;
+
+	// Returns the ZoneLaneProfile indicated by the lane profile ID.
+	const FZoneLaneProfile* GetLaneProfileByID(const FGuid& ID) const;
+
+	// Find the lane profile ref for the indicated lane profile, adding it to the known profiles if necessary.
+	const FZoneLaneProfile* FindOrAddLaneProfile(const FZoneLaneProfile& LaneProfile);
+
+	// Find the lane profile ref for the indicated lane profile, adding it to the known profiles if necessary.
+	void ClearLaneProfiles() const;
+
 	// Tags
 	
 	// Returns tag based on name.
diff --git Source/ZoneGraph/Public/ZoneGraphTypes.h Source/ZoneGraph/Public/ZoneGraphTypes.h
index f82c10c..0a7e0b3 100644
--- Source/ZoneGraph/Public/ZoneGraphTypes.h
+++ Source/ZoneGraph/Public/ZoneGraphTypes.h
@@ -735,6 +735,10 @@ struct ZONEGRAPH_API FZoneGraphStorage
 	UPROPERTY()
 	TArray<FZoneLaneLinkData> LaneLinks;
 
+	// Storage for lane profiles created dynamically, other than those stored in settings.
+	UPROPERTY();
+	TArray<FZoneLaneProfile> LaneProfiles;
+
 	// Bounding box of all zones.
 	UPROPERTY()
 	FBox Bounds = FBox(ForceInit);
diff --git Source/ZoneGraphEditor/Private/ZoneLaneProfileRefDetails.cpp Source/ZoneGraphEditor/Private/ZoneLaneProfileRefDetails.cpp
index 34dde8e..e2e82a7 100644
--- Source/ZoneGraphEditor/Private/ZoneLaneProfileRefDetails.cpp
+++ Source/ZoneGraphEditor/Private/ZoneLaneProfileRefDetails.cpp
@@ -118,7 +118,7 @@ FText FZoneLaneProfileRefDetails::GetCurrentProfileDesc() const
 		if (ProfileID.IsValid())
 		{
 			const UZoneGraphSettings* ZoneGraphSettings = GetDefault<UZoneGraphSettings>();
-			const FZoneLaneProfile* LaneProfile = ZoneGraphSettings->GetLaneProfileByID(ProfileID);
+			const FZoneLaneProfile* LaneProfile = ZoneGraphSettings->GetLaneProfileByID(ProfileID, nullptr);
 			if (LaneProfile)
 			{
 				return FText::FromName(LaneProfile->Name);
@@ -143,4 +143,4 @@ FText FZoneLaneProfileRefDetails::GetCurrentProfileDesc() const
 	return FText();
 }
 
-#undef LOCTEXT_NAMESPACE
\ No newline at end of file
+#undef LOCTEXT_NAMESPACE
diff --git Source/ZoneGraphEditor/Private/ZoneShapeComponentDetails.cpp Source/ZoneGraphEditor/Private/ZoneShapeComponentDetails.cpp
index 11356ae..b07dcda 100644
--- Source/ZoneGraphEditor/Private/ZoneShapeComponentDetails.cpp
+++ Source/ZoneGraphEditor/Private/ZoneShapeComponentDetails.cpp
@@ -846,7 +846,7 @@ FText FZoneShapePointDetails::GetLaneProfile() const
 			}
 
 			const UZoneGraphSettings* ZoneGraphSettings = GetDefault<UZoneGraphSettings>();
-			if (const FZoneLaneProfile* Profile = ZoneGraphSettings->GetLaneProfileByRef(ProfileRef))
+			if (const FZoneLaneProfile* Profile = ZoneGraphSettings->GetLaneProfileByRef(ProfileRef, ShapeComp))
 			{
 				return FText::FromName(Profile->Name);
 			}
diff --git Source/ZoneGraphEditor/Private/ZoneShapeComponentVisualizer.cpp Source/ZoneGraphEditor/Private/ZoneShapeComponentVisualizer.cpp
index d3e8004..3b9f838 100644
--- Source/ZoneGraphEditor/Private/ZoneShapeComponentVisualizer.cpp
+++ Source/ZoneGraphEditor/Private/ZoneShapeComponentVisualizer.cpp
@@ -896,7 +896,7 @@ bool FZoneShapeComponentVisualizer::HandleInputDelta(FEditorViewportClient* View
 								}
 
 								// Check that the profile orientation matches before connecting.
-								if (const FZoneLaneProfile* LaneProfile = ZoneGraphSettings->GetLaneProfileByRef(SourceConnector->LaneProfile))
+								if (const FZoneLaneProfile* LaneProfile = ZoneGraphSettings->GetLaneProfileByRef(SourceConnector->LaneProfile, ShapeComp))
 								{
 									if (LaneProfile->IsSymmetrical() || SourceConnector->bReverseLaneProfile != DestConnector.bReverseLaneProfile)
 									{
@@ -1112,7 +1112,7 @@ bool FZoneShapeComponentVisualizer::HandleInputKey(FEditorViewportClient* Viewpo
 			const UZoneGraphSettings* ZoneGraphSettings = GetDefault<UZoneGraphSettings>();
 			check(ZoneGraphSettings);
 
-			const FZoneLaneProfile* LaneProfile = ZoneGraphSettings->GetLaneProfileByRef(ShapeComp->GetCommonLaneProfile());
+			const FZoneLaneProfile* LaneProfile = ZoneGraphSettings->GetLaneProfileByRef(ShapeComp->GetCommonLaneProfile(), ShapeComp);
 			check(LaneProfile);
 			float HalfLanesTotalWidth = LaneProfile->GetLanesTotalWidth() * 0.5;
 

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoMapQuery/MapQueries.proto

#include "TempoMapQuery/MapQueries.pb.h"
#include "TempoMapQuery/MapQueries.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace TempoMapQuery {

static const char* MapQueryService_method_names[] = {
  "/TempoMapQuery.MapQueryService/GetLanes",
  "/TempoMapQuery.MapQueryService/GetLaneAccessibility",
  "/TempoMapQuery.MapQueryService/StreamLaneAccessibility",
  "/TempoMapQuery.MapQueryService/GetZones",
};

std::unique_ptr< MapQueryService::Stub> MapQueryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MapQueryService::Stub> stub(new MapQueryService::Stub(channel, options));
  return stub;
}

MapQueryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetLanes_(MapQueryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLaneAccessibility_(MapQueryService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamLaneAccessibility_(MapQueryService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetZones_(MapQueryService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MapQueryService::Stub::GetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::TempoMapQuery::LaneDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoMapQuery::LaneDataRequest, ::TempoMapQuery::LaneDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLanes_, context, request, response);
}

void MapQueryService::Stub::async::GetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest* request, ::TempoMapQuery::LaneDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoMapQuery::LaneDataRequest, ::TempoMapQuery::LaneDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLanes_, context, request, response, std::move(f));
}

void MapQueryService::Stub::async::GetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest* request, ::TempoMapQuery::LaneDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLanes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneDataResponse>* MapQueryService::Stub::PrepareAsyncGetLanesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoMapQuery::LaneDataResponse, ::TempoMapQuery::LaneDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLanes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneDataResponse>* MapQueryService::Stub::AsyncGetLanesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLanesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapQueryService::Stub::GetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::TempoMapQuery::LaneAccessibilityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLaneAccessibility_, context, request, response);
}

void MapQueryService::Stub::async::GetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::TempoMapQuery::LaneAccessibilityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLaneAccessibility_, context, request, response, std::move(f));
}

void MapQueryService::Stub::async::GetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::TempoMapQuery::LaneAccessibilityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLaneAccessibility_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneAccessibilityResponse>* MapQueryService::Stub::PrepareAsyncGetLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoMapQuery::LaneAccessibilityResponse, ::TempoMapQuery::LaneAccessibilityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLaneAccessibility_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneAccessibilityResponse>* MapQueryService::Stub::AsyncGetLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLaneAccessibilityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::TempoMapQuery::LaneAccessibilityResponse>* MapQueryService::Stub::StreamLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::TempoMapQuery::LaneAccessibilityResponse>::Create(channel_.get(), rpcmethod_StreamLaneAccessibility_, context, request);
}

void MapQueryService::Stub::async::StreamLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::grpc::ClientReadReactor< ::TempoMapQuery::LaneAccessibilityResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::TempoMapQuery::LaneAccessibilityResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamLaneAccessibility_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TempoMapQuery::LaneAccessibilityResponse>* MapQueryService::Stub::AsyncStreamLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoMapQuery::LaneAccessibilityResponse>::Create(channel_.get(), cq, rpcmethod_StreamLaneAccessibility_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TempoMapQuery::LaneAccessibilityResponse>* MapQueryService::Stub::PrepareAsyncStreamLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoMapQuery::LaneAccessibilityResponse>::Create(channel_.get(), cq, rpcmethod_StreamLaneAccessibility_, context, request, false, nullptr);
}

::grpc::Status MapQueryService::Stub::GetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::TempoMapQuery::ZoneDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoMapQuery::ZoneDataRequest, ::TempoMapQuery::ZoneDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetZones_, context, request, response);
}

void MapQueryService::Stub::async::GetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest* request, ::TempoMapQuery::ZoneDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoMapQuery::ZoneDataRequest, ::TempoMapQuery::ZoneDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetZones_, context, request, response, std::move(f));
}

void MapQueryService::Stub::async::GetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest* request, ::TempoMapQuery::ZoneDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetZones_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoMapQuery::ZoneDataResponse>* MapQueryService::Stub::PrepareAsyncGetZonesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoMapQuery::ZoneDataResponse, ::TempoMapQuery::ZoneDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetZones_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoMapQuery::ZoneDataResponse>* MapQueryService::Stub::AsyncGetZonesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetZonesRaw(context, request, cq);
  result->StartCall();
  return result;
}

MapQueryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapQueryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapQueryService::Service, ::TempoMapQuery::LaneDataRequest, ::TempoMapQuery::LaneDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapQueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoMapQuery::LaneDataRequest* req,
             ::TempoMapQuery::LaneDataResponse* resp) {
               return service->GetLanes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapQueryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapQueryService::Service, ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapQueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoMapQuery::LaneAccessibilityRequest* req,
             ::TempoMapQuery::LaneAccessibilityResponse* resp) {
               return service->GetLaneAccessibility(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapQueryService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MapQueryService::Service, ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse>(
          [](MapQueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoMapQuery::LaneAccessibilityRequest* req,
             ::grpc::ServerWriter<::TempoMapQuery::LaneAccessibilityResponse>* writer) {
               return service->StreamLaneAccessibility(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapQueryService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapQueryService::Service, ::TempoMapQuery::ZoneDataRequest, ::TempoMapQuery::ZoneDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapQueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoMapQuery::ZoneDataRequest* req,
             ::TempoMapQuery::ZoneDataResponse* resp) {
               return service->GetZones(ctx, req, resp);
             }, this)));
}

MapQueryService::Service::~Service() {
}

::grpc::Status MapQueryService::Service::GetLanes(::grpc::ServerContext* context, const ::TempoMapQuery::LaneDataRequest* request, ::TempoMapQuery::LaneDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapQueryService::Service::GetLaneAccessibility(::grpc::ServerContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::TempoMapQuery::LaneAccessibilityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapQueryService::Service::StreamLaneAccessibility(::grpc::ServerContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::grpc::ServerWriter< ::TempoMapQuery::LaneAccessibilityResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapQueryService::Service::GetZones(::grpc::ServerContext* context, const ::TempoMapQuery::ZoneDataRequest* request, ::TempoMapQuery::ZoneDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TempoMapQuery


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoMapQuery/MapQueries.proto
// Original file comments:
// Copyright Tempo Simulation, LLC. All Rights Reserved
//
#ifndef GRPC_TempoMapQuery_2fMapQueries_2eproto__INCLUDED
#define GRPC_TempoMapQuery_2fMapQueries_2eproto__INCLUDED

#include "TempoMapQuery/MapQueries.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace TempoMapQuery {

class MapQueryService final {
 public:
  static constexpr char const* service_full_name() {
    return "TempoMapQuery.MapQueryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::TempoMapQuery::LaneDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneDataResponse>> AsyncGetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneDataResponse>>(AsyncGetLanesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneDataResponse>> PrepareAsyncGetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneDataResponse>>(PrepareAsyncGetLanesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::TempoMapQuery::LaneAccessibilityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>> AsyncGetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>>(AsyncGetLaneAccessibilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>> PrepareAsyncGetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>>(PrepareAsyncGetLaneAccessibilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>> StreamLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>>(StreamLaneAccessibilityRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>> AsyncStreamLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>>(AsyncStreamLaneAccessibilityRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>> PrepareAsyncStreamLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>>(PrepareAsyncStreamLaneAccessibilityRaw(context, request, cq));
    }
    virtual ::grpc::Status GetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::TempoMapQuery::ZoneDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::ZoneDataResponse>> AsyncGetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::ZoneDataResponse>>(AsyncGetZonesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::ZoneDataResponse>> PrepareAsyncGetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::ZoneDataResponse>>(PrepareAsyncGetZonesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest* request, ::TempoMapQuery::LaneDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest* request, ::TempoMapQuery::LaneDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::TempoMapQuery::LaneAccessibilityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::TempoMapQuery::LaneAccessibilityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::grpc::ClientReadReactor< ::TempoMapQuery::LaneAccessibilityResponse>* reactor) = 0;
      virtual void GetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest* request, ::TempoMapQuery::ZoneDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest* request, ::TempoMapQuery::ZoneDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneDataResponse>* AsyncGetLanesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneDataResponse>* PrepareAsyncGetLanesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>* AsyncGetLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>* PrepareAsyncGetLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>* StreamLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>* AsyncStreamLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoMapQuery::LaneAccessibilityResponse>* PrepareAsyncStreamLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::ZoneDataResponse>* AsyncGetZonesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMapQuery::ZoneDataResponse>* PrepareAsyncGetZonesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::TempoMapQuery::LaneDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneDataResponse>> AsyncGetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneDataResponse>>(AsyncGetLanesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneDataResponse>> PrepareAsyncGetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneDataResponse>>(PrepareAsyncGetLanesRaw(context, request, cq));
    }
    ::grpc::Status GetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::TempoMapQuery::LaneAccessibilityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneAccessibilityResponse>> AsyncGetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneAccessibilityResponse>>(AsyncGetLaneAccessibilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneAccessibilityResponse>> PrepareAsyncGetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneAccessibilityResponse>>(PrepareAsyncGetLaneAccessibilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TempoMapQuery::LaneAccessibilityResponse>> StreamLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TempoMapQuery::LaneAccessibilityResponse>>(StreamLaneAccessibilityRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoMapQuery::LaneAccessibilityResponse>> AsyncStreamLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoMapQuery::LaneAccessibilityResponse>>(AsyncStreamLaneAccessibilityRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoMapQuery::LaneAccessibilityResponse>> PrepareAsyncStreamLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoMapQuery::LaneAccessibilityResponse>>(PrepareAsyncStreamLaneAccessibilityRaw(context, request, cq));
    }
    ::grpc::Status GetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::TempoMapQuery::ZoneDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::ZoneDataResponse>> AsyncGetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::ZoneDataResponse>>(AsyncGetZonesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::ZoneDataResponse>> PrepareAsyncGetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::ZoneDataResponse>>(PrepareAsyncGetZonesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest* request, ::TempoMapQuery::LaneDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLanes(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest* request, ::TempoMapQuery::LaneDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::TempoMapQuery::LaneAccessibilityResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::TempoMapQuery::LaneAccessibilityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamLaneAccessibility(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::grpc::ClientReadReactor< ::TempoMapQuery::LaneAccessibilityResponse>* reactor) override;
      void GetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest* request, ::TempoMapQuery::ZoneDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetZones(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest* request, ::TempoMapQuery::ZoneDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneDataResponse>* AsyncGetLanesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneDataResponse>* PrepareAsyncGetLanesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneAccessibilityResponse>* AsyncGetLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::LaneAccessibilityResponse>* PrepareAsyncGetLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TempoMapQuery::LaneAccessibilityResponse>* StreamLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request) override;
    ::grpc::ClientAsyncReader< ::TempoMapQuery::LaneAccessibilityResponse>* AsyncStreamLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TempoMapQuery::LaneAccessibilityResponse>* PrepareAsyncStreamLaneAccessibilityRaw(::grpc::ClientContext* context, const ::TempoMapQuery::LaneAccessibilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::ZoneDataResponse>* AsyncGetZonesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoMapQuery::ZoneDataResponse>* PrepareAsyncGetZonesRaw(::grpc::ClientContext* context, const ::TempoMapQuery::ZoneDataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetLanes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLaneAccessibility_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamLaneAccessibility_;
    const ::grpc::internal::RpcMethod rpcmethod_GetZones_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetLanes(::grpc::ServerContext* context, const ::TempoMapQuery::LaneDataRequest* request, ::TempoMapQuery::LaneDataResponse* response);
    virtual ::grpc::Status GetLaneAccessibility(::grpc::ServerContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::TempoMapQuery::LaneAccessibilityResponse* response);
    virtual ::grpc::Status StreamLaneAccessibility(::grpc::ServerContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::grpc::ServerWriter< ::TempoMapQuery::LaneAccessibilityResponse>* writer);
    virtual ::grpc::Status GetZones(::grpc::ServerContext* context, const ::TempoMapQuery::ZoneDataRequest* request, ::TempoMapQuery::ZoneDataResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLanes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLanes() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetLanes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLanes(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneDataRequest* /*request*/, ::TempoMapQuery::LaneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLanes(::grpc::ServerContext* context, ::TempoMapQuery::LaneDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoMapQuery::LaneDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLaneAccessibility() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::TempoMapQuery::LaneAccessibilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLaneAccessibility(::grpc::ServerContext* context, ::TempoMapQuery::LaneAccessibilityRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoMapQuery::LaneAccessibilityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamLaneAccessibility() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StreamLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::grpc::ServerWriter< ::TempoMapQuery::LaneAccessibilityResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLaneAccessibility(::grpc::ServerContext* context, ::TempoMapQuery::LaneAccessibilityRequest* request, ::grpc::ServerAsyncWriter< ::TempoMapQuery::LaneAccessibilityResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetZones() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetZones(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::ZoneDataRequest* /*request*/, ::TempoMapQuery::ZoneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetZones(::grpc::ServerContext* context, ::TempoMapQuery::ZoneDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoMapQuery::ZoneDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetLanes<WithAsyncMethod_GetLaneAccessibility<WithAsyncMethod_StreamLaneAccessibility<WithAsyncMethod_GetZones<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetLanes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLanes() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoMapQuery::LaneDataRequest, ::TempoMapQuery::LaneDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoMapQuery::LaneDataRequest* request, ::TempoMapQuery::LaneDataResponse* response) { return this->GetLanes(context, request, response); }));}
    void SetMessageAllocatorFor_GetLanes(
        ::grpc::MessageAllocator< ::TempoMapQuery::LaneDataRequest, ::TempoMapQuery::LaneDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoMapQuery::LaneDataRequest, ::TempoMapQuery::LaneDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLanes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLanes(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneDataRequest* /*request*/, ::TempoMapQuery::LaneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLanes(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoMapQuery::LaneDataRequest* /*request*/, ::TempoMapQuery::LaneDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLaneAccessibility() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request, ::TempoMapQuery::LaneAccessibilityResponse* response) { return this->GetLaneAccessibility(context, request, response); }));}
    void SetMessageAllocatorFor_GetLaneAccessibility(
        ::grpc::MessageAllocator< ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::TempoMapQuery::LaneAccessibilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLaneAccessibility(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::TempoMapQuery::LaneAccessibilityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamLaneAccessibility() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoMapQuery::LaneAccessibilityRequest* request) { return this->StreamLaneAccessibility(context, request); }));
    }
    ~WithCallbackMethod_StreamLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::grpc::ServerWriter< ::TempoMapQuery::LaneAccessibilityResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::TempoMapQuery::LaneAccessibilityResponse>* StreamLaneAccessibility(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetZones() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoMapQuery::ZoneDataRequest, ::TempoMapQuery::ZoneDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoMapQuery::ZoneDataRequest* request, ::TempoMapQuery::ZoneDataResponse* response) { return this->GetZones(context, request, response); }));}
    void SetMessageAllocatorFor_GetZones(
        ::grpc::MessageAllocator< ::TempoMapQuery::ZoneDataRequest, ::TempoMapQuery::ZoneDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoMapQuery::ZoneDataRequest, ::TempoMapQuery::ZoneDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetZones(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::ZoneDataRequest* /*request*/, ::TempoMapQuery::ZoneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetZones(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoMapQuery::ZoneDataRequest* /*request*/, ::TempoMapQuery::ZoneDataResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetLanes<WithCallbackMethod_GetLaneAccessibility<WithCallbackMethod_StreamLaneAccessibility<WithCallbackMethod_GetZones<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetLanes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLanes() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetLanes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLanes(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneDataRequest* /*request*/, ::TempoMapQuery::LaneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLaneAccessibility() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::TempoMapQuery::LaneAccessibilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamLaneAccessibility() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StreamLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::grpc::ServerWriter< ::TempoMapQuery::LaneAccessibilityResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetZones() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetZones(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::ZoneDataRequest* /*request*/, ::TempoMapQuery::ZoneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLanes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLanes() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetLanes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLanes(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneDataRequest* /*request*/, ::TempoMapQuery::LaneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLanes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLaneAccessibility() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::TempoMapQuery::LaneAccessibilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLaneAccessibility(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamLaneAccessibility() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StreamLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::grpc::ServerWriter< ::TempoMapQuery::LaneAccessibilityResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLaneAccessibility(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetZones() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetZones(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::ZoneDataRequest* /*request*/, ::TempoMapQuery::ZoneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetZones(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLanes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLanes() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLanes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLanes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLanes(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneDataRequest* /*request*/, ::TempoMapQuery::LaneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLanes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLaneAccessibility() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLaneAccessibility(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::TempoMapQuery::LaneAccessibilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLaneAccessibility(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamLaneAccessibility() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamLaneAccessibility(context, request); }));
    }
    ~WithRawCallbackMethod_StreamLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::grpc::ServerWriter< ::TempoMapQuery::LaneAccessibilityResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamLaneAccessibility(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetZones() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetZones(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetZones(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::ZoneDataRequest* /*request*/, ::TempoMapQuery::ZoneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetZones(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLanes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLanes() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoMapQuery::LaneDataRequest, ::TempoMapQuery::LaneDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoMapQuery::LaneDataRequest, ::TempoMapQuery::LaneDataResponse>* streamer) {
                       return this->StreamedGetLanes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLanes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLanes(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneDataRequest* /*request*/, ::TempoMapQuery::LaneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLanes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoMapQuery::LaneDataRequest,::TempoMapQuery::LaneDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLaneAccessibility() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse>* streamer) {
                       return this->StreamedGetLaneAccessibility(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::TempoMapQuery::LaneAccessibilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLaneAccessibility(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoMapQuery::LaneAccessibilityRequest,::TempoMapQuery::LaneAccessibilityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetZones() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoMapQuery::ZoneDataRequest, ::TempoMapQuery::ZoneDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoMapQuery::ZoneDataRequest, ::TempoMapQuery::ZoneDataResponse>* streamer) {
                       return this->StreamedGetZones(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetZones(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::ZoneDataRequest* /*request*/, ::TempoMapQuery::ZoneDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetZones(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoMapQuery::ZoneDataRequest,::TempoMapQuery::ZoneDataResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetLanes<WithStreamedUnaryMethod_GetLaneAccessibility<WithStreamedUnaryMethod_GetZones<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamLaneAccessibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamLaneAccessibility() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::TempoMapQuery::LaneAccessibilityRequest, ::TempoMapQuery::LaneAccessibilityResponse>* streamer) {
                       return this->StreamedStreamLaneAccessibility(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamLaneAccessibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamLaneAccessibility(::grpc::ServerContext* /*context*/, const ::TempoMapQuery::LaneAccessibilityRequest* /*request*/, ::grpc::ServerWriter< ::TempoMapQuery::LaneAccessibilityResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamLaneAccessibility(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TempoMapQuery::LaneAccessibilityRequest,::TempoMapQuery::LaneAccessibilityResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamLaneAccessibility<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetLanes<WithStreamedUnaryMethod_GetLaneAccessibility<WithSplitStreamingMethod_StreamLaneAccessibility<WithStreamedUnaryMethod_GetZones<Service > > > > StreamedService;
};

}  // namespace TempoMapQuery


#endif  // GRPC_TempoMapQuery_2fMapQueries_2eproto__INCLUDED

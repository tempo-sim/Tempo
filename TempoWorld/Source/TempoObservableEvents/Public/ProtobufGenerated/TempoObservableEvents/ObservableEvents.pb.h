// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoObservableEvents/ObservableEvents.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_TempoObservableEvents_2fObservableEvents_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TempoObservableEvents_2fObservableEvents_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TempoObservableEvents_2fObservableEvents_2eproto TEMPOOBSERVABLEEVENTS_API

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TEMPOOBSERVABLEEVENTS_API TableStruct_TempoObservableEvents_2fObservableEvents_2eproto {
  static const ::uint32_t offsets[];
};
TEMPOOBSERVABLEEVENTS_API extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto;
namespace TempoObservableEvents {
class OverlapEventRequest;
struct OverlapEventRequestDefaultTypeInternal;
TEMPOOBSERVABLEEVENTS_API extern OverlapEventRequestDefaultTypeInternal _OverlapEventRequest_default_instance_;
class OverlapEventResponse;
struct OverlapEventResponseDefaultTypeInternal;
TEMPOOBSERVABLEEVENTS_API extern OverlapEventResponseDefaultTypeInternal _OverlapEventResponse_default_instance_;
}  // namespace TempoObservableEvents
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace TempoObservableEvents {

// ===================================================================


// -------------------------------------------------------------------

class TEMPOOBSERVABLEEVENTS_API OverlapEventResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TempoObservableEvents.OverlapEventResponse) */ {
 public:
  inline OverlapEventResponse() : OverlapEventResponse(nullptr) {}
  ~OverlapEventResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OverlapEventResponse(::google::protobuf::internal::ConstantInitialized);

  inline OverlapEventResponse(const OverlapEventResponse& from)
      : OverlapEventResponse(nullptr, from) {}
  OverlapEventResponse(OverlapEventResponse&& from) noexcept
    : OverlapEventResponse() {
    *this = ::std::move(from);
  }

  inline OverlapEventResponse& operator=(const OverlapEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlapEventResponse& operator=(OverlapEventResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OverlapEventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OverlapEventResponse* internal_default_instance() {
    return reinterpret_cast<const OverlapEventResponse*>(
               &_OverlapEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OverlapEventResponse& a, OverlapEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlapEventResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverlapEventResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OverlapEventResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OverlapEventResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OverlapEventResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OverlapEventResponse& from) {
    OverlapEventResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OverlapEventResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TempoObservableEvents.OverlapEventResponse";
  }
  protected:
  explicit OverlapEventResponse(::google::protobuf::Arena* arena);
  OverlapEventResponse(::google::protobuf::Arena* arena, const OverlapEventResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverlappedActorNameFieldNumber = 1,
    kOtherActorNameFieldNumber = 2,
    kOtherActorTypeFieldNumber = 3,
  };
  // string overlapped_actor_name = 1;
  void clear_overlapped_actor_name() ;
  const std::string& overlapped_actor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_overlapped_actor_name(Arg_&& arg, Args_... args);
  std::string* mutable_overlapped_actor_name();
  PROTOBUF_NODISCARD std::string* release_overlapped_actor_name();
  void set_allocated_overlapped_actor_name(std::string* value);

  private:
  const std::string& _internal_overlapped_actor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_overlapped_actor_name(
      const std::string& value);
  std::string* _internal_mutable_overlapped_actor_name();

  public:
  // string other_actor_name = 2;
  void clear_other_actor_name() ;
  const std::string& other_actor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_other_actor_name(Arg_&& arg, Args_... args);
  std::string* mutable_other_actor_name();
  PROTOBUF_NODISCARD std::string* release_other_actor_name();
  void set_allocated_other_actor_name(std::string* value);

  private:
  const std::string& _internal_other_actor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_other_actor_name(
      const std::string& value);
  std::string* _internal_mutable_other_actor_name();

  public:
  // string other_actor_type = 3;
  void clear_other_actor_type() ;
  const std::string& other_actor_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_other_actor_type(Arg_&& arg, Args_... args);
  std::string* mutable_other_actor_type();
  PROTOBUF_NODISCARD std::string* release_other_actor_type();
  void set_allocated_other_actor_type(std::string* value);

  private:
  const std::string& _internal_other_actor_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_other_actor_type(
      const std::string& value);
  std::string* _internal_mutable_other_actor_type();

  public:
  // @@protoc_insertion_point(class_scope:TempoObservableEvents.OverlapEventResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      104, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOOBSERVABLEEVENTS_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr overlapped_actor_name_;
    ::google::protobuf::internal::ArenaStringPtr other_actor_name_;
    ::google::protobuf::internal::ArenaStringPtr other_actor_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoObservableEvents_2fObservableEvents_2eproto;
};// -------------------------------------------------------------------

class TEMPOOBSERVABLEEVENTS_API OverlapEventRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TempoObservableEvents.OverlapEventRequest) */ {
 public:
  inline OverlapEventRequest() : OverlapEventRequest(nullptr) {}
  ~OverlapEventRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OverlapEventRequest(::google::protobuf::internal::ConstantInitialized);

  inline OverlapEventRequest(const OverlapEventRequest& from)
      : OverlapEventRequest(nullptr, from) {}
  OverlapEventRequest(OverlapEventRequest&& from) noexcept
    : OverlapEventRequest() {
    *this = ::std::move(from);
  }

  inline OverlapEventRequest& operator=(const OverlapEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlapEventRequest& operator=(OverlapEventRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OverlapEventRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OverlapEventRequest* internal_default_instance() {
    return reinterpret_cast<const OverlapEventRequest*>(
               &_OverlapEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OverlapEventRequest& a, OverlapEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlapEventRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverlapEventRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OverlapEventRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OverlapEventRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OverlapEventRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OverlapEventRequest& from) {
    OverlapEventRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OverlapEventRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TempoObservableEvents.OverlapEventRequest";
  }
  protected:
  explicit OverlapEventRequest(::google::protobuf::Arena* arena);
  OverlapEventRequest(::google::protobuf::Arena* arena, const OverlapEventRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorNameFieldNumber = 1,
  };
  // string actor_name = 1;
  void clear_actor_name() ;
  const std::string& actor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor_name(Arg_&& arg, Args_... args);
  std::string* mutable_actor_name();
  PROTOBUF_NODISCARD std::string* release_actor_name();
  void set_allocated_actor_name(std::string* value);

  private:
  const std::string& _internal_actor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor_name(
      const std::string& value);
  std::string* _internal_mutable_actor_name();

  public:
  // @@protoc_insertion_point(class_scope:TempoObservableEvents.OverlapEventRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOOBSERVABLEEVENTS_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr actor_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoObservableEvents_2fObservableEvents_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OverlapEventRequest

// string actor_name = 1;
inline void OverlapEventRequest::clear_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_name_.ClearToEmpty();
}
inline const std::string& OverlapEventRequest::actor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoObservableEvents.OverlapEventRequest.actor_name)
  return _internal_actor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OverlapEventRequest::set_actor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoObservableEvents.OverlapEventRequest.actor_name)
}
inline std::string* OverlapEventRequest::mutable_actor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor_name();
  // @@protoc_insertion_point(field_mutable:TempoObservableEvents.OverlapEventRequest.actor_name)
  return _s;
}
inline const std::string& OverlapEventRequest::_internal_actor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_name_.Get();
}
inline void OverlapEventRequest::_internal_set_actor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_name_.Set(value, GetArena());
}
inline std::string* OverlapEventRequest::_internal_mutable_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_name_.Mutable( GetArena());
}
inline std::string* OverlapEventRequest::release_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoObservableEvents.OverlapEventRequest.actor_name)
  return _impl_.actor_name_.Release();
}
inline void OverlapEventRequest::set_allocated_actor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_name_.IsDefault()) {
          _impl_.actor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoObservableEvents.OverlapEventRequest.actor_name)
}

// -------------------------------------------------------------------

// OverlapEventResponse

// string overlapped_actor_name = 1;
inline void OverlapEventResponse::clear_overlapped_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.overlapped_actor_name_.ClearToEmpty();
}
inline const std::string& OverlapEventResponse::overlapped_actor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoObservableEvents.OverlapEventResponse.overlapped_actor_name)
  return _internal_overlapped_actor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OverlapEventResponse::set_overlapped_actor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.overlapped_actor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoObservableEvents.OverlapEventResponse.overlapped_actor_name)
}
inline std::string* OverlapEventResponse::mutable_overlapped_actor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_overlapped_actor_name();
  // @@protoc_insertion_point(field_mutable:TempoObservableEvents.OverlapEventResponse.overlapped_actor_name)
  return _s;
}
inline const std::string& OverlapEventResponse::_internal_overlapped_actor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.overlapped_actor_name_.Get();
}
inline void OverlapEventResponse::_internal_set_overlapped_actor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.overlapped_actor_name_.Set(value, GetArena());
}
inline std::string* OverlapEventResponse::_internal_mutable_overlapped_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.overlapped_actor_name_.Mutable( GetArena());
}
inline std::string* OverlapEventResponse::release_overlapped_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoObservableEvents.OverlapEventResponse.overlapped_actor_name)
  return _impl_.overlapped_actor_name_.Release();
}
inline void OverlapEventResponse::set_allocated_overlapped_actor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.overlapped_actor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.overlapped_actor_name_.IsDefault()) {
          _impl_.overlapped_actor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoObservableEvents.OverlapEventResponse.overlapped_actor_name)
}

// string other_actor_name = 2;
inline void OverlapEventResponse::clear_other_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.other_actor_name_.ClearToEmpty();
}
inline const std::string& OverlapEventResponse::other_actor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoObservableEvents.OverlapEventResponse.other_actor_name)
  return _internal_other_actor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OverlapEventResponse::set_other_actor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.other_actor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoObservableEvents.OverlapEventResponse.other_actor_name)
}
inline std::string* OverlapEventResponse::mutable_other_actor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_other_actor_name();
  // @@protoc_insertion_point(field_mutable:TempoObservableEvents.OverlapEventResponse.other_actor_name)
  return _s;
}
inline const std::string& OverlapEventResponse::_internal_other_actor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.other_actor_name_.Get();
}
inline void OverlapEventResponse::_internal_set_other_actor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.other_actor_name_.Set(value, GetArena());
}
inline std::string* OverlapEventResponse::_internal_mutable_other_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.other_actor_name_.Mutable( GetArena());
}
inline std::string* OverlapEventResponse::release_other_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoObservableEvents.OverlapEventResponse.other_actor_name)
  return _impl_.other_actor_name_.Release();
}
inline void OverlapEventResponse::set_allocated_other_actor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.other_actor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.other_actor_name_.IsDefault()) {
          _impl_.other_actor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoObservableEvents.OverlapEventResponse.other_actor_name)
}

// string other_actor_type = 3;
inline void OverlapEventResponse::clear_other_actor_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.other_actor_type_.ClearToEmpty();
}
inline const std::string& OverlapEventResponse::other_actor_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoObservableEvents.OverlapEventResponse.other_actor_type)
  return _internal_other_actor_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OverlapEventResponse::set_other_actor_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.other_actor_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoObservableEvents.OverlapEventResponse.other_actor_type)
}
inline std::string* OverlapEventResponse::mutable_other_actor_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_other_actor_type();
  // @@protoc_insertion_point(field_mutable:TempoObservableEvents.OverlapEventResponse.other_actor_type)
  return _s;
}
inline const std::string& OverlapEventResponse::_internal_other_actor_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.other_actor_type_.Get();
}
inline void OverlapEventResponse::_internal_set_other_actor_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.other_actor_type_.Set(value, GetArena());
}
inline std::string* OverlapEventResponse::_internal_mutable_other_actor_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.other_actor_type_.Mutable( GetArena());
}
inline std::string* OverlapEventResponse::release_other_actor_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoObservableEvents.OverlapEventResponse.other_actor_type)
  return _impl_.other_actor_type_.Release();
}
inline void OverlapEventResponse::set_allocated_other_actor_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.other_actor_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.other_actor_type_.IsDefault()) {
          _impl_.other_actor_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoObservableEvents.OverlapEventResponse.other_actor_type)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoObservableEvents


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TempoObservableEvents_2fObservableEvents_2eproto_2epb_2eh

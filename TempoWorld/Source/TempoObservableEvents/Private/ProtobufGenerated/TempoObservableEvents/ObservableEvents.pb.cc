// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoObservableEvents/ObservableEvents.proto

#include "TempoObservableEvents/ObservableEvents.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace TempoObservableEvents {

inline constexpr OverlapEventResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : overlapped_actor_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        other_actor_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        other_actor_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OverlapEventResponse::OverlapEventResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OverlapEventResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverlapEventResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverlapEventResponseDefaultTypeInternal() {}
  union {
    OverlapEventResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOOBSERVABLEEVENTS_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverlapEventResponseDefaultTypeInternal _OverlapEventResponse_default_instance_;

inline constexpr OverlapEventRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actor_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OverlapEventRequest::OverlapEventRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OverlapEventRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverlapEventRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverlapEventRequestDefaultTypeInternal() {}
  union {
    OverlapEventRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOOBSERVABLEEVENTS_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverlapEventRequestDefaultTypeInternal _OverlapEventRequest_default_instance_;
}  // namespace TempoObservableEvents
static ::_pb::Metadata file_level_metadata_TempoObservableEvents_2fObservableEvents_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_TempoObservableEvents_2fObservableEvents_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_TempoObservableEvents_2fObservableEvents_2eproto = nullptr;
const ::uint32_t TableStruct_TempoObservableEvents_2fObservableEvents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoObservableEvents::OverlapEventRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoObservableEvents::OverlapEventRequest, _impl_.actor_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoObservableEvents::OverlapEventResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoObservableEvents::OverlapEventResponse, _impl_.overlapped_actor_name_),
    PROTOBUF_FIELD_OFFSET(::TempoObservableEvents::OverlapEventResponse, _impl_.other_actor_name_),
    PROTOBUF_FIELD_OFFSET(::TempoObservableEvents::OverlapEventResponse, _impl_.other_actor_type_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::TempoObservableEvents::OverlapEventRequest)},
        {9, -1, -1, sizeof(::TempoObservableEvents::OverlapEventResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::TempoObservableEvents::_OverlapEventRequest_default_instance_._instance,
    &::TempoObservableEvents::_OverlapEventResponse_default_instance_._instance,
};
const char descriptor_table_protodef_TempoObservableEvents_2fObservableEvents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n,TempoObservableEvents/ObservableEvents"
    ".proto\022\025TempoObservableEvents\")\n\023Overlap"
    "EventRequest\022\022\n\nactor_name\030\001 \001(\t\"i\n\024Over"
    "lapEventResponse\022\035\n\025overlapped_actor_nam"
    "e\030\001 \001(\t\022\030\n\020other_actor_name\030\002 \001(\t\022\030\n\020oth"
    "er_actor_type\030\003 \001(\t2\212\001\n\026ObservableEventS"
    "ervice\022p\n\023StreamOverlapEvents\022*.TempoObs"
    "ervableEvents.OverlapEventRequest\032+.Temp"
    "oObservableEvents.OverlapEventResponse0\001"
    "b\006proto3"
};
static ::absl::once_flag descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto = {
    false,
    false,
    368,
    descriptor_table_protodef_TempoObservableEvents_2fObservableEvents_2eproto,
    "TempoObservableEvents/ObservableEvents.proto",
    &descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_TempoObservableEvents_2fObservableEvents_2eproto::offsets,
    file_level_metadata_TempoObservableEvents_2fObservableEvents_2eproto,
    file_level_enum_descriptors_TempoObservableEvents_2fObservableEvents_2eproto,
    file_level_service_descriptors_TempoObservableEvents_2fObservableEvents_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto_getter() {
  return &descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TempoObservableEvents_2fObservableEvents_2eproto(&descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto);
namespace TempoObservableEvents {
// ===================================================================

class OverlapEventRequest::_Internal {
 public:
};

OverlapEventRequest::OverlapEventRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoObservableEvents.OverlapEventRequest)
}
inline PROTOBUF_NDEBUG_INLINE OverlapEventRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : actor_name_(arena, from.actor_name_),
        _cached_size_{0} {}

OverlapEventRequest::OverlapEventRequest(
    ::google::protobuf::Arena* arena,
    const OverlapEventRequest& from)
    : ::google::protobuf::Message(arena) {
  OverlapEventRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:TempoObservableEvents.OverlapEventRequest)
}
inline PROTOBUF_NDEBUG_INLINE OverlapEventRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : actor_name_(arena),
        _cached_size_{0} {}

inline void OverlapEventRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
OverlapEventRequest::~OverlapEventRequest() {
  // @@protoc_insertion_point(destructor:TempoObservableEvents.OverlapEventRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OverlapEventRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.actor_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OverlapEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoObservableEvents.OverlapEventRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actor_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OverlapEventRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 60, 2> OverlapEventRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OverlapEventRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string actor_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OverlapEventRequest, _impl_.actor_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string actor_name = 1;
    {PROTOBUF_FIELD_OFFSET(OverlapEventRequest, _impl_.actor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\51\12\0\0\0\0\0\0"
    "TempoObservableEvents.OverlapEventRequest"
    "actor_name"
  }},
};

::uint8_t* OverlapEventRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoObservableEvents.OverlapEventRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string actor_name = 1;
  if (!this->_internal_actor_name().empty()) {
    const std::string& _s = this->_internal_actor_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TempoObservableEvents.OverlapEventRequest.actor_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoObservableEvents.OverlapEventRequest)
  return target;
}

::size_t OverlapEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoObservableEvents.OverlapEventRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actor_name = 1;
  if (!this->_internal_actor_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_actor_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OverlapEventRequest::_class_data_ = {
    OverlapEventRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OverlapEventRequest::GetClassData() const {
  return &_class_data_;
}

void OverlapEventRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OverlapEventRequest*>(&to_msg);
  auto& from = static_cast<const OverlapEventRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoObservableEvents.OverlapEventRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actor_name().empty()) {
    _this->_internal_set_actor_name(from._internal_actor_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OverlapEventRequest::CopyFrom(const OverlapEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoObservableEvents.OverlapEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OverlapEventRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OverlapEventRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OverlapEventRequest::InternalSwap(OverlapEventRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.actor_name_, &other->_impl_.actor_name_, arena);
}

::google::protobuf::Metadata OverlapEventRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto_getter, &descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto_once,
      file_level_metadata_TempoObservableEvents_2fObservableEvents_2eproto[0]);
}
// ===================================================================

class OverlapEventResponse::_Internal {
 public:
};

OverlapEventResponse::OverlapEventResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoObservableEvents.OverlapEventResponse)
}
inline PROTOBUF_NDEBUG_INLINE OverlapEventResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : overlapped_actor_name_(arena, from.overlapped_actor_name_),
        other_actor_name_(arena, from.other_actor_name_),
        other_actor_type_(arena, from.other_actor_type_),
        _cached_size_{0} {}

OverlapEventResponse::OverlapEventResponse(
    ::google::protobuf::Arena* arena,
    const OverlapEventResponse& from)
    : ::google::protobuf::Message(arena) {
  OverlapEventResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:TempoObservableEvents.OverlapEventResponse)
}
inline PROTOBUF_NDEBUG_INLINE OverlapEventResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : overlapped_actor_name_(arena),
        other_actor_name_(arena),
        other_actor_type_(arena),
        _cached_size_{0} {}

inline void OverlapEventResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
OverlapEventResponse::~OverlapEventResponse() {
  // @@protoc_insertion_point(destructor:TempoObservableEvents.OverlapEventResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OverlapEventResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.overlapped_actor_name_.Destroy();
  _impl_.other_actor_name_.Destroy();
  _impl_.other_actor_type_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OverlapEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoObservableEvents.OverlapEventResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.overlapped_actor_name_.ClearToEmpty();
  _impl_.other_actor_name_.ClearToEmpty();
  _impl_.other_actor_type_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OverlapEventResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 104, 2> OverlapEventResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OverlapEventResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string overlapped_actor_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.overlapped_actor_name_)}},
    // string other_actor_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.other_actor_name_)}},
    // string other_actor_type = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.other_actor_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string overlapped_actor_name = 1;
    {PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.overlapped_actor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string other_actor_name = 2;
    {PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.other_actor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string other_actor_type = 3;
    {PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.other_actor_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\52\25\20\20\0\0\0\0"
    "TempoObservableEvents.OverlapEventResponse"
    "overlapped_actor_name"
    "other_actor_name"
    "other_actor_type"
  }},
};

::uint8_t* OverlapEventResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoObservableEvents.OverlapEventResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string overlapped_actor_name = 1;
  if (!this->_internal_overlapped_actor_name().empty()) {
    const std::string& _s = this->_internal_overlapped_actor_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TempoObservableEvents.OverlapEventResponse.overlapped_actor_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string other_actor_name = 2;
  if (!this->_internal_other_actor_name().empty()) {
    const std::string& _s = this->_internal_other_actor_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TempoObservableEvents.OverlapEventResponse.other_actor_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string other_actor_type = 3;
  if (!this->_internal_other_actor_type().empty()) {
    const std::string& _s = this->_internal_other_actor_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TempoObservableEvents.OverlapEventResponse.other_actor_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoObservableEvents.OverlapEventResponse)
  return target;
}

::size_t OverlapEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoObservableEvents.OverlapEventResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string overlapped_actor_name = 1;
  if (!this->_internal_overlapped_actor_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_overlapped_actor_name());
  }

  // string other_actor_name = 2;
  if (!this->_internal_other_actor_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_other_actor_name());
  }

  // string other_actor_type = 3;
  if (!this->_internal_other_actor_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_other_actor_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OverlapEventResponse::_class_data_ = {
    OverlapEventResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OverlapEventResponse::GetClassData() const {
  return &_class_data_;
}

void OverlapEventResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OverlapEventResponse*>(&to_msg);
  auto& from = static_cast<const OverlapEventResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoObservableEvents.OverlapEventResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_overlapped_actor_name().empty()) {
    _this->_internal_set_overlapped_actor_name(from._internal_overlapped_actor_name());
  }
  if (!from._internal_other_actor_name().empty()) {
    _this->_internal_set_other_actor_name(from._internal_other_actor_name());
  }
  if (!from._internal_other_actor_type().empty()) {
    _this->_internal_set_other_actor_type(from._internal_other_actor_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OverlapEventResponse::CopyFrom(const OverlapEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoObservableEvents.OverlapEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OverlapEventResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OverlapEventResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OverlapEventResponse::InternalSwap(OverlapEventResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.overlapped_actor_name_, &other->_impl_.overlapped_actor_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.other_actor_name_, &other->_impl_.other_actor_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.other_actor_type_, &other->_impl_.other_actor_type_, arena);
}

::google::protobuf::Metadata OverlapEventResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto_getter, &descriptor_table_TempoObservableEvents_2fObservableEvents_2eproto_once,
      file_level_metadata_TempoObservableEvents_2fObservableEvents_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoObservableEvents
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

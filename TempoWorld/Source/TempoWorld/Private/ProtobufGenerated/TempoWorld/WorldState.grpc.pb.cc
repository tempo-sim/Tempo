// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoWorld/WorldState.proto

#include "TempoWorld/WorldState.pb.h"
#include "TempoWorld/WorldState.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace TempoWorld {

static const char* WorldStateService_method_names[] = {
  "/TempoWorld.WorldStateService/StreamOverlapEvents",
  "/TempoWorld.WorldStateService/GetCurrentActorState",
  "/TempoWorld.WorldStateService/StreamActorState",
  "/TempoWorld.WorldStateService/GetCurrentActorStatesNear",
  "/TempoWorld.WorldStateService/StreamActorStatesNear",
};

std::unique_ptr< WorldStateService::Stub> WorldStateService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WorldStateService::Stub> stub(new WorldStateService::Stub(channel, options));
  return stub;
}

WorldStateService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamOverlapEvents_(WorldStateService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetCurrentActorState_(WorldStateService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamActorState_(WorldStateService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetCurrentActorStatesNear_(WorldStateService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamActorStatesNear_(WorldStateService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::TempoWorld::OverlapEventResponse>* WorldStateService::Stub::StreamOverlapEventsRaw(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::TempoWorld::OverlapEventResponse>::Create(channel_.get(), rpcmethod_StreamOverlapEvents_, context, request);
}

void WorldStateService::Stub::async::StreamOverlapEvents(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest* request, ::grpc::ClientReadReactor< ::TempoWorld::OverlapEventResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::TempoWorld::OverlapEventResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamOverlapEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TempoWorld::OverlapEventResponse>* WorldStateService::Stub::AsyncStreamOverlapEventsRaw(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoWorld::OverlapEventResponse>::Create(channel_.get(), cq, rpcmethod_StreamOverlapEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TempoWorld::OverlapEventResponse>* WorldStateService::Stub::PrepareAsyncStreamOverlapEventsRaw(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoWorld::OverlapEventResponse>::Create(channel_.get(), cq, rpcmethod_StreamOverlapEvents_, context, request, false, nullptr);
}

::grpc::Status WorldStateService::Stub::GetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::TempoWorld::ActorState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentActorState_, context, request, response);
}

void WorldStateService::Stub::async::GetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest* request, ::TempoWorld::ActorState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentActorState_, context, request, response, std::move(f));
}

void WorldStateService::Stub::async::GetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest* request, ::TempoWorld::ActorState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentActorState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorState>* WorldStateService::Stub::PrepareAsyncGetCurrentActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoWorld::ActorState, ::TempoWorld::ActorStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentActorState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorState>* WorldStateService::Stub::AsyncGetCurrentActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentActorStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::TempoWorld::ActorState>* WorldStateService::Stub::StreamActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::TempoWorld::ActorState>::Create(channel_.get(), rpcmethod_StreamActorState_, context, request);
}

void WorldStateService::Stub::async::StreamActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest* request, ::grpc::ClientReadReactor< ::TempoWorld::ActorState>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::TempoWorld::ActorState>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamActorState_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TempoWorld::ActorState>* WorldStateService::Stub::AsyncStreamActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoWorld::ActorState>::Create(channel_.get(), cq, rpcmethod_StreamActorState_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TempoWorld::ActorState>* WorldStateService::Stub::PrepareAsyncStreamActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoWorld::ActorState>::Create(channel_.get(), cq, rpcmethod_StreamActorState_, context, request, false, nullptr);
}

::grpc::Status WorldStateService::Stub::GetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::TempoWorld::ActorStates* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentActorStatesNear_, context, request, response);
}

void WorldStateService::Stub::async::GetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::TempoWorld::ActorStates* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentActorStatesNear_, context, request, response, std::move(f));
}

void WorldStateService::Stub::async::GetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::TempoWorld::ActorStates* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentActorStatesNear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorStates>* WorldStateService::Stub::PrepareAsyncGetCurrentActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoWorld::ActorStates, ::TempoWorld::ActorStatesNearRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentActorStatesNear_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorStates>* WorldStateService::Stub::AsyncGetCurrentActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentActorStatesNearRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::TempoWorld::ActorStates>* WorldStateService::Stub::StreamActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::TempoWorld::ActorStates>::Create(channel_.get(), rpcmethod_StreamActorStatesNear_, context, request);
}

void WorldStateService::Stub::async::StreamActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::grpc::ClientReadReactor< ::TempoWorld::ActorStates>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::TempoWorld::ActorStates>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamActorStatesNear_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TempoWorld::ActorStates>* WorldStateService::Stub::AsyncStreamActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoWorld::ActorStates>::Create(channel_.get(), cq, rpcmethod_StreamActorStatesNear_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TempoWorld::ActorStates>* WorldStateService::Stub::PrepareAsyncStreamActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TempoWorld::ActorStates>::Create(channel_.get(), cq, rpcmethod_StreamActorStatesNear_, context, request, false, nullptr);
}

WorldStateService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorldStateService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< WorldStateService::Service, ::TempoWorld::OverlapEventRequest, ::TempoWorld::OverlapEventResponse>(
          [](WorldStateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::OverlapEventRequest* req,
             ::grpc::ServerWriter<::TempoWorld::OverlapEventResponse>* writer) {
               return service->StreamOverlapEvents(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorldStateService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorldStateService::Service, ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorldStateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::ActorStateRequest* req,
             ::TempoWorld::ActorState* resp) {
               return service->GetCurrentActorState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorldStateService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< WorldStateService::Service, ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState>(
          [](WorldStateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::ActorStateRequest* req,
             ::grpc::ServerWriter<::TempoWorld::ActorState>* writer) {
               return service->StreamActorState(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorldStateService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorldStateService::Service, ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorldStateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::ActorStatesNearRequest* req,
             ::TempoWorld::ActorStates* resp) {
               return service->GetCurrentActorStatesNear(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorldStateService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< WorldStateService::Service, ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates>(
          [](WorldStateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::ActorStatesNearRequest* req,
             ::grpc::ServerWriter<::TempoWorld::ActorStates>* writer) {
               return service->StreamActorStatesNear(ctx, req, writer);
             }, this)));
}

WorldStateService::Service::~Service() {
}

::grpc::Status WorldStateService::Service::StreamOverlapEvents(::grpc::ServerContext* context, const ::TempoWorld::OverlapEventRequest* request, ::grpc::ServerWriter< ::TempoWorld::OverlapEventResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorldStateService::Service::GetCurrentActorState(::grpc::ServerContext* context, const ::TempoWorld::ActorStateRequest* request, ::TempoWorld::ActorState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorldStateService::Service::StreamActorState(::grpc::ServerContext* context, const ::TempoWorld::ActorStateRequest* request, ::grpc::ServerWriter< ::TempoWorld::ActorState>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorldStateService::Service::GetCurrentActorStatesNear(::grpc::ServerContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::TempoWorld::ActorStates* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorldStateService::Service::StreamActorStatesNear(::grpc::ServerContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::grpc::ServerWriter< ::TempoWorld::ActorStates>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TempoWorld


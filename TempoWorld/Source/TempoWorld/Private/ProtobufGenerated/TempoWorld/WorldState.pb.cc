// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoWorld/WorldState.proto

#include "TempoWorld/WorldState.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf_tempo;
namespace _pbi = ::google::protobuf_tempo::internal;
namespace _fl = ::google::protobuf_tempo::internal::field_layout;
namespace TempoWorld {

inline constexpr OverlapEventResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : overlapped_actor_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        other_actor_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        other_actor_type_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OverlapEventResponse::OverlapEventResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OverlapEventResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverlapEventResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverlapEventResponseDefaultTypeInternal() {}
  union {
    OverlapEventResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOWORLD_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverlapEventResponseDefaultTypeInternal _OverlapEventResponse_default_instance_;

inline constexpr OverlapEventRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actor_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OverlapEventRequest::OverlapEventRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OverlapEventRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverlapEventRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverlapEventRequestDefaultTypeInternal() {}
  union {
    OverlapEventRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOWORLD_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverlapEventRequestDefaultTypeInternal _OverlapEventRequest_default_instance_;

inline constexpr ActorStatesNearRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : near_actor_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        search_radius_{0},
        include_static_{false},
        include_hidden_actors_{false},
        include_hidden_components_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActorStatesNearRequest::ActorStatesNearRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ActorStatesNearRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorStatesNearRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorStatesNearRequestDefaultTypeInternal() {}
  union {
    ActorStatesNearRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOWORLD_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorStatesNearRequestDefaultTypeInternal _ActorStatesNearRequest_default_instance_;

inline constexpr ActorStateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actor_name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        include_hidden_components_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActorStateRequest::ActorStateRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ActorStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorStateRequestDefaultTypeInternal() {}
  union {
    ActorStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOWORLD_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorStateRequestDefaultTypeInternal _ActorStateRequest_default_instance_;

inline constexpr ActorState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf_tempo::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        transform_{nullptr},
        linear_velocity_{nullptr},
        angular_velocity_{nullptr},
        bounds_{nullptr},
        timestamp_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActorState::ActorState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ActorStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorStateDefaultTypeInternal() {}
  union {
    ActorState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOWORLD_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorStateDefaultTypeInternal _ActorState_default_instance_;

inline constexpr ActorStates::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actor_states_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActorStates::ActorStates(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ActorStatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorStatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorStatesDefaultTypeInternal() {}
  union {
    ActorStates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOWORLD_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorStatesDefaultTypeInternal _ActorStates_default_instance_;
}  // namespace TempoWorld
static ::_pb::Metadata file_level_metadata_TempoWorld_2fWorldState_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_TempoWorld_2fWorldState_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_TempoWorld_2fWorldState_2eproto = nullptr;
const ::uint32_t TableStruct_TempoWorld_2fWorldState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoWorld::OverlapEventRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoWorld::OverlapEventRequest, _impl_.actor_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoWorld::OverlapEventResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoWorld::OverlapEventResponse, _impl_.overlapped_actor_name_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::OverlapEventResponse, _impl_.other_actor_name_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::OverlapEventResponse, _impl_.other_actor_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStateRequest, _impl_.actor_name_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStateRequest, _impl_.include_hidden_components_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStatesNearRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStatesNearRequest, _impl_.near_actor_name_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStatesNearRequest, _impl_.search_radius_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStatesNearRequest, _impl_.include_static_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStatesNearRequest, _impl_.include_hidden_actors_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStatesNearRequest, _impl_.include_hidden_components_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorState, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorState, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorState, _impl_.transform_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorState, _impl_.linear_velocity_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorState, _impl_.angular_velocity_),
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorState, _impl_.bounds_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStates, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoWorld::ActorStates, _impl_.actor_states_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::TempoWorld::OverlapEventRequest)},
        {9, -1, -1, sizeof(::TempoWorld::OverlapEventResponse)},
        {20, -1, -1, sizeof(::TempoWorld::ActorStateRequest)},
        {30, -1, -1, sizeof(::TempoWorld::ActorStatesNearRequest)},
        {43, 57, -1, sizeof(::TempoWorld::ActorState)},
        {63, -1, -1, sizeof(::TempoWorld::ActorStates)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::TempoWorld::_OverlapEventRequest_default_instance_._instance,
    &::TempoWorld::_OverlapEventResponse_default_instance_._instance,
    &::TempoWorld::_ActorStateRequest_default_instance_._instance,
    &::TempoWorld::_ActorStatesNearRequest_default_instance_._instance,
    &::TempoWorld::_ActorState_default_instance_._instance,
    &::TempoWorld::_ActorStates_default_instance_._instance,
};
const char descriptor_table_protodef_TempoWorld_2fWorldState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\033TempoWorld/WorldState.proto\022\nTempoWorl"
    "d\032\035TempoScripting/Geometry.proto\")\n\023Over"
    "lapEventRequest\022\022\n\nactor_name\030\001 \001(\t\"i\n\024O"
    "verlapEventResponse\022\035\n\025overlapped_actor_"
    "name\030\001 \001(\t\022\030\n\020other_actor_name\030\002 \001(\t\022\030\n\020"
    "other_actor_type\030\003 \001(\t\"J\n\021ActorStateRequ"
    "est\022\022\n\nactor_name\030\001 \001(\t\022!\n\031include_hidde"
    "n_components\030\002 \001(\010\"\242\001\n\026ActorStatesNearRe"
    "quest\022\027\n\017near_actor_name\030\001 \001(\t\022\025\n\rsearch"
    "_radius\030\002 \001(\002\022\026\n\016include_static\030\003 \001(\010\022\035\n"
    "\025include_hidden_actors\030\004 \001(\010\022!\n\031include_"
    "hidden_components\030\005 \001(\010\"\343\001\n\nActorState\022\021"
    "\n\ttimestamp\030\001 \001(\001\022\014\n\004name\030\002 \001(\t\022,\n\ttrans"
    "form\030\003 \001(\0132\031.TempoScripting.Transform\022/\n"
    "\017linear_velocity\030\004 \001(\0132\026.TempoScripting."
    "Vector\0220\n\020angular_velocity\030\005 \001(\0132\026.Tempo"
    "Scripting.Vector\022#\n\006bounds\030\006 \001(\0132\023.Tempo"
    "Scripting.Box\";\n\013ActorStates\022,\n\014actor_st"
    "ates\030\001 \003(\0132\026.TempoWorld.ActorState2\275\003\n\021W"
    "orldStateService\022Z\n\023StreamOverlapEvents\022"
    "\037.TempoWorld.OverlapEventRequest\032 .Tempo"
    "World.OverlapEventResponse0\001\022M\n\024GetCurre"
    "ntActorState\022\035.TempoWorld.ActorStateRequ"
    "est\032\026.TempoWorld.ActorState\022K\n\020StreamAct"
    "orState\022\035.TempoWorld.ActorStateRequest\032\026"
    ".TempoWorld.ActorState0\001\022X\n\031GetCurrentAc"
    "torStatesNear\022\".TempoWorld.ActorStatesNe"
    "arRequest\032\027.TempoWorld.ActorStates\022V\n\025St"
    "reamActorStatesNear\022\".TempoWorld.ActorSt"
    "atesNearRequest\032\027.TempoWorld.ActorStates"
    "0\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_TempoWorld_2fWorldState_2eproto_deps[1] =
    {
        &::descriptor_table_TempoScripting_2fGeometry_2eproto,
};
static ::absl_tempo::once_flag descriptor_table_TempoWorld_2fWorldState_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TempoWorld_2fWorldState_2eproto = {
    false,
    false,
    1210,
    descriptor_table_protodef_TempoWorld_2fWorldState_2eproto,
    "TempoWorld/WorldState.proto",
    &descriptor_table_TempoWorld_2fWorldState_2eproto_once,
    descriptor_table_TempoWorld_2fWorldState_2eproto_deps,
    1,
    6,
    schemas,
    file_default_instances,
    TableStruct_TempoWorld_2fWorldState_2eproto::offsets,
    file_level_metadata_TempoWorld_2fWorldState_2eproto,
    file_level_enum_descriptors_TempoWorld_2fWorldState_2eproto,
    file_level_service_descriptors_TempoWorld_2fWorldState_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TempoWorld_2fWorldState_2eproto_getter() {
  return &descriptor_table_TempoWorld_2fWorldState_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TempoWorld_2fWorldState_2eproto(&descriptor_table_TempoWorld_2fWorldState_2eproto);
namespace TempoWorld {
// ===================================================================

class OverlapEventRequest::_Internal {
 public:
};

OverlapEventRequest::OverlapEventRequest(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoWorld.OverlapEventRequest)
}
inline PROTOBUF_NDEBUG_INLINE OverlapEventRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : actor_name_(arena, from.actor_name_),
        _cached_size_{0} {}

OverlapEventRequest::OverlapEventRequest(
    ::google::protobuf_tempo::Arena* arena,
    const OverlapEventRequest& from)
    : ::google::protobuf_tempo::Message(arena) {
  OverlapEventRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:TempoWorld.OverlapEventRequest)
}
inline PROTOBUF_NDEBUG_INLINE OverlapEventRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : actor_name_(arena),
        _cached_size_{0} {}

inline void OverlapEventRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
OverlapEventRequest::~OverlapEventRequest() {
  // @@protoc_insertion_point(destructor:TempoWorld.OverlapEventRequest)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void OverlapEventRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.actor_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OverlapEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoWorld.OverlapEventRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actor_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* OverlapEventRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 49, 2> OverlapEventRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OverlapEventRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string actor_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OverlapEventRequest, _impl_.actor_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string actor_name = 1;
    {PROTOBUF_FIELD_OFFSET(OverlapEventRequest, _impl_.actor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\12\0\0\0\0\0\0"
    "TempoWorld.OverlapEventRequest"
    "actor_name"
  }},
};

::uint8_t* OverlapEventRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoWorld.OverlapEventRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string actor_name = 1;
  if (!this->_internal_actor_name().empty()) {
    const std::string& _s = this->_internal_actor_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoWorld.OverlapEventRequest.actor_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoWorld.OverlapEventRequest)
  return target;
}

::size_t OverlapEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoWorld.OverlapEventRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actor_name = 1;
  if (!this->_internal_actor_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_actor_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData OverlapEventRequest::_class_data_ = {
    OverlapEventRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* OverlapEventRequest::GetClassData() const {
  return &_class_data_;
}

void OverlapEventRequest::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<OverlapEventRequest*>(&to_msg);
  auto& from = static_cast<const OverlapEventRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoWorld.OverlapEventRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actor_name().empty()) {
    _this->_internal_set_actor_name(from._internal_actor_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void OverlapEventRequest::CopyFrom(const OverlapEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoWorld.OverlapEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OverlapEventRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OverlapEventRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OverlapEventRequest::InternalSwap(OverlapEventRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.actor_name_, &other->_impl_.actor_name_, arena);
}

::google::protobuf_tempo::Metadata OverlapEventRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoWorld_2fWorldState_2eproto_getter, &descriptor_table_TempoWorld_2fWorldState_2eproto_once,
      file_level_metadata_TempoWorld_2fWorldState_2eproto[0]);
}
// ===================================================================

class OverlapEventResponse::_Internal {
 public:
};

OverlapEventResponse::OverlapEventResponse(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoWorld.OverlapEventResponse)
}
inline PROTOBUF_NDEBUG_INLINE OverlapEventResponse::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : overlapped_actor_name_(arena, from.overlapped_actor_name_),
        other_actor_name_(arena, from.other_actor_name_),
        other_actor_type_(arena, from.other_actor_type_),
        _cached_size_{0} {}

OverlapEventResponse::OverlapEventResponse(
    ::google::protobuf_tempo::Arena* arena,
    const OverlapEventResponse& from)
    : ::google::protobuf_tempo::Message(arena) {
  OverlapEventResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:TempoWorld.OverlapEventResponse)
}
inline PROTOBUF_NDEBUG_INLINE OverlapEventResponse::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : overlapped_actor_name_(arena),
        other_actor_name_(arena),
        other_actor_type_(arena),
        _cached_size_{0} {}

inline void OverlapEventResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
OverlapEventResponse::~OverlapEventResponse() {
  // @@protoc_insertion_point(destructor:TempoWorld.OverlapEventResponse)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void OverlapEventResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.overlapped_actor_name_.Destroy();
  _impl_.other_actor_name_.Destroy();
  _impl_.other_actor_type_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OverlapEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoWorld.OverlapEventResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.overlapped_actor_name_.ClearToEmpty();
  _impl_.other_actor_name_.ClearToEmpty();
  _impl_.other_actor_type_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* OverlapEventResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 93, 2> OverlapEventResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OverlapEventResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string overlapped_actor_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.overlapped_actor_name_)}},
    // string other_actor_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.other_actor_name_)}},
    // string other_actor_type = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.other_actor_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string overlapped_actor_name = 1;
    {PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.overlapped_actor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string other_actor_name = 2;
    {PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.other_actor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string other_actor_type = 3;
    {PROTOBUF_FIELD_OFFSET(OverlapEventResponse, _impl_.other_actor_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\37\25\20\20\0\0\0\0"
    "TempoWorld.OverlapEventResponse"
    "overlapped_actor_name"
    "other_actor_name"
    "other_actor_type"
  }},
};

::uint8_t* OverlapEventResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoWorld.OverlapEventResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string overlapped_actor_name = 1;
  if (!this->_internal_overlapped_actor_name().empty()) {
    const std::string& _s = this->_internal_overlapped_actor_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoWorld.OverlapEventResponse.overlapped_actor_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string other_actor_name = 2;
  if (!this->_internal_other_actor_name().empty()) {
    const std::string& _s = this->_internal_other_actor_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoWorld.OverlapEventResponse.other_actor_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string other_actor_type = 3;
  if (!this->_internal_other_actor_type().empty()) {
    const std::string& _s = this->_internal_other_actor_type();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoWorld.OverlapEventResponse.other_actor_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoWorld.OverlapEventResponse)
  return target;
}

::size_t OverlapEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoWorld.OverlapEventResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string overlapped_actor_name = 1;
  if (!this->_internal_overlapped_actor_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_overlapped_actor_name());
  }

  // string other_actor_name = 2;
  if (!this->_internal_other_actor_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_other_actor_name());
  }

  // string other_actor_type = 3;
  if (!this->_internal_other_actor_type().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_other_actor_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData OverlapEventResponse::_class_data_ = {
    OverlapEventResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* OverlapEventResponse::GetClassData() const {
  return &_class_data_;
}

void OverlapEventResponse::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<OverlapEventResponse*>(&to_msg);
  auto& from = static_cast<const OverlapEventResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoWorld.OverlapEventResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_overlapped_actor_name().empty()) {
    _this->_internal_set_overlapped_actor_name(from._internal_overlapped_actor_name());
  }
  if (!from._internal_other_actor_name().empty()) {
    _this->_internal_set_other_actor_name(from._internal_other_actor_name());
  }
  if (!from._internal_other_actor_type().empty()) {
    _this->_internal_set_other_actor_type(from._internal_other_actor_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void OverlapEventResponse::CopyFrom(const OverlapEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoWorld.OverlapEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OverlapEventResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OverlapEventResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OverlapEventResponse::InternalSwap(OverlapEventResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.overlapped_actor_name_, &other->_impl_.overlapped_actor_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.other_actor_name_, &other->_impl_.other_actor_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.other_actor_type_, &other->_impl_.other_actor_type_, arena);
}

::google::protobuf_tempo::Metadata OverlapEventResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoWorld_2fWorldState_2eproto_getter, &descriptor_table_TempoWorld_2fWorldState_2eproto_once,
      file_level_metadata_TempoWorld_2fWorldState_2eproto[1]);
}
// ===================================================================

class ActorStateRequest::_Internal {
 public:
};

ActorStateRequest::ActorStateRequest(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoWorld.ActorStateRequest)
}
inline PROTOBUF_NDEBUG_INLINE ActorStateRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : actor_name_(arena, from.actor_name_),
        _cached_size_{0} {}

ActorStateRequest::ActorStateRequest(
    ::google::protobuf_tempo::Arena* arena,
    const ActorStateRequest& from)
    : ::google::protobuf_tempo::Message(arena) {
  ActorStateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.include_hidden_components_ = from._impl_.include_hidden_components_;

  // @@protoc_insertion_point(copy_constructor:TempoWorld.ActorStateRequest)
}
inline PROTOBUF_NDEBUG_INLINE ActorStateRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : actor_name_(arena),
        _cached_size_{0} {}

inline void ActorStateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.include_hidden_components_ = {};
}
ActorStateRequest::~ActorStateRequest() {
  // @@protoc_insertion_point(destructor:TempoWorld.ActorStateRequest)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void ActorStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.actor_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ActorStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoWorld.ActorStateRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actor_name_.ClearToEmpty();
  _impl_.include_hidden_components_ = false;
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* ActorStateRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 47, 2> ActorStateRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ActorStateRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool include_hidden_components = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ActorStateRequest, _impl_.include_hidden_components_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ActorStateRequest, _impl_.include_hidden_components_)}},
    // string actor_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ActorStateRequest, _impl_.actor_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string actor_name = 1;
    {PROTOBUF_FIELD_OFFSET(ActorStateRequest, _impl_.actor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool include_hidden_components = 2;
    {PROTOBUF_FIELD_OFFSET(ActorStateRequest, _impl_.include_hidden_components_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\34\12\0\0\0\0\0\0"
    "TempoWorld.ActorStateRequest"
    "actor_name"
  }},
};

::uint8_t* ActorStateRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoWorld.ActorStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string actor_name = 1;
  if (!this->_internal_actor_name().empty()) {
    const std::string& _s = this->_internal_actor_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoWorld.ActorStateRequest.actor_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool include_hidden_components = 2;
  if (this->_internal_include_hidden_components() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_include_hidden_components(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoWorld.ActorStateRequest)
  return target;
}

::size_t ActorStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoWorld.ActorStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actor_name = 1;
  if (!this->_internal_actor_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_actor_name());
  }

  // bool include_hidden_components = 2;
  if (this->_internal_include_hidden_components() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData ActorStateRequest::_class_data_ = {
    ActorStateRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* ActorStateRequest::GetClassData() const {
  return &_class_data_;
}

void ActorStateRequest::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<ActorStateRequest*>(&to_msg);
  auto& from = static_cast<const ActorStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoWorld.ActorStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actor_name().empty()) {
    _this->_internal_set_actor_name(from._internal_actor_name());
  }
  if (from._internal_include_hidden_components() != 0) {
    _this->_internal_set_include_hidden_components(from._internal_include_hidden_components());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void ActorStateRequest::CopyFrom(const ActorStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoWorld.ActorStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ActorStateRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ActorStateRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ActorStateRequest::InternalSwap(ActorStateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.actor_name_, &other->_impl_.actor_name_, arena);
        swap(_impl_.include_hidden_components_, other->_impl_.include_hidden_components_);
}

::google::protobuf_tempo::Metadata ActorStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoWorld_2fWorldState_2eproto_getter, &descriptor_table_TempoWorld_2fWorldState_2eproto_once,
      file_level_metadata_TempoWorld_2fWorldState_2eproto[2]);
}
// ===================================================================

class ActorStatesNearRequest::_Internal {
 public:
};

ActorStatesNearRequest::ActorStatesNearRequest(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoWorld.ActorStatesNearRequest)
}
inline PROTOBUF_NDEBUG_INLINE ActorStatesNearRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : near_actor_name_(arena, from.near_actor_name_),
        _cached_size_{0} {}

ActorStatesNearRequest::ActorStatesNearRequest(
    ::google::protobuf_tempo::Arena* arena,
    const ActorStatesNearRequest& from)
    : ::google::protobuf_tempo::Message(arena) {
  ActorStatesNearRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, search_radius_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, search_radius_),
           offsetof(Impl_, include_hidden_components_) -
               offsetof(Impl_, search_radius_) +
               sizeof(Impl_::include_hidden_components_));

  // @@protoc_insertion_point(copy_constructor:TempoWorld.ActorStatesNearRequest)
}
inline PROTOBUF_NDEBUG_INLINE ActorStatesNearRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : near_actor_name_(arena),
        _cached_size_{0} {}

inline void ActorStatesNearRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, search_radius_),
           0,
           offsetof(Impl_, include_hidden_components_) -
               offsetof(Impl_, search_radius_) +
               sizeof(Impl_::include_hidden_components_));
}
ActorStatesNearRequest::~ActorStatesNearRequest() {
  // @@protoc_insertion_point(destructor:TempoWorld.ActorStatesNearRequest)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void ActorStatesNearRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.near_actor_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ActorStatesNearRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoWorld.ActorStatesNearRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_actor_name_.ClearToEmpty();
  ::memset(&_impl_.search_radius_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.include_hidden_components_) -
      reinterpret_cast<char*>(&_impl_.search_radius_)) + sizeof(_impl_.include_hidden_components_));
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* ActorStatesNearRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 57, 2> ActorStatesNearRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ActorStatesNearRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string near_actor_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.near_actor_name_)}},
    // float search_radius = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.search_radius_)}},
    // bool include_static = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ActorStatesNearRequest, _impl_.include_static_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.include_static_)}},
    // bool include_hidden_actors = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ActorStatesNearRequest, _impl_.include_hidden_actors_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.include_hidden_actors_)}},
    // bool include_hidden_components = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ActorStatesNearRequest, _impl_.include_hidden_components_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.include_hidden_components_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string near_actor_name = 1;
    {PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.near_actor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float search_radius = 2;
    {PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.search_radius_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool include_static = 3;
    {PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.include_static_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool include_hidden_actors = 4;
    {PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.include_hidden_actors_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool include_hidden_components = 5;
    {PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.include_hidden_components_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\41\17\0\0\0\0\0\0"
    "TempoWorld.ActorStatesNearRequest"
    "near_actor_name"
  }},
};

::uint8_t* ActorStatesNearRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoWorld.ActorStatesNearRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string near_actor_name = 1;
  if (!this->_internal_near_actor_name().empty()) {
    const std::string& _s = this->_internal_near_actor_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoWorld.ActorStatesNearRequest.near_actor_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // float search_radius = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_search_radius = this->_internal_search_radius();
  ::uint32_t raw_search_radius;
  memcpy(&raw_search_radius, &tmp_search_radius, sizeof(tmp_search_radius));
  if (raw_search_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_search_radius(), target);
  }

  // bool include_static = 3;
  if (this->_internal_include_static() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_include_static(), target);
  }

  // bool include_hidden_actors = 4;
  if (this->_internal_include_hidden_actors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_include_hidden_actors(), target);
  }

  // bool include_hidden_components = 5;
  if (this->_internal_include_hidden_components() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_include_hidden_components(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoWorld.ActorStatesNearRequest)
  return target;
}

::size_t ActorStatesNearRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoWorld.ActorStatesNearRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_actor_name = 1;
  if (!this->_internal_near_actor_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_near_actor_name());
  }

  // float search_radius = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_search_radius = this->_internal_search_radius();
  ::uint32_t raw_search_radius;
  memcpy(&raw_search_radius, &tmp_search_radius, sizeof(tmp_search_radius));
  if (raw_search_radius != 0) {
    total_size += 5;
  }

  // bool include_static = 3;
  if (this->_internal_include_static() != 0) {
    total_size += 2;
  }

  // bool include_hidden_actors = 4;
  if (this->_internal_include_hidden_actors() != 0) {
    total_size += 2;
  }

  // bool include_hidden_components = 5;
  if (this->_internal_include_hidden_components() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData ActorStatesNearRequest::_class_data_ = {
    ActorStatesNearRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* ActorStatesNearRequest::GetClassData() const {
  return &_class_data_;
}

void ActorStatesNearRequest::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<ActorStatesNearRequest*>(&to_msg);
  auto& from = static_cast<const ActorStatesNearRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoWorld.ActorStatesNearRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_actor_name().empty()) {
    _this->_internal_set_near_actor_name(from._internal_near_actor_name());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_search_radius = from._internal_search_radius();
  ::uint32_t raw_search_radius;
  memcpy(&raw_search_radius, &tmp_search_radius, sizeof(tmp_search_radius));
  if (raw_search_radius != 0) {
    _this->_internal_set_search_radius(from._internal_search_radius());
  }
  if (from._internal_include_static() != 0) {
    _this->_internal_set_include_static(from._internal_include_static());
  }
  if (from._internal_include_hidden_actors() != 0) {
    _this->_internal_set_include_hidden_actors(from._internal_include_hidden_actors());
  }
  if (from._internal_include_hidden_components() != 0) {
    _this->_internal_set_include_hidden_components(from._internal_include_hidden_components());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void ActorStatesNearRequest::CopyFrom(const ActorStatesNearRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoWorld.ActorStatesNearRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ActorStatesNearRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ActorStatesNearRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ActorStatesNearRequest::InternalSwap(ActorStatesNearRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.near_actor_name_, &other->_impl_.near_actor_name_, arena);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.include_hidden_components_)
      + sizeof(ActorStatesNearRequest::_impl_.include_hidden_components_)
      - PROTOBUF_FIELD_OFFSET(ActorStatesNearRequest, _impl_.search_radius_)>(
          reinterpret_cast<char*>(&_impl_.search_radius_),
          reinterpret_cast<char*>(&other->_impl_.search_radius_));
}

::google::protobuf_tempo::Metadata ActorStatesNearRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoWorld_2fWorldState_2eproto_getter, &descriptor_table_TempoWorld_2fWorldState_2eproto_once,
      file_level_metadata_TempoWorld_2fWorldState_2eproto[3]);
}
// ===================================================================

class ActorState::_Internal {
 public:
  using HasBits = decltype(std::declval<ActorState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ActorState, _impl_._has_bits_);
  static const ::TempoScripting::Transform& transform(const ActorState* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TempoScripting::Vector& linear_velocity(const ActorState* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TempoScripting::Vector& angular_velocity(const ActorState* msg);
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TempoScripting::Box& bounds(const ActorState* msg);
  static void set_has_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TempoScripting::Transform& ActorState::_Internal::transform(const ActorState* msg) {
  return *msg->_impl_.transform_;
}
const ::TempoScripting::Vector& ActorState::_Internal::linear_velocity(const ActorState* msg) {
  return *msg->_impl_.linear_velocity_;
}
const ::TempoScripting::Vector& ActorState::_Internal::angular_velocity(const ActorState* msg) {
  return *msg->_impl_.angular_velocity_;
}
const ::TempoScripting::Box& ActorState::_Internal::bounds(const ActorState* msg) {
  return *msg->_impl_.bounds_;
}
void ActorState::clear_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ActorState::clear_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.linear_velocity_ != nullptr) _impl_.linear_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ActorState::clear_angular_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.angular_velocity_ != nullptr) _impl_.angular_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ActorState::clear_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bounds_ != nullptr) _impl_.bounds_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ActorState::ActorState(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoWorld.ActorState)
}
inline PROTOBUF_NDEBUG_INLINE ActorState::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

ActorState::ActorState(
    ::google::protobuf_tempo::Arena* arena,
    const ActorState& from)
    : ::google::protobuf_tempo::Message(arena) {
  ActorState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::TempoScripting::Transform>(arena, *from._impl_.transform_)
                : nullptr;
  _impl_.linear_velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::TempoScripting::Vector>(arena, *from._impl_.linear_velocity_)
                : nullptr;
  _impl_.angular_velocity_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::TempoScripting::Vector>(arena, *from._impl_.angular_velocity_)
                : nullptr;
  _impl_.bounds_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::TempoScripting::Box>(arena, *from._impl_.bounds_)
                : nullptr;
  _impl_.timestamp_ = from._impl_.timestamp_;

  // @@protoc_insertion_point(copy_constructor:TempoWorld.ActorState)
}
inline PROTOBUF_NDEBUG_INLINE ActorState::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void ActorState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, transform_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, transform_) +
               sizeof(Impl_::timestamp_));
}
ActorState::~ActorState() {
  // @@protoc_insertion_point(destructor:TempoWorld.ActorState)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void ActorState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  delete _impl_.transform_;
  delete _impl_.linear_velocity_;
  delete _impl_.angular_velocity_;
  delete _impl_.bounds_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ActorState::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoWorld.ActorState)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.linear_velocity_ != nullptr);
      _impl_.linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.angular_velocity_ != nullptr);
      _impl_.angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.bounds_ != nullptr);
      _impl_.bounds_->Clear();
    }
  }
  _impl_.timestamp_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* ActorState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 4, 34, 2> ActorState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ActorState, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ActorState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double timestamp = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(ActorState, _impl_.timestamp_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ActorState, _impl_.name_)}},
    // .TempoScripting.Transform transform = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ActorState, _impl_.transform_)}},
    // .TempoScripting.Vector linear_velocity = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(ActorState, _impl_.linear_velocity_)}},
    // .TempoScripting.Vector angular_velocity = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(ActorState, _impl_.angular_velocity_)}},
    // .TempoScripting.Box bounds = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 3, PROTOBUF_FIELD_OFFSET(ActorState, _impl_.bounds_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // double timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(ActorState, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(ActorState, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .TempoScripting.Transform transform = 3;
    {PROTOBUF_FIELD_OFFSET(ActorState, _impl_.transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .TempoScripting.Vector linear_velocity = 4;
    {PROTOBUF_FIELD_OFFSET(ActorState, _impl_.linear_velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .TempoScripting.Vector angular_velocity = 5;
    {PROTOBUF_FIELD_OFFSET(ActorState, _impl_.angular_velocity_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .TempoScripting.Box bounds = 6;
    {PROTOBUF_FIELD_OFFSET(ActorState, _impl_.bounds_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::TempoScripting::Transform>()},
    {::_pbi::TcParser::GetTable<::TempoScripting::Vector>()},
    {::_pbi::TcParser::GetTable<::TempoScripting::Vector>()},
    {::_pbi::TcParser::GetTable<::TempoScripting::Box>()},
  }}, {{
    "\25\0\4\0\0\0\0\0"
    "TempoWorld.ActorState"
    "name"
  }},
};

::uint8_t* ActorState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoWorld.ActorState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_timestamp(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf_tempo::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf_tempo::internal::WireFormatLite::SERIALIZE, "TempoWorld.ActorState.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .TempoScripting.Transform transform = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // .TempoScripting.Vector linear_velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::linear_velocity(this),
        _Internal::linear_velocity(this).GetCachedSize(), target, stream);
  }

  // .TempoScripting.Vector angular_velocity = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::angular_velocity(this),
        _Internal::angular_velocity(this).GetCachedSize(), target, stream);
  }

  // .TempoScripting.Box bounds = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::bounds(this),
        _Internal::bounds(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoWorld.ActorState)
  return target;
}

::size_t ActorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoWorld.ActorState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf_tempo::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .TempoScripting.Transform transform = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(*_impl_.transform_);
    }

    // .TempoScripting.Vector linear_velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(*_impl_.linear_velocity_);
    }

    // .TempoScripting.Vector angular_velocity = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(*_impl_.angular_velocity_);
    }

    // .TempoScripting.Box bounds = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(*_impl_.bounds_);
    }

  }
  // double timestamp = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData ActorState::_class_data_ = {
    ActorState::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* ActorState::GetClassData() const {
  return &_class_data_;
}

void ActorState::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<ActorState*>(&to_msg);
  auto& from = static_cast<const ActorState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoWorld.ActorState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_transform()->::TempoScripting::Transform::MergeFrom(
          from._internal_transform());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_linear_velocity()->::TempoScripting::Vector::MergeFrom(
          from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_angular_velocity()->::TempoScripting::Vector::MergeFrom(
          from._internal_angular_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_bounds()->::TempoScripting::Box::MergeFrom(
          from._internal_bounds());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void ActorState::CopyFrom(const ActorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoWorld.ActorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ActorState::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ActorState::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ActorState::InternalSwap(ActorState* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorState, _impl_.timestamp_)
      + sizeof(ActorState::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(ActorState, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::google::protobuf_tempo::Metadata ActorState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoWorld_2fWorldState_2eproto_getter, &descriptor_table_TempoWorld_2fWorldState_2eproto_once,
      file_level_metadata_TempoWorld_2fWorldState_2eproto[4]);
}
// ===================================================================

class ActorStates::_Internal {
 public:
};

ActorStates::ActorStates(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoWorld.ActorStates)
}
inline PROTOBUF_NDEBUG_INLINE ActorStates::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : actor_states_{visibility, arena, from.actor_states_},
        _cached_size_{0} {}

ActorStates::ActorStates(
    ::google::protobuf_tempo::Arena* arena,
    const ActorStates& from)
    : ::google::protobuf_tempo::Message(arena) {
  ActorStates* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:TempoWorld.ActorStates)
}
inline PROTOBUF_NDEBUG_INLINE ActorStates::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : actor_states_{visibility, arena},
        _cached_size_{0} {}

inline void ActorStates::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ActorStates::~ActorStates() {
  // @@protoc_insertion_point(destructor:TempoWorld.ActorStates)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void ActorStates::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ActorStates::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoWorld.ActorStates)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actor_states_.Clear();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* ActorStates::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ActorStates::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ActorStates_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .TempoWorld.ActorState actor_states = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ActorStates, _impl_.actor_states_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .TempoWorld.ActorState actor_states = 1;
    {PROTOBUF_FIELD_OFFSET(ActorStates, _impl_.actor_states_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::TempoWorld::ActorState>()},
  }}, {{
  }},
};

::uint8_t* ActorStates::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoWorld.ActorStates)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .TempoWorld.ActorState actor_states = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actor_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_actor_states().Get(i);
    target = ::google::protobuf_tempo::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoWorld.ActorStates)
  return target;
}

::size_t ActorStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoWorld.ActorStates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TempoWorld.ActorState actor_states = 1;
  total_size += 1UL * this->_internal_actor_states_size();
  for (const auto& msg : this->_internal_actor_states()) {
    total_size +=
      ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData ActorStates::_class_data_ = {
    ActorStates::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* ActorStates::GetClassData() const {
  return &_class_data_;
}

void ActorStates::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<ActorStates*>(&to_msg);
  auto& from = static_cast<const ActorStates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoWorld.ActorStates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actor_states()->MergeFrom(
      from._internal_actor_states());
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void ActorStates::CopyFrom(const ActorStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoWorld.ActorStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ActorStates::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ActorStates::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ActorStates::InternalSwap(ActorStates* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actor_states_.InternalSwap(&other->_impl_.actor_states_);
}

::google::protobuf_tempo::Metadata ActorStates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoWorld_2fWorldState_2eproto_getter, &descriptor_table_TempoWorld_2fWorldState_2eproto_once,
      file_level_metadata_TempoWorld_2fWorldState_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoWorld
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

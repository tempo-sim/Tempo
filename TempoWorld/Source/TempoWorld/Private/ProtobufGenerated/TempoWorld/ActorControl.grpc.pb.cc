// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoWorld/ActorControl.proto

#include "TempoWorld/ActorControl.pb.h"
#include "TempoWorld/ActorControl.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace TempoWorld {

static const char* ActorControlService_method_names[] = {
  "/TempoWorld.ActorControlService/SpawnActor",
  "/TempoWorld.ActorControlService/FinishSpawningActor",
  "/TempoWorld.ActorControlService/DestroyActor",
  "/TempoWorld.ActorControlService/AddComponent",
  "/TempoWorld.ActorControlService/DestroyComponent",
  "/TempoWorld.ActorControlService/SetActorTransform",
  "/TempoWorld.ActorControlService/SetComponentTransform",
  "/TempoWorld.ActorControlService/ActivateComponent",
  "/TempoWorld.ActorControlService/DeactivateComponent",
  "/TempoWorld.ActorControlService/GetAllActors",
  "/TempoWorld.ActorControlService/GetAllComponents",
  "/TempoWorld.ActorControlService/GetActorProperties",
  "/TempoWorld.ActorControlService/GetComponentProperties",
  "/TempoWorld.ActorControlService/SetBoolProperty",
  "/TempoWorld.ActorControlService/SetStringProperty",
  "/TempoWorld.ActorControlService/SetEnumProperty",
  "/TempoWorld.ActorControlService/SetIntProperty",
  "/TempoWorld.ActorControlService/SetFloatProperty",
  "/TempoWorld.ActorControlService/SetVectorProperty",
  "/TempoWorld.ActorControlService/SetRotatorProperty",
  "/TempoWorld.ActorControlService/SetColorProperty",
  "/TempoWorld.ActorControlService/SetClassProperty",
  "/TempoWorld.ActorControlService/SetAssetProperty",
  "/TempoWorld.ActorControlService/SetActorProperty",
  "/TempoWorld.ActorControlService/SetComponentProperty",
  "/TempoWorld.ActorControlService/SetBoolArrayProperty",
  "/TempoWorld.ActorControlService/SetStringArrayProperty",
  "/TempoWorld.ActorControlService/SetEnumArrayProperty",
  "/TempoWorld.ActorControlService/SetIntArrayProperty",
  "/TempoWorld.ActorControlService/SetFloatArrayProperty",
  "/TempoWorld.ActorControlService/SetClassArrayProperty",
  "/TempoWorld.ActorControlService/SetAssetArrayProperty",
  "/TempoWorld.ActorControlService/SetActorArrayProperty",
  "/TempoWorld.ActorControlService/SetComponentArrayProperty",
  "/TempoWorld.ActorControlService/CallFunction",
};

std::unique_ptr< ActorControlService::Stub> ActorControlService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ActorControlService::Stub> stub(new ActorControlService::Stub(channel, options));
  return stub;
}

ActorControlService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SpawnActor_(ActorControlService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FinishSpawningActor_(ActorControlService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyActor_(ActorControlService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddComponent_(ActorControlService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyComponent_(ActorControlService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetActorTransform_(ActorControlService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetComponentTransform_(ActorControlService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ActivateComponent_(ActorControlService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeactivateComponent_(ActorControlService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllActors_(ActorControlService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllComponents_(ActorControlService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActorProperties_(ActorControlService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetComponentProperties_(ActorControlService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBoolProperty_(ActorControlService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetStringProperty_(ActorControlService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEnumProperty_(ActorControlService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIntProperty_(ActorControlService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFloatProperty_(ActorControlService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVectorProperty_(ActorControlService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRotatorProperty_(ActorControlService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetColorProperty_(ActorControlService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetClassProperty_(ActorControlService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAssetProperty_(ActorControlService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetActorProperty_(ActorControlService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetComponentProperty_(ActorControlService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBoolArrayProperty_(ActorControlService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetStringArrayProperty_(ActorControlService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEnumArrayProperty_(ActorControlService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIntArrayProperty_(ActorControlService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFloatArrayProperty_(ActorControlService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetClassArrayProperty_(ActorControlService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAssetArrayProperty_(ActorControlService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetActorArrayProperty_(ActorControlService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetComponentArrayProperty_(ActorControlService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CallFunction_(ActorControlService_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ActorControlService::Stub::SpawnActor(::grpc::ClientContext* context, const ::TempoWorld::SpawnActorRequest& request, ::TempoWorld::SpawnActorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SpawnActorRequest, ::TempoWorld::SpawnActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpawnActor_, context, request, response);
}

void ActorControlService::Stub::async::SpawnActor(::grpc::ClientContext* context, const ::TempoWorld::SpawnActorRequest* request, ::TempoWorld::SpawnActorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SpawnActorRequest, ::TempoWorld::SpawnActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnActor_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SpawnActor(::grpc::ClientContext* context, const ::TempoWorld::SpawnActorRequest* request, ::TempoWorld::SpawnActorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnActor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::SpawnActorResponse>* ActorControlService::Stub::PrepareAsyncSpawnActorRaw(::grpc::ClientContext* context, const ::TempoWorld::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoWorld::SpawnActorResponse, ::TempoWorld::SpawnActorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpawnActor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::SpawnActorResponse>* ActorControlService::Stub::AsyncSpawnActorRaw(::grpc::ClientContext* context, const ::TempoWorld::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpawnActorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::FinishSpawningActor(::grpc::ClientContext* context, const ::TempoWorld::FinishSpawningActorRequest& request, ::TempoWorld::FinishSpawningActorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::FinishSpawningActorRequest, ::TempoWorld::FinishSpawningActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FinishSpawningActor_, context, request, response);
}

void ActorControlService::Stub::async::FinishSpawningActor(::grpc::ClientContext* context, const ::TempoWorld::FinishSpawningActorRequest* request, ::TempoWorld::FinishSpawningActorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::FinishSpawningActorRequest, ::TempoWorld::FinishSpawningActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinishSpawningActor_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::FinishSpawningActor(::grpc::ClientContext* context, const ::TempoWorld::FinishSpawningActorRequest* request, ::TempoWorld::FinishSpawningActorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinishSpawningActor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::FinishSpawningActorResponse>* ActorControlService::Stub::PrepareAsyncFinishSpawningActorRaw(::grpc::ClientContext* context, const ::TempoWorld::FinishSpawningActorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoWorld::FinishSpawningActorResponse, ::TempoWorld::FinishSpawningActorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FinishSpawningActor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::FinishSpawningActorResponse>* ActorControlService::Stub::AsyncFinishSpawningActorRaw(::grpc::ClientContext* context, const ::TempoWorld::FinishSpawningActorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFinishSpawningActorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::DestroyActor(::grpc::ClientContext* context, const ::TempoWorld::DestroyActorRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::DestroyActorRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyActor_, context, request, response);
}

void ActorControlService::Stub::async::DestroyActor(::grpc::ClientContext* context, const ::TempoWorld::DestroyActorRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::DestroyActorRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyActor_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::DestroyActor(::grpc::ClientContext* context, const ::TempoWorld::DestroyActorRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyActor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncDestroyActorRaw(::grpc::ClientContext* context, const ::TempoWorld::DestroyActorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::DestroyActorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyActor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncDestroyActorRaw(::grpc::ClientContext* context, const ::TempoWorld::DestroyActorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyActorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::AddComponent(::grpc::ClientContext* context, const ::TempoWorld::AddComponentRequest& request, ::TempoWorld::AddComponentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::AddComponentRequest, ::TempoWorld::AddComponentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddComponent_, context, request, response);
}

void ActorControlService::Stub::async::AddComponent(::grpc::ClientContext* context, const ::TempoWorld::AddComponentRequest* request, ::TempoWorld::AddComponentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::AddComponentRequest, ::TempoWorld::AddComponentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddComponent_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::AddComponent(::grpc::ClientContext* context, const ::TempoWorld::AddComponentRequest* request, ::TempoWorld::AddComponentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddComponent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::AddComponentResponse>* ActorControlService::Stub::PrepareAsyncAddComponentRaw(::grpc::ClientContext* context, const ::TempoWorld::AddComponentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoWorld::AddComponentResponse, ::TempoWorld::AddComponentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddComponent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::AddComponentResponse>* ActorControlService::Stub::AsyncAddComponentRaw(::grpc::ClientContext* context, const ::TempoWorld::AddComponentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddComponentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::DestroyComponent(::grpc::ClientContext* context, const ::TempoWorld::DestroyComponentRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::DestroyComponentRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyComponent_, context, request, response);
}

void ActorControlService::Stub::async::DestroyComponent(::grpc::ClientContext* context, const ::TempoWorld::DestroyComponentRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::DestroyComponentRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyComponent_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::DestroyComponent(::grpc::ClientContext* context, const ::TempoWorld::DestroyComponentRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyComponent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncDestroyComponentRaw(::grpc::ClientContext* context, const ::TempoWorld::DestroyComponentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::DestroyComponentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyComponent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncDestroyComponentRaw(::grpc::ClientContext* context, const ::TempoWorld::DestroyComponentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyComponentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetActorTransform(::grpc::ClientContext* context, const ::TempoWorld::SetActorTransformRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetActorTransformRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetActorTransform_, context, request, response);
}

void ActorControlService::Stub::async::SetActorTransform(::grpc::ClientContext* context, const ::TempoWorld::SetActorTransformRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetActorTransformRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetActorTransform_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetActorTransform(::grpc::ClientContext* context, const ::TempoWorld::SetActorTransformRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetActorTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetActorTransformRaw(::grpc::ClientContext* context, const ::TempoWorld::SetActorTransformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetActorTransformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetActorTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetActorTransformRaw(::grpc::ClientContext* context, const ::TempoWorld::SetActorTransformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetActorTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetComponentTransform(::grpc::ClientContext* context, const ::TempoWorld::SetComponentTransformRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetComponentTransformRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetComponentTransform_, context, request, response);
}

void ActorControlService::Stub::async::SetComponentTransform(::grpc::ClientContext* context, const ::TempoWorld::SetComponentTransformRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetComponentTransformRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetComponentTransform_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetComponentTransform(::grpc::ClientContext* context, const ::TempoWorld::SetComponentTransformRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetComponentTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetComponentTransformRaw(::grpc::ClientContext* context, const ::TempoWorld::SetComponentTransformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetComponentTransformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetComponentTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetComponentTransformRaw(::grpc::ClientContext* context, const ::TempoWorld::SetComponentTransformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetComponentTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::ActivateComponent(::grpc::ClientContext* context, const ::TempoWorld::ActivateComponentRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::ActivateComponentRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ActivateComponent_, context, request, response);
}

void ActorControlService::Stub::async::ActivateComponent(::grpc::ClientContext* context, const ::TempoWorld::ActivateComponentRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::ActivateComponentRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateComponent_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::ActivateComponent(::grpc::ClientContext* context, const ::TempoWorld::ActivateComponentRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateComponent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncActivateComponentRaw(::grpc::ClientContext* context, const ::TempoWorld::ActivateComponentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::ActivateComponentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ActivateComponent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncActivateComponentRaw(::grpc::ClientContext* context, const ::TempoWorld::ActivateComponentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncActivateComponentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::DeactivateComponent(::grpc::ClientContext* context, const ::TempoWorld::DeactivateComponentRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::DeactivateComponentRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeactivateComponent_, context, request, response);
}

void ActorControlService::Stub::async::DeactivateComponent(::grpc::ClientContext* context, const ::TempoWorld::DeactivateComponentRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::DeactivateComponentRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeactivateComponent_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::DeactivateComponent(::grpc::ClientContext* context, const ::TempoWorld::DeactivateComponentRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeactivateComponent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncDeactivateComponentRaw(::grpc::ClientContext* context, const ::TempoWorld::DeactivateComponentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::DeactivateComponentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeactivateComponent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncDeactivateComponentRaw(::grpc::ClientContext* context, const ::TempoWorld::DeactivateComponentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeactivateComponentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::GetAllActors(::grpc::ClientContext* context, const ::TempoWorld::GetAllActorsRequest& request, ::TempoWorld::GetAllActorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::GetAllActorsRequest, ::TempoWorld::GetAllActorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllActors_, context, request, response);
}

void ActorControlService::Stub::async::GetAllActors(::grpc::ClientContext* context, const ::TempoWorld::GetAllActorsRequest* request, ::TempoWorld::GetAllActorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::GetAllActorsRequest, ::TempoWorld::GetAllActorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllActors_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::GetAllActors(::grpc::ClientContext* context, const ::TempoWorld::GetAllActorsRequest* request, ::TempoWorld::GetAllActorsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllActors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::GetAllActorsResponse>* ActorControlService::Stub::PrepareAsyncGetAllActorsRaw(::grpc::ClientContext* context, const ::TempoWorld::GetAllActorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoWorld::GetAllActorsResponse, ::TempoWorld::GetAllActorsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllActors_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::GetAllActorsResponse>* ActorControlService::Stub::AsyncGetAllActorsRaw(::grpc::ClientContext* context, const ::TempoWorld::GetAllActorsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllActorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::GetAllComponents(::grpc::ClientContext* context, const ::TempoWorld::GetAllComponentsRequest& request, ::TempoWorld::GetAllComponentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::GetAllComponentsRequest, ::TempoWorld::GetAllComponentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllComponents_, context, request, response);
}

void ActorControlService::Stub::async::GetAllComponents(::grpc::ClientContext* context, const ::TempoWorld::GetAllComponentsRequest* request, ::TempoWorld::GetAllComponentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::GetAllComponentsRequest, ::TempoWorld::GetAllComponentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllComponents_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::GetAllComponents(::grpc::ClientContext* context, const ::TempoWorld::GetAllComponentsRequest* request, ::TempoWorld::GetAllComponentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllComponents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::GetAllComponentsResponse>* ActorControlService::Stub::PrepareAsyncGetAllComponentsRaw(::grpc::ClientContext* context, const ::TempoWorld::GetAllComponentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoWorld::GetAllComponentsResponse, ::TempoWorld::GetAllComponentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllComponents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::GetAllComponentsResponse>* ActorControlService::Stub::AsyncGetAllComponentsRaw(::grpc::ClientContext* context, const ::TempoWorld::GetAllComponentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllComponentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::GetActorProperties(::grpc::ClientContext* context, const ::TempoWorld::GetActorPropertiesRequest& request, ::TempoWorld::GetPropertiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::GetActorPropertiesRequest, ::TempoWorld::GetPropertiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetActorProperties_, context, request, response);
}

void ActorControlService::Stub::async::GetActorProperties(::grpc::ClientContext* context, const ::TempoWorld::GetActorPropertiesRequest* request, ::TempoWorld::GetPropertiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::GetActorPropertiesRequest, ::TempoWorld::GetPropertiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActorProperties_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::GetActorProperties(::grpc::ClientContext* context, const ::TempoWorld::GetActorPropertiesRequest* request, ::TempoWorld::GetPropertiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActorProperties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::GetPropertiesResponse>* ActorControlService::Stub::PrepareAsyncGetActorPropertiesRaw(::grpc::ClientContext* context, const ::TempoWorld::GetActorPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoWorld::GetPropertiesResponse, ::TempoWorld::GetActorPropertiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetActorProperties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::GetPropertiesResponse>* ActorControlService::Stub::AsyncGetActorPropertiesRaw(::grpc::ClientContext* context, const ::TempoWorld::GetActorPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetActorPropertiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::GetComponentProperties(::grpc::ClientContext* context, const ::TempoWorld::GetComponentPropertiesRequest& request, ::TempoWorld::GetPropertiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::GetComponentPropertiesRequest, ::TempoWorld::GetPropertiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetComponentProperties_, context, request, response);
}

void ActorControlService::Stub::async::GetComponentProperties(::grpc::ClientContext* context, const ::TempoWorld::GetComponentPropertiesRequest* request, ::TempoWorld::GetPropertiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::GetComponentPropertiesRequest, ::TempoWorld::GetPropertiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetComponentProperties_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::GetComponentProperties(::grpc::ClientContext* context, const ::TempoWorld::GetComponentPropertiesRequest* request, ::TempoWorld::GetPropertiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetComponentProperties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::GetPropertiesResponse>* ActorControlService::Stub::PrepareAsyncGetComponentPropertiesRaw(::grpc::ClientContext* context, const ::TempoWorld::GetComponentPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoWorld::GetPropertiesResponse, ::TempoWorld::GetComponentPropertiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetComponentProperties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoWorld::GetPropertiesResponse>* ActorControlService::Stub::AsyncGetComponentPropertiesRaw(::grpc::ClientContext* context, const ::TempoWorld::GetComponentPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetComponentPropertiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetBoolProperty(::grpc::ClientContext* context, const ::TempoWorld::SetBoolPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetBoolPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBoolProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetBoolProperty(::grpc::ClientContext* context, const ::TempoWorld::SetBoolPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetBoolPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoolProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetBoolProperty(::grpc::ClientContext* context, const ::TempoWorld::SetBoolPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoolProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetBoolPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetBoolPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetBoolPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBoolProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetBoolPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetBoolPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBoolPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetStringProperty(::grpc::ClientContext* context, const ::TempoWorld::SetStringPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetStringPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetStringProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetStringProperty(::grpc::ClientContext* context, const ::TempoWorld::SetStringPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetStringPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStringProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetStringProperty(::grpc::ClientContext* context, const ::TempoWorld::SetStringPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStringProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetStringPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetStringPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetStringPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetStringProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetStringPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetStringPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetStringPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetEnumProperty(::grpc::ClientContext* context, const ::TempoWorld::SetEnumPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetEnumPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEnumProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetEnumProperty(::grpc::ClientContext* context, const ::TempoWorld::SetEnumPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetEnumPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEnumProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetEnumProperty(::grpc::ClientContext* context, const ::TempoWorld::SetEnumPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEnumProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetEnumPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetEnumPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetEnumPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEnumProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetEnumPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetEnumPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEnumPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetIntProperty(::grpc::ClientContext* context, const ::TempoWorld::SetIntPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetIntPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetIntProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetIntProperty(::grpc::ClientContext* context, const ::TempoWorld::SetIntPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetIntPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIntProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetIntProperty(::grpc::ClientContext* context, const ::TempoWorld::SetIntPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIntProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetIntPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetIntPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetIntPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetIntProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetIntPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetIntPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetIntPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetFloatProperty(::grpc::ClientContext* context, const ::TempoWorld::SetFloatPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetFloatPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetFloatProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetFloatProperty(::grpc::ClientContext* context, const ::TempoWorld::SetFloatPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetFloatPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFloatProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetFloatProperty(::grpc::ClientContext* context, const ::TempoWorld::SetFloatPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFloatProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetFloatPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetFloatPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetFloatPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetFloatProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetFloatPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetFloatPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetFloatPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetVectorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetVectorPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetVectorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetVectorProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetVectorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetVectorPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetVectorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVectorProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetVectorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetVectorPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVectorProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetVectorPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetVectorPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetVectorPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetVectorProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetVectorPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetVectorPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetVectorPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetRotatorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetRotatorPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetRotatorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRotatorProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetRotatorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetRotatorPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetRotatorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRotatorProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetRotatorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetRotatorPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRotatorProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetRotatorPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetRotatorPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetRotatorPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRotatorProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetRotatorPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetRotatorPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRotatorPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetColorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetColorPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetColorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetColorProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetColorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetColorPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetColorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetColorProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetColorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetColorPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetColorProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetColorPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetColorPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetColorPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetColorProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetColorPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetColorPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetColorPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetClassProperty(::grpc::ClientContext* context, const ::TempoWorld::SetClassPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetClassPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetClassProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetClassProperty(::grpc::ClientContext* context, const ::TempoWorld::SetClassPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetClassPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetClassProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetClassProperty(::grpc::ClientContext* context, const ::TempoWorld::SetClassPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetClassProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetClassPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetClassPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetClassPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetClassProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetClassPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetClassPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetClassPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetAssetProperty(::grpc::ClientContext* context, const ::TempoWorld::SetAssetPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetAssetPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAssetProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetAssetProperty(::grpc::ClientContext* context, const ::TempoWorld::SetAssetPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetAssetPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAssetProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetAssetProperty(::grpc::ClientContext* context, const ::TempoWorld::SetAssetPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAssetProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetAssetPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetAssetPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetAssetPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAssetProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetAssetPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetAssetPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAssetPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetActorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetActorPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetActorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetActorProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetActorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetActorPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetActorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetActorProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetActorProperty(::grpc::ClientContext* context, const ::TempoWorld::SetActorPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetActorProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetActorPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetActorPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetActorPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetActorProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetActorPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetActorPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetActorPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetComponentProperty(::grpc::ClientContext* context, const ::TempoWorld::SetComponentPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetComponentPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetComponentProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetComponentProperty(::grpc::ClientContext* context, const ::TempoWorld::SetComponentPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetComponentPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetComponentProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetComponentProperty(::grpc::ClientContext* context, const ::TempoWorld::SetComponentPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetComponentProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetComponentPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetComponentPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetComponentPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetComponentProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetComponentPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetComponentPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetComponentPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetBoolArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetBoolArrayPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetBoolArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBoolArrayProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetBoolArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetBoolArrayPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetBoolArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoolArrayProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetBoolArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetBoolArrayPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoolArrayProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetBoolArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetBoolArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetBoolArrayPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBoolArrayProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetBoolArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetBoolArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBoolArrayPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetStringArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetStringArrayPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetStringArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetStringArrayProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetStringArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetStringArrayPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetStringArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStringArrayProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetStringArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetStringArrayPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStringArrayProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetStringArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetStringArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetStringArrayPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetStringArrayProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetStringArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetStringArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetStringArrayPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetEnumArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetEnumArrayPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetEnumArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEnumArrayProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetEnumArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetEnumArrayPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetEnumArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEnumArrayProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetEnumArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetEnumArrayPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEnumArrayProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetEnumArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetEnumArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetEnumArrayPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEnumArrayProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetEnumArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetEnumArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEnumArrayPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetIntArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetIntArrayPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetIntArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetIntArrayProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetIntArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetIntArrayPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetIntArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIntArrayProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetIntArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetIntArrayPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIntArrayProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetIntArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetIntArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetIntArrayPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetIntArrayProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetIntArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetIntArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetIntArrayPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetFloatArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetFloatArrayPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetFloatArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetFloatArrayProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetFloatArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetFloatArrayPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetFloatArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFloatArrayProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetFloatArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetFloatArrayPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFloatArrayProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetFloatArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetFloatArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetFloatArrayPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetFloatArrayProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetFloatArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetFloatArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetFloatArrayPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetClassArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetClassArrayPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetClassArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetClassArrayProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetClassArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetClassArrayPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetClassArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetClassArrayProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetClassArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetClassArrayPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetClassArrayProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetClassArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetClassArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetClassArrayPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetClassArrayProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetClassArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetClassArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetClassArrayPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetAssetArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetAssetArrayPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetAssetArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAssetArrayProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetAssetArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetAssetArrayPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetAssetArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAssetArrayProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetAssetArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetAssetArrayPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAssetArrayProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetAssetArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetAssetArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetAssetArrayPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAssetArrayProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetAssetArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetAssetArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAssetArrayPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetActorArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetActorArrayPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetActorArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetActorArrayProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetActorArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetActorArrayPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetActorArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetActorArrayProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetActorArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetActorArrayPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetActorArrayProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetActorArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetActorArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetActorArrayPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetActorArrayProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetActorArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetActorArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetActorArrayPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::SetComponentArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetComponentArrayPropertyRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::SetComponentArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetComponentArrayProperty_, context, request, response);
}

void ActorControlService::Stub::async::SetComponentArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetComponentArrayPropertyRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::SetComponentArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetComponentArrayProperty_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::SetComponentArrayProperty(::grpc::ClientContext* context, const ::TempoWorld::SetComponentArrayPropertyRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetComponentArrayProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncSetComponentArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetComponentArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::SetComponentArrayPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetComponentArrayProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncSetComponentArrayPropertyRaw(::grpc::ClientContext* context, const ::TempoWorld::SetComponentArrayPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetComponentArrayPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActorControlService::Stub::CallFunction(::grpc::ClientContext* context, const ::TempoWorld::CallFunctionRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoWorld::CallFunctionRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CallFunction_, context, request, response);
}

void ActorControlService::Stub::async::CallFunction(::grpc::ClientContext* context, const ::TempoWorld::CallFunctionRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoWorld::CallFunctionRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallFunction_, context, request, response, std::move(f));
}

void ActorControlService::Stub::async::CallFunction(::grpc::ClientContext* context, const ::TempoWorld::CallFunctionRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallFunction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::PrepareAsyncCallFunctionRaw(::grpc::ClientContext* context, const ::TempoWorld::CallFunctionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoWorld::CallFunctionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CallFunction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* ActorControlService::Stub::AsyncCallFunctionRaw(::grpc::ClientContext* context, const ::TempoWorld::CallFunctionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallFunctionRaw(context, request, cq);
  result->StartCall();
  return result;
}

ActorControlService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SpawnActorRequest, ::TempoWorld::SpawnActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SpawnActorRequest* req,
             ::TempoWorld::SpawnActorResponse* resp) {
               return service->SpawnActor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::FinishSpawningActorRequest, ::TempoWorld::FinishSpawningActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::FinishSpawningActorRequest* req,
             ::TempoWorld::FinishSpawningActorResponse* resp) {
               return service->FinishSpawningActor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::DestroyActorRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::DestroyActorRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->DestroyActor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::AddComponentRequest, ::TempoWorld::AddComponentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::AddComponentRequest* req,
             ::TempoWorld::AddComponentResponse* resp) {
               return service->AddComponent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::DestroyComponentRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::DestroyComponentRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->DestroyComponent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetActorTransformRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetActorTransformRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetActorTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetComponentTransformRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetComponentTransformRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetComponentTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::ActivateComponentRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::ActivateComponentRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->ActivateComponent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::DeactivateComponentRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::DeactivateComponentRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->DeactivateComponent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::GetAllActorsRequest, ::TempoWorld::GetAllActorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::GetAllActorsRequest* req,
             ::TempoWorld::GetAllActorsResponse* resp) {
               return service->GetAllActors(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::GetAllComponentsRequest, ::TempoWorld::GetAllComponentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::GetAllComponentsRequest* req,
             ::TempoWorld::GetAllComponentsResponse* resp) {
               return service->GetAllComponents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::GetActorPropertiesRequest, ::TempoWorld::GetPropertiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::GetActorPropertiesRequest* req,
             ::TempoWorld::GetPropertiesResponse* resp) {
               return service->GetActorProperties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::GetComponentPropertiesRequest, ::TempoWorld::GetPropertiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::GetComponentPropertiesRequest* req,
             ::TempoWorld::GetPropertiesResponse* resp) {
               return service->GetComponentProperties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetBoolPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetBoolPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetBoolProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetStringPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetStringPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetStringProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetEnumPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetEnumPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetEnumProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetIntPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetIntPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetIntProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetFloatPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetFloatPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetFloatProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetVectorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetVectorPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetVectorProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetRotatorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetRotatorPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetRotatorProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetColorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetColorPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetColorProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetClassPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetClassPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetClassProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetAssetPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetAssetPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetAssetProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetActorPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetActorPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetActorProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetComponentPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetComponentPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetComponentProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetBoolArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetBoolArrayPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetBoolArrayProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetStringArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetStringArrayPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetStringArrayProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetEnumArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetEnumArrayPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetEnumArrayProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetIntArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetIntArrayPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetIntArrayProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetFloatArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetFloatArrayPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetFloatArrayProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetClassArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetClassArrayPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetClassArrayProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetAssetArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetAssetArrayPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetAssetArrayProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetActorArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetActorArrayPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetActorArrayProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::SetComponentArrayPropertyRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::SetComponentArrayPropertyRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetComponentArrayProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorControlService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorControlService::Service, ::TempoWorld::CallFunctionRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActorControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoWorld::CallFunctionRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->CallFunction(ctx, req, resp);
             }, this)));
}

ActorControlService::Service::~Service() {
}

::grpc::Status ActorControlService::Service::SpawnActor(::grpc::ServerContext* context, const ::TempoWorld::SpawnActorRequest* request, ::TempoWorld::SpawnActorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::FinishSpawningActor(::grpc::ServerContext* context, const ::TempoWorld::FinishSpawningActorRequest* request, ::TempoWorld::FinishSpawningActorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::DestroyActor(::grpc::ServerContext* context, const ::TempoWorld::DestroyActorRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::AddComponent(::grpc::ServerContext* context, const ::TempoWorld::AddComponentRequest* request, ::TempoWorld::AddComponentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::DestroyComponent(::grpc::ServerContext* context, const ::TempoWorld::DestroyComponentRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetActorTransform(::grpc::ServerContext* context, const ::TempoWorld::SetActorTransformRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetComponentTransform(::grpc::ServerContext* context, const ::TempoWorld::SetComponentTransformRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::ActivateComponent(::grpc::ServerContext* context, const ::TempoWorld::ActivateComponentRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::DeactivateComponent(::grpc::ServerContext* context, const ::TempoWorld::DeactivateComponentRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::GetAllActors(::grpc::ServerContext* context, const ::TempoWorld::GetAllActorsRequest* request, ::TempoWorld::GetAllActorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::GetAllComponents(::grpc::ServerContext* context, const ::TempoWorld::GetAllComponentsRequest* request, ::TempoWorld::GetAllComponentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::GetActorProperties(::grpc::ServerContext* context, const ::TempoWorld::GetActorPropertiesRequest* request, ::TempoWorld::GetPropertiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::GetComponentProperties(::grpc::ServerContext* context, const ::TempoWorld::GetComponentPropertiesRequest* request, ::TempoWorld::GetPropertiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetBoolProperty(::grpc::ServerContext* context, const ::TempoWorld::SetBoolPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetStringProperty(::grpc::ServerContext* context, const ::TempoWorld::SetStringPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetEnumProperty(::grpc::ServerContext* context, const ::TempoWorld::SetEnumPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetIntProperty(::grpc::ServerContext* context, const ::TempoWorld::SetIntPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetFloatProperty(::grpc::ServerContext* context, const ::TempoWorld::SetFloatPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetVectorProperty(::grpc::ServerContext* context, const ::TempoWorld::SetVectorPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetRotatorProperty(::grpc::ServerContext* context, const ::TempoWorld::SetRotatorPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetColorProperty(::grpc::ServerContext* context, const ::TempoWorld::SetColorPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetClassProperty(::grpc::ServerContext* context, const ::TempoWorld::SetClassPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetAssetProperty(::grpc::ServerContext* context, const ::TempoWorld::SetAssetPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetActorProperty(::grpc::ServerContext* context, const ::TempoWorld::SetActorPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetComponentProperty(::grpc::ServerContext* context, const ::TempoWorld::SetComponentPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetBoolArrayProperty(::grpc::ServerContext* context, const ::TempoWorld::SetBoolArrayPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetStringArrayProperty(::grpc::ServerContext* context, const ::TempoWorld::SetStringArrayPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetEnumArrayProperty(::grpc::ServerContext* context, const ::TempoWorld::SetEnumArrayPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetIntArrayProperty(::grpc::ServerContext* context, const ::TempoWorld::SetIntArrayPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetFloatArrayProperty(::grpc::ServerContext* context, const ::TempoWorld::SetFloatArrayPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetClassArrayProperty(::grpc::ServerContext* context, const ::TempoWorld::SetClassArrayPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetAssetArrayProperty(::grpc::ServerContext* context, const ::TempoWorld::SetAssetArrayPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetActorArrayProperty(::grpc::ServerContext* context, const ::TempoWorld::SetActorArrayPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::SetComponentArrayProperty(::grpc::ServerContext* context, const ::TempoWorld::SetComponentArrayPropertyRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorControlService::Service::CallFunction(::grpc::ServerContext* context, const ::TempoWorld::CallFunctionRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TempoWorld


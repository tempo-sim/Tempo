// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoWorld/ActorControl.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_TempoWorld_2fActorControl_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TempoWorld_2fActorControl_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "TempoScripting/Empty.pb.h"
#include "TempoScripting/Geometry.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TempoWorld_2fActorControl_2eproto TEMPOWORLD_API

namespace google {
namespace protobuf_tempo {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf_tempo
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TEMPOWORLD_API TableStruct_TempoWorld_2fActorControl_2eproto {
  static const ::uint32_t offsets[];
};
TEMPOWORLD_API extern const ::google::protobuf_tempo::internal::DescriptorTable
    descriptor_table_TempoWorld_2fActorControl_2eproto;
namespace TempoWorld {
class ActivateComponentRequest;
struct ActivateComponentRequestDefaultTypeInternal;
TEMPOWORLD_API extern ActivateComponentRequestDefaultTypeInternal _ActivateComponentRequest_default_instance_;
class ActorDescriptor;
struct ActorDescriptorDefaultTypeInternal;
TEMPOWORLD_API extern ActorDescriptorDefaultTypeInternal _ActorDescriptor_default_instance_;
class AddComponentRequest;
struct AddComponentRequestDefaultTypeInternal;
TEMPOWORLD_API extern AddComponentRequestDefaultTypeInternal _AddComponentRequest_default_instance_;
class AddComponentResponse;
struct AddComponentResponseDefaultTypeInternal;
TEMPOWORLD_API extern AddComponentResponseDefaultTypeInternal _AddComponentResponse_default_instance_;
class CallFunctionRequest;
struct CallFunctionRequestDefaultTypeInternal;
TEMPOWORLD_API extern CallFunctionRequestDefaultTypeInternal _CallFunctionRequest_default_instance_;
class ComponentDescriptor;
struct ComponentDescriptorDefaultTypeInternal;
TEMPOWORLD_API extern ComponentDescriptorDefaultTypeInternal _ComponentDescriptor_default_instance_;
class DeactivateComponentRequest;
struct DeactivateComponentRequestDefaultTypeInternal;
TEMPOWORLD_API extern DeactivateComponentRequestDefaultTypeInternal _DeactivateComponentRequest_default_instance_;
class DestroyActorRequest;
struct DestroyActorRequestDefaultTypeInternal;
TEMPOWORLD_API extern DestroyActorRequestDefaultTypeInternal _DestroyActorRequest_default_instance_;
class DestroyComponentRequest;
struct DestroyComponentRequestDefaultTypeInternal;
TEMPOWORLD_API extern DestroyComponentRequestDefaultTypeInternal _DestroyComponentRequest_default_instance_;
class FinishSpawningActorRequest;
struct FinishSpawningActorRequestDefaultTypeInternal;
TEMPOWORLD_API extern FinishSpawningActorRequestDefaultTypeInternal _FinishSpawningActorRequest_default_instance_;
class FinishSpawningActorResponse;
struct FinishSpawningActorResponseDefaultTypeInternal;
TEMPOWORLD_API extern FinishSpawningActorResponseDefaultTypeInternal _FinishSpawningActorResponse_default_instance_;
class GetActorPropertiesRequest;
struct GetActorPropertiesRequestDefaultTypeInternal;
TEMPOWORLD_API extern GetActorPropertiesRequestDefaultTypeInternal _GetActorPropertiesRequest_default_instance_;
class GetAllActorsRequest;
struct GetAllActorsRequestDefaultTypeInternal;
TEMPOWORLD_API extern GetAllActorsRequestDefaultTypeInternal _GetAllActorsRequest_default_instance_;
class GetAllActorsResponse;
struct GetAllActorsResponseDefaultTypeInternal;
TEMPOWORLD_API extern GetAllActorsResponseDefaultTypeInternal _GetAllActorsResponse_default_instance_;
class GetAllComponentsRequest;
struct GetAllComponentsRequestDefaultTypeInternal;
TEMPOWORLD_API extern GetAllComponentsRequestDefaultTypeInternal _GetAllComponentsRequest_default_instance_;
class GetAllComponentsResponse;
struct GetAllComponentsResponseDefaultTypeInternal;
TEMPOWORLD_API extern GetAllComponentsResponseDefaultTypeInternal _GetAllComponentsResponse_default_instance_;
class GetComponentPropertiesRequest;
struct GetComponentPropertiesRequestDefaultTypeInternal;
TEMPOWORLD_API extern GetComponentPropertiesRequestDefaultTypeInternal _GetComponentPropertiesRequest_default_instance_;
class GetPropertiesResponse;
struct GetPropertiesResponseDefaultTypeInternal;
TEMPOWORLD_API extern GetPropertiesResponseDefaultTypeInternal _GetPropertiesResponse_default_instance_;
class PropertyDescriptor;
struct PropertyDescriptorDefaultTypeInternal;
TEMPOWORLD_API extern PropertyDescriptorDefaultTypeInternal _PropertyDescriptor_default_instance_;
class SetActorArrayPropertyRequest;
struct SetActorArrayPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetActorArrayPropertyRequestDefaultTypeInternal _SetActorArrayPropertyRequest_default_instance_;
class SetActorPropertyRequest;
struct SetActorPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetActorPropertyRequestDefaultTypeInternal _SetActorPropertyRequest_default_instance_;
class SetActorTransformRequest;
struct SetActorTransformRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetActorTransformRequestDefaultTypeInternal _SetActorTransformRequest_default_instance_;
class SetAssetArrayPropertyRequest;
struct SetAssetArrayPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetAssetArrayPropertyRequestDefaultTypeInternal _SetAssetArrayPropertyRequest_default_instance_;
class SetAssetPropertyRequest;
struct SetAssetPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetAssetPropertyRequestDefaultTypeInternal _SetAssetPropertyRequest_default_instance_;
class SetBoolArrayPropertyRequest;
struct SetBoolArrayPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetBoolArrayPropertyRequestDefaultTypeInternal _SetBoolArrayPropertyRequest_default_instance_;
class SetBoolPropertyRequest;
struct SetBoolPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetBoolPropertyRequestDefaultTypeInternal _SetBoolPropertyRequest_default_instance_;
class SetClassArrayPropertyRequest;
struct SetClassArrayPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetClassArrayPropertyRequestDefaultTypeInternal _SetClassArrayPropertyRequest_default_instance_;
class SetClassPropertyRequest;
struct SetClassPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetClassPropertyRequestDefaultTypeInternal _SetClassPropertyRequest_default_instance_;
class SetColorPropertyRequest;
struct SetColorPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetColorPropertyRequestDefaultTypeInternal _SetColorPropertyRequest_default_instance_;
class SetComponentArrayPropertyRequest;
struct SetComponentArrayPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetComponentArrayPropertyRequestDefaultTypeInternal _SetComponentArrayPropertyRequest_default_instance_;
class SetComponentPropertyRequest;
struct SetComponentPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetComponentPropertyRequestDefaultTypeInternal _SetComponentPropertyRequest_default_instance_;
class SetComponentTransformRequest;
struct SetComponentTransformRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetComponentTransformRequestDefaultTypeInternal _SetComponentTransformRequest_default_instance_;
class SetEnumArrayPropertyRequest;
struct SetEnumArrayPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetEnumArrayPropertyRequestDefaultTypeInternal _SetEnumArrayPropertyRequest_default_instance_;
class SetEnumPropertyRequest;
struct SetEnumPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetEnumPropertyRequestDefaultTypeInternal _SetEnumPropertyRequest_default_instance_;
class SetFloatArrayPropertyRequest;
struct SetFloatArrayPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetFloatArrayPropertyRequestDefaultTypeInternal _SetFloatArrayPropertyRequest_default_instance_;
class SetFloatPropertyRequest;
struct SetFloatPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetFloatPropertyRequestDefaultTypeInternal _SetFloatPropertyRequest_default_instance_;
class SetIntArrayPropertyRequest;
struct SetIntArrayPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetIntArrayPropertyRequestDefaultTypeInternal _SetIntArrayPropertyRequest_default_instance_;
class SetIntPropertyRequest;
struct SetIntPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetIntPropertyRequestDefaultTypeInternal _SetIntPropertyRequest_default_instance_;
class SetRotatorPropertyRequest;
struct SetRotatorPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetRotatorPropertyRequestDefaultTypeInternal _SetRotatorPropertyRequest_default_instance_;
class SetStringArrayPropertyRequest;
struct SetStringArrayPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetStringArrayPropertyRequestDefaultTypeInternal _SetStringArrayPropertyRequest_default_instance_;
class SetStringPropertyRequest;
struct SetStringPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetStringPropertyRequestDefaultTypeInternal _SetStringPropertyRequest_default_instance_;
class SetVectorPropertyRequest;
struct SetVectorPropertyRequestDefaultTypeInternal;
TEMPOWORLD_API extern SetVectorPropertyRequestDefaultTypeInternal _SetVectorPropertyRequest_default_instance_;
class SpawnActorRequest;
struct SpawnActorRequestDefaultTypeInternal;
TEMPOWORLD_API extern SpawnActorRequestDefaultTypeInternal _SpawnActorRequest_default_instance_;
class SpawnActorResponse;
struct SpawnActorResponseDefaultTypeInternal;
TEMPOWORLD_API extern SpawnActorResponseDefaultTypeInternal _SpawnActorResponse_default_instance_;
}  // namespace TempoWorld
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google

namespace TempoWorld {

// ===================================================================


// -------------------------------------------------------------------

class TEMPOWORLD_API SetVectorPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetVectorPropertyRequest) */ {
 public:
  inline SetVectorPropertyRequest() : SetVectorPropertyRequest(nullptr) {}
  ~SetVectorPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetVectorPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetVectorPropertyRequest(const SetVectorPropertyRequest& from)
      : SetVectorPropertyRequest(nullptr, from) {}
  SetVectorPropertyRequest(SetVectorPropertyRequest&& from) noexcept
    : SetVectorPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetVectorPropertyRequest& operator=(const SetVectorPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVectorPropertyRequest& operator=(SetVectorPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVectorPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVectorPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetVectorPropertyRequest*>(
               &_SetVectorPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SetVectorPropertyRequest& a, SetVectorPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVectorPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVectorPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVectorPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVectorPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetVectorPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetVectorPropertyRequest& from) {
    SetVectorPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetVectorPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetVectorPropertyRequest";
  }
  protected:
  explicit SetVectorPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetVectorPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetVectorPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kZFieldNumber = 6,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // float x = 4;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 5;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 6;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetVectorPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      3, 6, 0,
      66, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    float x_;
    float y_;
    float z_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetStringPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetStringPropertyRequest) */ {
 public:
  inline SetStringPropertyRequest() : SetStringPropertyRequest(nullptr) {}
  ~SetStringPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetStringPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetStringPropertyRequest(const SetStringPropertyRequest& from)
      : SetStringPropertyRequest(nullptr, from) {}
  SetStringPropertyRequest(SetStringPropertyRequest&& from) noexcept
    : SetStringPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetStringPropertyRequest& operator=(const SetStringPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetStringPropertyRequest& operator=(SetStringPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetStringPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetStringPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetStringPropertyRequest*>(
               &_SetStringPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SetStringPropertyRequest& a, SetStringPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetStringPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetStringPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetStringPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetStringPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetStringPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetStringPropertyRequest& from) {
    SetStringPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetStringPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetStringPropertyRequest";
  }
  protected:
  explicit SetStringPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetStringPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetStringPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // string value = 4;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetStringPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      71, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    ::google::protobuf_tempo::internal::ArenaStringPtr value_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetStringArrayPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetStringArrayPropertyRequest) */ {
 public:
  inline SetStringArrayPropertyRequest() : SetStringArrayPropertyRequest(nullptr) {}
  ~SetStringArrayPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetStringArrayPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetStringArrayPropertyRequest(const SetStringArrayPropertyRequest& from)
      : SetStringArrayPropertyRequest(nullptr, from) {}
  SetStringArrayPropertyRequest(SetStringArrayPropertyRequest&& from) noexcept
    : SetStringArrayPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetStringArrayPropertyRequest& operator=(const SetStringArrayPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetStringArrayPropertyRequest& operator=(SetStringArrayPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetStringArrayPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetStringArrayPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetStringArrayPropertyRequest*>(
               &_SetStringArrayPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SetStringArrayPropertyRequest& a, SetStringArrayPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetStringArrayPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetStringArrayPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetStringArrayPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetStringArrayPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetStringArrayPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetStringArrayPropertyRequest& from) {
    SetStringArrayPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetStringArrayPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetStringArrayPropertyRequest";
  }
  protected:
  explicit SetStringArrayPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetStringArrayPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetStringArrayPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
  };
  // repeated string values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, std::size_t size);
  void set_values(int index, absl_tempo::string_view value);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, std::size_t size);
  void add_values(absl_tempo::string_view value);
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetStringArrayPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      77, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField<std::string> values_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetRotatorPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetRotatorPropertyRequest) */ {
 public:
  inline SetRotatorPropertyRequest() : SetRotatorPropertyRequest(nullptr) {}
  ~SetRotatorPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetRotatorPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetRotatorPropertyRequest(const SetRotatorPropertyRequest& from)
      : SetRotatorPropertyRequest(nullptr, from) {}
  SetRotatorPropertyRequest(SetRotatorPropertyRequest&& from) noexcept
    : SetRotatorPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetRotatorPropertyRequest& operator=(const SetRotatorPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRotatorPropertyRequest& operator=(SetRotatorPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRotatorPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRotatorPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetRotatorPropertyRequest*>(
               &_SetRotatorPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SetRotatorPropertyRequest& a, SetRotatorPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRotatorPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRotatorPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRotatorPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRotatorPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetRotatorPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetRotatorPropertyRequest& from) {
    SetRotatorPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetRotatorPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetRotatorPropertyRequest";
  }
  protected:
  explicit SetRotatorPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetRotatorPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetRotatorPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kRFieldNumber = 4,
    kPFieldNumber = 5,
    kYFieldNumber = 6,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // float r = 4;
  void clear_r() ;
  float r() const;
  void set_r(float value);

  private:
  float _internal_r() const;
  void _internal_set_r(float value);

  public:
  // float p = 5;
  void clear_p() ;
  float p() const;
  void set_p(float value);

  private:
  float _internal_p() const;
  void _internal_set_p(float value);

  public:
  // float y = 6;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetRotatorPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      3, 6, 0,
      67, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    float r_;
    float p_;
    float y_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetIntPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetIntPropertyRequest) */ {
 public:
  inline SetIntPropertyRequest() : SetIntPropertyRequest(nullptr) {}
  ~SetIntPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetIntPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetIntPropertyRequest(const SetIntPropertyRequest& from)
      : SetIntPropertyRequest(nullptr, from) {}
  SetIntPropertyRequest(SetIntPropertyRequest&& from) noexcept
    : SetIntPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetIntPropertyRequest& operator=(const SetIntPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIntPropertyRequest& operator=(SetIntPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetIntPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetIntPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetIntPropertyRequest*>(
               &_SetIntPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SetIntPropertyRequest& a, SetIntPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetIntPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIntPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetIntPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetIntPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetIntPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetIntPropertyRequest& from) {
    SetIntPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetIntPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetIntPropertyRequest";
  }
  protected:
  explicit SetIntPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetIntPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetIntPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // int32 value = 4;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetIntPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      63, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    ::int32_t value_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetIntArrayPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetIntArrayPropertyRequest) */ {
 public:
  inline SetIntArrayPropertyRequest() : SetIntArrayPropertyRequest(nullptr) {}
  ~SetIntArrayPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetIntArrayPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetIntArrayPropertyRequest(const SetIntArrayPropertyRequest& from)
      : SetIntArrayPropertyRequest(nullptr, from) {}
  SetIntArrayPropertyRequest(SetIntArrayPropertyRequest&& from) noexcept
    : SetIntArrayPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetIntArrayPropertyRequest& operator=(const SetIntArrayPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIntArrayPropertyRequest& operator=(SetIntArrayPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetIntArrayPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetIntArrayPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetIntArrayPropertyRequest*>(
               &_SetIntArrayPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SetIntArrayPropertyRequest& a, SetIntArrayPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetIntArrayPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIntArrayPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetIntArrayPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetIntArrayPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetIntArrayPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetIntArrayPropertyRequest& from) {
    SetIntArrayPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetIntArrayPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetIntArrayPropertyRequest";
  }
  protected:
  explicit SetIntArrayPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetIntArrayPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetIntArrayPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
  };
  // repeated int32 values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::int32_t values(int index) const;
  void set_values(int index, ::int32_t value);
  void add_values(::int32_t value);
  const ::google::protobuf_tempo::RepeatedField<::int32_t>& values() const;
  ::google::protobuf_tempo::RepeatedField<::int32_t>* mutable_values();

  private:
  const ::google::protobuf_tempo::RepeatedField<::int32_t>& _internal_values() const;
  ::google::protobuf_tempo::RepeatedField<::int32_t>* _internal_mutable_values();

  public:
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetIntArrayPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedField<::int32_t> values_;
    mutable ::google::protobuf_tempo::internal::CachedSize _values_cached_byte_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetFloatPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetFloatPropertyRequest) */ {
 public:
  inline SetFloatPropertyRequest() : SetFloatPropertyRequest(nullptr) {}
  ~SetFloatPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetFloatPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetFloatPropertyRequest(const SetFloatPropertyRequest& from)
      : SetFloatPropertyRequest(nullptr, from) {}
  SetFloatPropertyRequest(SetFloatPropertyRequest&& from) noexcept
    : SetFloatPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetFloatPropertyRequest& operator=(const SetFloatPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFloatPropertyRequest& operator=(SetFloatPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetFloatPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetFloatPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetFloatPropertyRequest*>(
               &_SetFloatPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SetFloatPropertyRequest& a, SetFloatPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetFloatPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetFloatPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetFloatPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetFloatPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetFloatPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetFloatPropertyRequest& from) {
    SetFloatPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetFloatPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetFloatPropertyRequest";
  }
  protected:
  explicit SetFloatPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetFloatPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetFloatPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // float value = 4;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetFloatPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    float value_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetFloatArrayPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetFloatArrayPropertyRequest) */ {
 public:
  inline SetFloatArrayPropertyRequest() : SetFloatArrayPropertyRequest(nullptr) {}
  ~SetFloatArrayPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetFloatArrayPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetFloatArrayPropertyRequest(const SetFloatArrayPropertyRequest& from)
      : SetFloatArrayPropertyRequest(nullptr, from) {}
  SetFloatArrayPropertyRequest(SetFloatArrayPropertyRequest&& from) noexcept
    : SetFloatArrayPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetFloatArrayPropertyRequest& operator=(const SetFloatArrayPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFloatArrayPropertyRequest& operator=(SetFloatArrayPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetFloatArrayPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetFloatArrayPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetFloatArrayPropertyRequest*>(
               &_SetFloatArrayPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SetFloatArrayPropertyRequest& a, SetFloatArrayPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetFloatArrayPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetFloatArrayPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetFloatArrayPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetFloatArrayPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetFloatArrayPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetFloatArrayPropertyRequest& from) {
    SetFloatArrayPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetFloatArrayPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetFloatArrayPropertyRequest";
  }
  protected:
  explicit SetFloatArrayPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetFloatArrayPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetFloatArrayPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
  };
  // repeated float values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::google::protobuf_tempo::RepeatedField<float>& values() const;
  ::google::protobuf_tempo::RepeatedField<float>* mutable_values();

  private:
  const ::google::protobuf_tempo::RepeatedField<float>& _internal_values() const;
  ::google::protobuf_tempo::RepeatedField<float>* _internal_mutable_values();

  public:
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetFloatArrayPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      70, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedField<float> values_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetEnumPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetEnumPropertyRequest) */ {
 public:
  inline SetEnumPropertyRequest() : SetEnumPropertyRequest(nullptr) {}
  ~SetEnumPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetEnumPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetEnumPropertyRequest(const SetEnumPropertyRequest& from)
      : SetEnumPropertyRequest(nullptr, from) {}
  SetEnumPropertyRequest(SetEnumPropertyRequest&& from) noexcept
    : SetEnumPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetEnumPropertyRequest& operator=(const SetEnumPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEnumPropertyRequest& operator=(SetEnumPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetEnumPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEnumPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetEnumPropertyRequest*>(
               &_SetEnumPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SetEnumPropertyRequest& a, SetEnumPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEnumPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEnumPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEnumPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetEnumPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetEnumPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetEnumPropertyRequest& from) {
    SetEnumPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetEnumPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetEnumPropertyRequest";
  }
  protected:
  explicit SetEnumPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetEnumPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetEnumPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // string value = 4;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetEnumPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      69, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    ::google::protobuf_tempo::internal::ArenaStringPtr value_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetEnumArrayPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetEnumArrayPropertyRequest) */ {
 public:
  inline SetEnumArrayPropertyRequest() : SetEnumArrayPropertyRequest(nullptr) {}
  ~SetEnumArrayPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetEnumArrayPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetEnumArrayPropertyRequest(const SetEnumArrayPropertyRequest& from)
      : SetEnumArrayPropertyRequest(nullptr, from) {}
  SetEnumArrayPropertyRequest(SetEnumArrayPropertyRequest&& from) noexcept
    : SetEnumArrayPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetEnumArrayPropertyRequest& operator=(const SetEnumArrayPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEnumArrayPropertyRequest& operator=(SetEnumArrayPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetEnumArrayPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEnumArrayPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetEnumArrayPropertyRequest*>(
               &_SetEnumArrayPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SetEnumArrayPropertyRequest& a, SetEnumArrayPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEnumArrayPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEnumArrayPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEnumArrayPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetEnumArrayPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetEnumArrayPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetEnumArrayPropertyRequest& from) {
    SetEnumArrayPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetEnumArrayPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetEnumArrayPropertyRequest";
  }
  protected:
  explicit SetEnumArrayPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetEnumArrayPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetEnumArrayPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
  };
  // repeated string values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, std::size_t size);
  void set_values(int index, absl_tempo::string_view value);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, std::size_t size);
  void add_values(absl_tempo::string_view value);
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetEnumArrayPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      75, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField<std::string> values_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetComponentPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetComponentPropertyRequest) */ {
 public:
  inline SetComponentPropertyRequest() : SetComponentPropertyRequest(nullptr) {}
  ~SetComponentPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetComponentPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetComponentPropertyRequest(const SetComponentPropertyRequest& from)
      : SetComponentPropertyRequest(nullptr, from) {}
  SetComponentPropertyRequest(SetComponentPropertyRequest&& from) noexcept
    : SetComponentPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetComponentPropertyRequest& operator=(const SetComponentPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetComponentPropertyRequest& operator=(SetComponentPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetComponentPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetComponentPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetComponentPropertyRequest*>(
               &_SetComponentPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SetComponentPropertyRequest& a, SetComponentPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetComponentPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetComponentPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetComponentPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetComponentPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetComponentPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetComponentPropertyRequest& from) {
    SetComponentPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetComponentPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetComponentPropertyRequest";
  }
  protected:
  explicit SetComponentPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetComponentPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetComponentPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // string value = 4;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetComponentPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      74, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    ::google::protobuf_tempo::internal::ArenaStringPtr value_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetComponentArrayPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetComponentArrayPropertyRequest) */ {
 public:
  inline SetComponentArrayPropertyRequest() : SetComponentArrayPropertyRequest(nullptr) {}
  ~SetComponentArrayPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetComponentArrayPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetComponentArrayPropertyRequest(const SetComponentArrayPropertyRequest& from)
      : SetComponentArrayPropertyRequest(nullptr, from) {}
  SetComponentArrayPropertyRequest(SetComponentArrayPropertyRequest&& from) noexcept
    : SetComponentArrayPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetComponentArrayPropertyRequest& operator=(const SetComponentArrayPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetComponentArrayPropertyRequest& operator=(SetComponentArrayPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetComponentArrayPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetComponentArrayPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetComponentArrayPropertyRequest*>(
               &_SetComponentArrayPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SetComponentArrayPropertyRequest& a, SetComponentArrayPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetComponentArrayPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetComponentArrayPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetComponentArrayPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetComponentArrayPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetComponentArrayPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetComponentArrayPropertyRequest& from) {
    SetComponentArrayPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetComponentArrayPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetComponentArrayPropertyRequest";
  }
  protected:
  explicit SetComponentArrayPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetComponentArrayPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetComponentArrayPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
  };
  // repeated string values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, std::size_t size);
  void set_values(int index, absl_tempo::string_view value);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, std::size_t size);
  void add_values(absl_tempo::string_view value);
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetComponentArrayPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      80, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField<std::string> values_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetColorPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetColorPropertyRequest) */ {
 public:
  inline SetColorPropertyRequest() : SetColorPropertyRequest(nullptr) {}
  ~SetColorPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetColorPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetColorPropertyRequest(const SetColorPropertyRequest& from)
      : SetColorPropertyRequest(nullptr, from) {}
  SetColorPropertyRequest(SetColorPropertyRequest&& from) noexcept
    : SetColorPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetColorPropertyRequest& operator=(const SetColorPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetColorPropertyRequest& operator=(SetColorPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetColorPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetColorPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetColorPropertyRequest*>(
               &_SetColorPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SetColorPropertyRequest& a, SetColorPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetColorPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetColorPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetColorPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetColorPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetColorPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetColorPropertyRequest& from) {
    SetColorPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetColorPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetColorPropertyRequest";
  }
  protected:
  explicit SetColorPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetColorPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetColorPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kRFieldNumber = 4,
    kGFieldNumber = 5,
    kBFieldNumber = 6,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // int32 r = 4;
  void clear_r() ;
  ::int32_t r() const;
  void set_r(::int32_t value);

  private:
  ::int32_t _internal_r() const;
  void _internal_set_r(::int32_t value);

  public:
  // int32 g = 5;
  void clear_g() ;
  ::int32_t g() const;
  void set_g(::int32_t value);

  private:
  ::int32_t _internal_g() const;
  void _internal_set_g(::int32_t value);

  public:
  // int32 b = 6;
  void clear_b() ;
  ::int32_t b() const;
  void set_b(::int32_t value);

  private:
  ::int32_t _internal_b() const;
  void _internal_set_b(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetColorPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      3, 6, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    ::int32_t r_;
    ::int32_t g_;
    ::int32_t b_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetClassPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetClassPropertyRequest) */ {
 public:
  inline SetClassPropertyRequest() : SetClassPropertyRequest(nullptr) {}
  ~SetClassPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetClassPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetClassPropertyRequest(const SetClassPropertyRequest& from)
      : SetClassPropertyRequest(nullptr, from) {}
  SetClassPropertyRequest(SetClassPropertyRequest&& from) noexcept
    : SetClassPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetClassPropertyRequest& operator=(const SetClassPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetClassPropertyRequest& operator=(SetClassPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetClassPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetClassPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetClassPropertyRequest*>(
               &_SetClassPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SetClassPropertyRequest& a, SetClassPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetClassPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetClassPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetClassPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetClassPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetClassPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetClassPropertyRequest& from) {
    SetClassPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetClassPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetClassPropertyRequest";
  }
  protected:
  explicit SetClassPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetClassPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetClassPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // string value = 4;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetClassPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      70, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    ::google::protobuf_tempo::internal::ArenaStringPtr value_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetClassArrayPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetClassArrayPropertyRequest) */ {
 public:
  inline SetClassArrayPropertyRequest() : SetClassArrayPropertyRequest(nullptr) {}
  ~SetClassArrayPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetClassArrayPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetClassArrayPropertyRequest(const SetClassArrayPropertyRequest& from)
      : SetClassArrayPropertyRequest(nullptr, from) {}
  SetClassArrayPropertyRequest(SetClassArrayPropertyRequest&& from) noexcept
    : SetClassArrayPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetClassArrayPropertyRequest& operator=(const SetClassArrayPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetClassArrayPropertyRequest& operator=(SetClassArrayPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetClassArrayPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetClassArrayPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetClassArrayPropertyRequest*>(
               &_SetClassArrayPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SetClassArrayPropertyRequest& a, SetClassArrayPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetClassArrayPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetClassArrayPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetClassArrayPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetClassArrayPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetClassArrayPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetClassArrayPropertyRequest& from) {
    SetClassArrayPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetClassArrayPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetClassArrayPropertyRequest";
  }
  protected:
  explicit SetClassArrayPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetClassArrayPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetClassArrayPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
  };
  // repeated string values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, std::size_t size);
  void set_values(int index, absl_tempo::string_view value);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, std::size_t size);
  void add_values(absl_tempo::string_view value);
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetClassArrayPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      76, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField<std::string> values_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetBoolPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetBoolPropertyRequest) */ {
 public:
  inline SetBoolPropertyRequest() : SetBoolPropertyRequest(nullptr) {}
  ~SetBoolPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetBoolPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetBoolPropertyRequest(const SetBoolPropertyRequest& from)
      : SetBoolPropertyRequest(nullptr, from) {}
  SetBoolPropertyRequest(SetBoolPropertyRequest&& from) noexcept
    : SetBoolPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetBoolPropertyRequest& operator=(const SetBoolPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBoolPropertyRequest& operator=(SetBoolPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBoolPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBoolPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetBoolPropertyRequest*>(
               &_SetBoolPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetBoolPropertyRequest& a, SetBoolPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBoolPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBoolPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBoolPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBoolPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetBoolPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetBoolPropertyRequest& from) {
    SetBoolPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetBoolPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetBoolPropertyRequest";
  }
  protected:
  explicit SetBoolPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetBoolPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetBoolPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // bool value = 4;
  void clear_value() ;
  bool value() const;
  void set_value(bool value);

  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetBoolPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      64, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    bool value_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetBoolArrayPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetBoolArrayPropertyRequest) */ {
 public:
  inline SetBoolArrayPropertyRequest() : SetBoolArrayPropertyRequest(nullptr) {}
  ~SetBoolArrayPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetBoolArrayPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetBoolArrayPropertyRequest(const SetBoolArrayPropertyRequest& from)
      : SetBoolArrayPropertyRequest(nullptr, from) {}
  SetBoolArrayPropertyRequest(SetBoolArrayPropertyRequest&& from) noexcept
    : SetBoolArrayPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetBoolArrayPropertyRequest& operator=(const SetBoolArrayPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBoolArrayPropertyRequest& operator=(SetBoolArrayPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBoolArrayPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBoolArrayPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetBoolArrayPropertyRequest*>(
               &_SetBoolArrayPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SetBoolArrayPropertyRequest& a, SetBoolArrayPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBoolArrayPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBoolArrayPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBoolArrayPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBoolArrayPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetBoolArrayPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetBoolArrayPropertyRequest& from) {
    SetBoolArrayPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetBoolArrayPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetBoolArrayPropertyRequest";
  }
  protected:
  explicit SetBoolArrayPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetBoolArrayPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetBoolArrayPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
  };
  // repeated bool values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  bool values(int index) const;
  void set_values(int index, bool value);
  void add_values(bool value);
  const ::google::protobuf_tempo::RepeatedField<bool>& values() const;
  ::google::protobuf_tempo::RepeatedField<bool>* mutable_values();

  private:
  const ::google::protobuf_tempo::RepeatedField<bool>& _internal_values() const;
  ::google::protobuf_tempo::RepeatedField<bool>* _internal_mutable_values();

  public:
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetBoolArrayPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      69, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedField<bool> values_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetAssetPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetAssetPropertyRequest) */ {
 public:
  inline SetAssetPropertyRequest() : SetAssetPropertyRequest(nullptr) {}
  ~SetAssetPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetAssetPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetAssetPropertyRequest(const SetAssetPropertyRequest& from)
      : SetAssetPropertyRequest(nullptr, from) {}
  SetAssetPropertyRequest(SetAssetPropertyRequest&& from) noexcept
    : SetAssetPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetAssetPropertyRequest& operator=(const SetAssetPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAssetPropertyRequest& operator=(SetAssetPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAssetPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAssetPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetAssetPropertyRequest*>(
               &_SetAssetPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SetAssetPropertyRequest& a, SetAssetPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAssetPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAssetPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAssetPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAssetPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetAssetPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetAssetPropertyRequest& from) {
    SetAssetPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetAssetPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetAssetPropertyRequest";
  }
  protected:
  explicit SetAssetPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetAssetPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetAssetPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // string value = 4;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetAssetPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      70, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    ::google::protobuf_tempo::internal::ArenaStringPtr value_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetAssetArrayPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetAssetArrayPropertyRequest) */ {
 public:
  inline SetAssetArrayPropertyRequest() : SetAssetArrayPropertyRequest(nullptr) {}
  ~SetAssetArrayPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetAssetArrayPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetAssetArrayPropertyRequest(const SetAssetArrayPropertyRequest& from)
      : SetAssetArrayPropertyRequest(nullptr, from) {}
  SetAssetArrayPropertyRequest(SetAssetArrayPropertyRequest&& from) noexcept
    : SetAssetArrayPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetAssetArrayPropertyRequest& operator=(const SetAssetArrayPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAssetArrayPropertyRequest& operator=(SetAssetArrayPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAssetArrayPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAssetArrayPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetAssetArrayPropertyRequest*>(
               &_SetAssetArrayPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SetAssetArrayPropertyRequest& a, SetAssetArrayPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAssetArrayPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAssetArrayPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAssetArrayPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAssetArrayPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetAssetArrayPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetAssetArrayPropertyRequest& from) {
    SetAssetArrayPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetAssetArrayPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetAssetArrayPropertyRequest";
  }
  protected:
  explicit SetAssetArrayPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetAssetArrayPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetAssetArrayPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
  };
  // repeated string values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, std::size_t size);
  void set_values(int index, absl_tempo::string_view value);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, std::size_t size);
  void add_values(absl_tempo::string_view value);
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetAssetArrayPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      76, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField<std::string> values_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetActorPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetActorPropertyRequest) */ {
 public:
  inline SetActorPropertyRequest() : SetActorPropertyRequest(nullptr) {}
  ~SetActorPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetActorPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetActorPropertyRequest(const SetActorPropertyRequest& from)
      : SetActorPropertyRequest(nullptr, from) {}
  SetActorPropertyRequest(SetActorPropertyRequest&& from) noexcept
    : SetActorPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetActorPropertyRequest& operator=(const SetActorPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActorPropertyRequest& operator=(SetActorPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetActorPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetActorPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetActorPropertyRequest*>(
               &_SetActorPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SetActorPropertyRequest& a, SetActorPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActorPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActorPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetActorPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetActorPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetActorPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetActorPropertyRequest& from) {
    SetActorPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetActorPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetActorPropertyRequest";
  }
  protected:
  explicit SetActorPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetActorPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetActorPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // string value = 4;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetActorPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      70, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    ::google::protobuf_tempo::internal::ArenaStringPtr value_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetActorArrayPropertyRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetActorArrayPropertyRequest) */ {
 public:
  inline SetActorArrayPropertyRequest() : SetActorArrayPropertyRequest(nullptr) {}
  ~SetActorArrayPropertyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetActorArrayPropertyRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetActorArrayPropertyRequest(const SetActorArrayPropertyRequest& from)
      : SetActorArrayPropertyRequest(nullptr, from) {}
  SetActorArrayPropertyRequest(SetActorArrayPropertyRequest&& from) noexcept
    : SetActorArrayPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetActorArrayPropertyRequest& operator=(const SetActorArrayPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActorArrayPropertyRequest& operator=(SetActorArrayPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetActorArrayPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetActorArrayPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetActorArrayPropertyRequest*>(
               &_SetActorArrayPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SetActorArrayPropertyRequest& a, SetActorArrayPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActorArrayPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActorArrayPropertyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetActorArrayPropertyRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetActorArrayPropertyRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetActorArrayPropertyRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetActorArrayPropertyRequest& from) {
    SetActorArrayPropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetActorArrayPropertyRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetActorArrayPropertyRequest";
  }
  protected:
  explicit SetActorArrayPropertyRequest(::google::protobuf_tempo::Arena* arena);
  SetActorArrayPropertyRequest(::google::protobuf_tempo::Arena* arena, const SetActorArrayPropertyRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPropertyFieldNumber = 3,
  };
  // repeated string values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, std::size_t size);
  void set_values(int index, absl_tempo::string_view value);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, std::size_t size);
  void add_values(absl_tempo::string_view value);
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf_tempo::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf_tempo::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string property = 3;
  void clear_property() ;
  const std::string& property() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property(Arg_&& arg, Args_... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* value);

  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(
      const std::string& value);
  std::string* _internal_mutable_property();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetActorArrayPropertyRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 0,
      76, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField<std::string> values_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr property_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API PropertyDescriptor final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.PropertyDescriptor) */ {
 public:
  inline PropertyDescriptor() : PropertyDescriptor(nullptr) {}
  ~PropertyDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PropertyDescriptor(::google::protobuf_tempo::internal::ConstantInitialized);

  inline PropertyDescriptor(const PropertyDescriptor& from)
      : PropertyDescriptor(nullptr, from) {}
  PropertyDescriptor(PropertyDescriptor&& from) noexcept
    : PropertyDescriptor() {
    *this = ::std::move(from);
  }

  inline PropertyDescriptor& operator=(const PropertyDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyDescriptor& operator=(PropertyDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyDescriptor* internal_default_instance() {
    return reinterpret_cast<const PropertyDescriptor*>(
               &_PropertyDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PropertyDescriptor& a, PropertyDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyDescriptor* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyDescriptor>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const PropertyDescriptor& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const PropertyDescriptor& from) {
    PropertyDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(PropertyDescriptor* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.PropertyDescriptor";
  }
  protected:
  explicit PropertyDescriptor(::google::protobuf_tempo::Arena* arena);
  PropertyDescriptor(::google::protobuf_tempo::Arena* arena, const PropertyDescriptor& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kNameFieldNumber = 3,
    kTypeFieldNumber = 4,
    kValueFieldNumber = 5,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string type = 4;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string value = 5;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.PropertyDescriptor)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      3, 5, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr name_;
    ::google::protobuf_tempo::internal::ArenaStringPtr type_;
    ::google::protobuf_tempo::internal::ArenaStringPtr value_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API GetComponentPropertiesRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.GetComponentPropertiesRequest) */ {
 public:
  inline GetComponentPropertiesRequest() : GetComponentPropertiesRequest(nullptr) {}
  ~GetComponentPropertiesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetComponentPropertiesRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline GetComponentPropertiesRequest(const GetComponentPropertiesRequest& from)
      : GetComponentPropertiesRequest(nullptr, from) {}
  GetComponentPropertiesRequest(GetComponentPropertiesRequest&& from) noexcept
    : GetComponentPropertiesRequest() {
    *this = ::std::move(from);
  }

  inline GetComponentPropertiesRequest& operator=(const GetComponentPropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetComponentPropertiesRequest& operator=(GetComponentPropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetComponentPropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetComponentPropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetComponentPropertiesRequest*>(
               &_GetComponentPropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetComponentPropertiesRequest& a, GetComponentPropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetComponentPropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetComponentPropertiesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetComponentPropertiesRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetComponentPropertiesRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const GetComponentPropertiesRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const GetComponentPropertiesRequest& from) {
    GetComponentPropertiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetComponentPropertiesRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.GetComponentPropertiesRequest";
  }
  protected:
  explicit GetComponentPropertiesRequest(::google::protobuf_tempo::Arena* arena);
  GetComponentPropertiesRequest(::google::protobuf_tempo::Arena* arena, const GetComponentPropertiesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.GetComponentPropertiesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API GetAllComponentsRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.GetAllComponentsRequest) */ {
 public:
  inline GetAllComponentsRequest() : GetAllComponentsRequest(nullptr) {}
  ~GetAllComponentsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAllComponentsRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline GetAllComponentsRequest(const GetAllComponentsRequest& from)
      : GetAllComponentsRequest(nullptr, from) {}
  GetAllComponentsRequest(GetAllComponentsRequest&& from) noexcept
    : GetAllComponentsRequest() {
    *this = ::std::move(from);
  }

  inline GetAllComponentsRequest& operator=(const GetAllComponentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllComponentsRequest& operator=(GetAllComponentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllComponentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllComponentsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllComponentsRequest*>(
               &_GetAllComponentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetAllComponentsRequest& a, GetAllComponentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllComponentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllComponentsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllComponentsRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllComponentsRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const GetAllComponentsRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const GetAllComponentsRequest& from) {
    GetAllComponentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAllComponentsRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.GetAllComponentsRequest";
  }
  protected:
  explicit GetAllComponentsRequest(::google::protobuf_tempo::Arena* arena);
  GetAllComponentsRequest(::google::protobuf_tempo::Arena* arena, const GetAllComponentsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.GetAllComponentsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API GetAllActorsRequest final :
    public ::google::protobuf_tempo::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TempoWorld.GetAllActorsRequest) */ {
 public:
  inline GetAllActorsRequest() : GetAllActorsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAllActorsRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline GetAllActorsRequest(const GetAllActorsRequest& from)
      : GetAllActorsRequest(nullptr, from) {}
  GetAllActorsRequest(GetAllActorsRequest&& from) noexcept
    : GetAllActorsRequest() {
    *this = ::std::move(from);
  }

  inline GetAllActorsRequest& operator=(const GetAllActorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllActorsRequest& operator=(GetAllActorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllActorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllActorsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllActorsRequest*>(
               &_GetAllActorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetAllActorsRequest& a, GetAllActorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllActorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllActorsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllActorsRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllActorsRequest>(arena);
  }
  using ::google::protobuf_tempo::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetAllActorsRequest& from) {
    ::google::protobuf_tempo::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf_tempo::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetAllActorsRequest& from) {
    ::google::protobuf_tempo::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.GetAllActorsRequest";
  }
  protected:
  explicit GetAllActorsRequest(::google::protobuf_tempo::Arena* arena);
  GetAllActorsRequest(::google::protobuf_tempo::Arena* arena, const GetAllActorsRequest& from);
  public:

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TempoWorld.GetAllActorsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API GetActorPropertiesRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.GetActorPropertiesRequest) */ {
 public:
  inline GetActorPropertiesRequest() : GetActorPropertiesRequest(nullptr) {}
  ~GetActorPropertiesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetActorPropertiesRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline GetActorPropertiesRequest(const GetActorPropertiesRequest& from)
      : GetActorPropertiesRequest(nullptr, from) {}
  GetActorPropertiesRequest(GetActorPropertiesRequest&& from) noexcept
    : GetActorPropertiesRequest() {
    *this = ::std::move(from);
  }

  inline GetActorPropertiesRequest& operator=(const GetActorPropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActorPropertiesRequest& operator=(GetActorPropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetActorPropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActorPropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetActorPropertiesRequest*>(
               &_GetActorPropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetActorPropertiesRequest& a, GetActorPropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActorPropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActorPropertiesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetActorPropertiesRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetActorPropertiesRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const GetActorPropertiesRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const GetActorPropertiesRequest& from) {
    GetActorPropertiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetActorPropertiesRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.GetActorPropertiesRequest";
  }
  protected:
  explicit GetActorPropertiesRequest(::google::protobuf_tempo::Arena* arena);
  GetActorPropertiesRequest(::google::protobuf_tempo::Arena* arena, const GetActorPropertiesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kIncludeComponentsFieldNumber = 2,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // bool include_components = 2;
  void clear_include_components() ;
  bool include_components() const;
  void set_include_components(bool value);

  private:
  bool _internal_include_components() const;
  void _internal_set_include_components(bool value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.GetActorPropertiesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    bool include_components_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API FinishSpawningActorRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.FinishSpawningActorRequest) */ {
 public:
  inline FinishSpawningActorRequest() : FinishSpawningActorRequest(nullptr) {}
  ~FinishSpawningActorRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FinishSpawningActorRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline FinishSpawningActorRequest(const FinishSpawningActorRequest& from)
      : FinishSpawningActorRequest(nullptr, from) {}
  FinishSpawningActorRequest(FinishSpawningActorRequest&& from) noexcept
    : FinishSpawningActorRequest() {
    *this = ::std::move(from);
  }

  inline FinishSpawningActorRequest& operator=(const FinishSpawningActorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinishSpawningActorRequest& operator=(FinishSpawningActorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FinishSpawningActorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinishSpawningActorRequest* internal_default_instance() {
    return reinterpret_cast<const FinishSpawningActorRequest*>(
               &_FinishSpawningActorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FinishSpawningActorRequest& a, FinishSpawningActorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FinishSpawningActorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinishSpawningActorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FinishSpawningActorRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FinishSpawningActorRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const FinishSpawningActorRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const FinishSpawningActorRequest& from) {
    FinishSpawningActorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(FinishSpawningActorRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.FinishSpawningActorRequest";
  }
  protected:
  explicit FinishSpawningActorRequest(::google::protobuf_tempo::Arena* arena);
  FinishSpawningActorRequest(::google::protobuf_tempo::Arena* arena, const FinishSpawningActorRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.FinishSpawningActorRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API DestroyComponentRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.DestroyComponentRequest) */ {
 public:
  inline DestroyComponentRequest() : DestroyComponentRequest(nullptr) {}
  ~DestroyComponentRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DestroyComponentRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline DestroyComponentRequest(const DestroyComponentRequest& from)
      : DestroyComponentRequest(nullptr, from) {}
  DestroyComponentRequest(DestroyComponentRequest&& from) noexcept
    : DestroyComponentRequest() {
    *this = ::std::move(from);
  }

  inline DestroyComponentRequest& operator=(const DestroyComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyComponentRequest& operator=(DestroyComponentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestroyComponentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyComponentRequest* internal_default_instance() {
    return reinterpret_cast<const DestroyComponentRequest*>(
               &_DestroyComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DestroyComponentRequest& a, DestroyComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyComponentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyComponentRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyComponentRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyComponentRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const DestroyComponentRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const DestroyComponentRequest& from) {
    DestroyComponentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(DestroyComponentRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.DestroyComponentRequest";
  }
  protected:
  explicit DestroyComponentRequest(::google::protobuf_tempo::Arena* arena);
  DestroyComponentRequest(::google::protobuf_tempo::Arena* arena, const DestroyComponentRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.DestroyComponentRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API DestroyActorRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.DestroyActorRequest) */ {
 public:
  inline DestroyActorRequest() : DestroyActorRequest(nullptr) {}
  ~DestroyActorRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DestroyActorRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline DestroyActorRequest(const DestroyActorRequest& from)
      : DestroyActorRequest(nullptr, from) {}
  DestroyActorRequest(DestroyActorRequest&& from) noexcept
    : DestroyActorRequest() {
    *this = ::std::move(from);
  }

  inline DestroyActorRequest& operator=(const DestroyActorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyActorRequest& operator=(DestroyActorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestroyActorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyActorRequest* internal_default_instance() {
    return reinterpret_cast<const DestroyActorRequest*>(
               &_DestroyActorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DestroyActorRequest& a, DestroyActorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyActorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyActorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyActorRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyActorRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const DestroyActorRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const DestroyActorRequest& from) {
    DestroyActorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(DestroyActorRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.DestroyActorRequest";
  }
  protected:
  explicit DestroyActorRequest(::google::protobuf_tempo::Arena* arena);
  DestroyActorRequest(::google::protobuf_tempo::Arena* arena, const DestroyActorRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.DestroyActorRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API DeactivateComponentRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.DeactivateComponentRequest) */ {
 public:
  inline DeactivateComponentRequest() : DeactivateComponentRequest(nullptr) {}
  ~DeactivateComponentRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeactivateComponentRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline DeactivateComponentRequest(const DeactivateComponentRequest& from)
      : DeactivateComponentRequest(nullptr, from) {}
  DeactivateComponentRequest(DeactivateComponentRequest&& from) noexcept
    : DeactivateComponentRequest() {
    *this = ::std::move(from);
  }

  inline DeactivateComponentRequest& operator=(const DeactivateComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeactivateComponentRequest& operator=(DeactivateComponentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeactivateComponentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeactivateComponentRequest* internal_default_instance() {
    return reinterpret_cast<const DeactivateComponentRequest*>(
               &_DeactivateComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeactivateComponentRequest& a, DeactivateComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeactivateComponentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeactivateComponentRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeactivateComponentRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeactivateComponentRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const DeactivateComponentRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const DeactivateComponentRequest& from) {
    DeactivateComponentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeactivateComponentRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.DeactivateComponentRequest";
  }
  protected:
  explicit DeactivateComponentRequest(::google::protobuf_tempo::Arena* arena);
  DeactivateComponentRequest(::google::protobuf_tempo::Arena* arena, const DeactivateComponentRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.DeactivateComponentRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API ComponentDescriptor final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.ComponentDescriptor) */ {
 public:
  inline ComponentDescriptor() : ComponentDescriptor(nullptr) {}
  ~ComponentDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ComponentDescriptor(::google::protobuf_tempo::internal::ConstantInitialized);

  inline ComponentDescriptor(const ComponentDescriptor& from)
      : ComponentDescriptor(nullptr, from) {}
  ComponentDescriptor(ComponentDescriptor&& from) noexcept
    : ComponentDescriptor() {
    *this = ::std::move(from);
  }

  inline ComponentDescriptor& operator=(const ComponentDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentDescriptor& operator=(ComponentDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentDescriptor* internal_default_instance() {
    return reinterpret_cast<const ComponentDescriptor*>(
               &_ComponentDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ComponentDescriptor& a, ComponentDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentDescriptor* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentDescriptor>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const ComponentDescriptor& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const ComponentDescriptor& from) {
    ComponentDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(ComponentDescriptor* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.ComponentDescriptor";
  }
  protected:
  explicit ComponentDescriptor(::google::protobuf_tempo::Arena* arena);
  ComponentDescriptor(::google::protobuf_tempo::Arena* arena, const ComponentDescriptor& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string type = 3;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.ComponentDescriptor)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr name_;
    ::google::protobuf_tempo::internal::ArenaStringPtr type_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API CallFunctionRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.CallFunctionRequest) */ {
 public:
  inline CallFunctionRequest() : CallFunctionRequest(nullptr) {}
  ~CallFunctionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CallFunctionRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline CallFunctionRequest(const CallFunctionRequest& from)
      : CallFunctionRequest(nullptr, from) {}
  CallFunctionRequest(CallFunctionRequest&& from) noexcept
    : CallFunctionRequest() {
    *this = ::std::move(from);
  }

  inline CallFunctionRequest& operator=(const CallFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallFunctionRequest& operator=(CallFunctionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallFunctionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const CallFunctionRequest*>(
               &_CallFunctionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CallFunctionRequest& a, CallFunctionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CallFunctionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallFunctionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallFunctionRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallFunctionRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const CallFunctionRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const CallFunctionRequest& from) {
    CallFunctionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(CallFunctionRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.CallFunctionRequest";
  }
  protected:
  explicit CallFunctionRequest(::google::protobuf_tempo::Arena* arena);
  CallFunctionRequest(::google::protobuf_tempo::Arena* arena, const CallFunctionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kFunctionFieldNumber = 3,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string function = 3;
  void clear_function() ;
  const std::string& function() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_function(Arg_&& arg, Args_... args);
  std::string* mutable_function();
  PROTOBUF_NODISCARD std::string* release_function();
  void set_allocated_function(std::string* value);

  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(
      const std::string& value);
  std::string* _internal_mutable_function();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.CallFunctionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::google::protobuf_tempo::internal::ArenaStringPtr function_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API ActorDescriptor final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.ActorDescriptor) */ {
 public:
  inline ActorDescriptor() : ActorDescriptor(nullptr) {}
  ~ActorDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActorDescriptor(::google::protobuf_tempo::internal::ConstantInitialized);

  inline ActorDescriptor(const ActorDescriptor& from)
      : ActorDescriptor(nullptr, from) {}
  ActorDescriptor(ActorDescriptor&& from) noexcept
    : ActorDescriptor() {
    *this = ::std::move(from);
  }

  inline ActorDescriptor& operator=(const ActorDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorDescriptor& operator=(ActorDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorDescriptor* internal_default_instance() {
    return reinterpret_cast<const ActorDescriptor*>(
               &_ActorDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ActorDescriptor& a, ActorDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorDescriptor* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorDescriptor>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const ActorDescriptor& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const ActorDescriptor& from) {
    ActorDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActorDescriptor* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.ActorDescriptor";
  }
  protected:
  explicit ActorDescriptor(::google::protobuf_tempo::Arena* arena);
  ActorDescriptor(::google::protobuf_tempo::Arena* arena, const ActorDescriptor& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string type = 2;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.ActorDescriptor)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr name_;
    ::google::protobuf_tempo::internal::ArenaStringPtr type_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API ActivateComponentRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.ActivateComponentRequest) */ {
 public:
  inline ActivateComponentRequest() : ActivateComponentRequest(nullptr) {}
  ~ActivateComponentRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActivateComponentRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline ActivateComponentRequest(const ActivateComponentRequest& from)
      : ActivateComponentRequest(nullptr, from) {}
  ActivateComponentRequest(ActivateComponentRequest&& from) noexcept
    : ActivateComponentRequest() {
    *this = ::std::move(from);
  }

  inline ActivateComponentRequest& operator=(const ActivateComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateComponentRequest& operator=(ActivateComponentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivateComponentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivateComponentRequest* internal_default_instance() {
    return reinterpret_cast<const ActivateComponentRequest*>(
               &_ActivateComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ActivateComponentRequest& a, ActivateComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateComponentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateComponentRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivateComponentRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivateComponentRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const ActivateComponentRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const ActivateComponentRequest& from) {
    ActivateComponentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActivateComponentRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.ActivateComponentRequest";
  }
  protected:
  explicit ActivateComponentRequest(::google::protobuf_tempo::Arena* arena);
  ActivateComponentRequest(::google::protobuf_tempo::Arena* arena, const ActivateComponentRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.ActivateComponentRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API GetPropertiesResponse final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.GetPropertiesResponse) */ {
 public:
  inline GetPropertiesResponse() : GetPropertiesResponse(nullptr) {}
  ~GetPropertiesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPropertiesResponse(::google::protobuf_tempo::internal::ConstantInitialized);

  inline GetPropertiesResponse(const GetPropertiesResponse& from)
      : GetPropertiesResponse(nullptr, from) {}
  GetPropertiesResponse(GetPropertiesResponse&& from) noexcept
    : GetPropertiesResponse() {
    *this = ::std::move(from);
  }

  inline GetPropertiesResponse& operator=(const GetPropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesResponse& operator=(GetPropertiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesResponse*>(
               &_GetPropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetPropertiesResponse& a, GetPropertiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesResponse* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesResponse>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const GetPropertiesResponse& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const GetPropertiesResponse& from) {
    GetPropertiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPropertiesResponse* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.GetPropertiesResponse";
  }
  protected:
  explicit GetPropertiesResponse(::google::protobuf_tempo::Arena* arena);
  GetPropertiesResponse(::google::protobuf_tempo::Arena* arena, const GetPropertiesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // repeated .TempoWorld.PropertyDescriptor properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;

  public:
  void clear_properties() ;
  ::TempoWorld::PropertyDescriptor* mutable_properties(int index);
  ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::PropertyDescriptor >*
      mutable_properties();
  private:
  const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::PropertyDescriptor>& _internal_properties() const;
  ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::PropertyDescriptor>* _internal_mutable_properties();
  public:
  const ::TempoWorld::PropertyDescriptor& properties(int index) const;
  ::TempoWorld::PropertyDescriptor* add_properties();
  const ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::PropertyDescriptor >&
      properties() const;
  // @@protoc_insertion_point(class_scope:TempoWorld.GetPropertiesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::PropertyDescriptor > properties_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API GetAllComponentsResponse final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.GetAllComponentsResponse) */ {
 public:
  inline GetAllComponentsResponse() : GetAllComponentsResponse(nullptr) {}
  ~GetAllComponentsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAllComponentsResponse(::google::protobuf_tempo::internal::ConstantInitialized);

  inline GetAllComponentsResponse(const GetAllComponentsResponse& from)
      : GetAllComponentsResponse(nullptr, from) {}
  GetAllComponentsResponse(GetAllComponentsResponse&& from) noexcept
    : GetAllComponentsResponse() {
    *this = ::std::move(from);
  }

  inline GetAllComponentsResponse& operator=(const GetAllComponentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllComponentsResponse& operator=(GetAllComponentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllComponentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllComponentsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllComponentsResponse*>(
               &_GetAllComponentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetAllComponentsResponse& a, GetAllComponentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllComponentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllComponentsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllComponentsResponse* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllComponentsResponse>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const GetAllComponentsResponse& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const GetAllComponentsResponse& from) {
    GetAllComponentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAllComponentsResponse* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.GetAllComponentsResponse";
  }
  protected:
  explicit GetAllComponentsResponse(::google::protobuf_tempo::Arena* arena);
  GetAllComponentsResponse(::google::protobuf_tempo::Arena* arena, const GetAllComponentsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 1,
  };
  // repeated .TempoWorld.ComponentDescriptor components = 1;
  int components_size() const;
  private:
  int _internal_components_size() const;

  public:
  void clear_components() ;
  ::TempoWorld::ComponentDescriptor* mutable_components(int index);
  ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::ComponentDescriptor >*
      mutable_components();
  private:
  const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ComponentDescriptor>& _internal_components() const;
  ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ComponentDescriptor>* _internal_mutable_components();
  public:
  const ::TempoWorld::ComponentDescriptor& components(int index) const;
  ::TempoWorld::ComponentDescriptor* add_components();
  const ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::ComponentDescriptor >&
      components() const;
  // @@protoc_insertion_point(class_scope:TempoWorld.GetAllComponentsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::ComponentDescriptor > components_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API GetAllActorsResponse final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.GetAllActorsResponse) */ {
 public:
  inline GetAllActorsResponse() : GetAllActorsResponse(nullptr) {}
  ~GetAllActorsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAllActorsResponse(::google::protobuf_tempo::internal::ConstantInitialized);

  inline GetAllActorsResponse(const GetAllActorsResponse& from)
      : GetAllActorsResponse(nullptr, from) {}
  GetAllActorsResponse(GetAllActorsResponse&& from) noexcept
    : GetAllActorsResponse() {
    *this = ::std::move(from);
  }

  inline GetAllActorsResponse& operator=(const GetAllActorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllActorsResponse& operator=(GetAllActorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllActorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllActorsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllActorsResponse*>(
               &_GetAllActorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetAllActorsResponse& a, GetAllActorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllActorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllActorsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllActorsResponse* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllActorsResponse>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const GetAllActorsResponse& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const GetAllActorsResponse& from) {
    GetAllActorsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAllActorsResponse* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.GetAllActorsResponse";
  }
  protected:
  explicit GetAllActorsResponse(::google::protobuf_tempo::Arena* arena);
  GetAllActorsResponse(::google::protobuf_tempo::Arena* arena, const GetAllActorsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorsFieldNumber = 1,
  };
  // repeated .TempoWorld.ActorDescriptor actors = 1;
  int actors_size() const;
  private:
  int _internal_actors_size() const;

  public:
  void clear_actors() ;
  ::TempoWorld::ActorDescriptor* mutable_actors(int index);
  ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::ActorDescriptor >*
      mutable_actors();
  private:
  const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorDescriptor>& _internal_actors() const;
  ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorDescriptor>* _internal_mutable_actors();
  public:
  const ::TempoWorld::ActorDescriptor& actors(int index) const;
  ::TempoWorld::ActorDescriptor* add_actors();
  const ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::ActorDescriptor >&
      actors() const;
  // @@protoc_insertion_point(class_scope:TempoWorld.GetAllActorsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::ActorDescriptor > actors_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SpawnActorResponse final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SpawnActorResponse) */ {
 public:
  inline SpawnActorResponse() : SpawnActorResponse(nullptr) {}
  ~SpawnActorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SpawnActorResponse(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SpawnActorResponse(const SpawnActorResponse& from)
      : SpawnActorResponse(nullptr, from) {}
  SpawnActorResponse(SpawnActorResponse&& from) noexcept
    : SpawnActorResponse() {
    *this = ::std::move(from);
  }

  inline SpawnActorResponse& operator=(const SpawnActorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnActorResponse& operator=(SpawnActorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnActorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnActorResponse* internal_default_instance() {
    return reinterpret_cast<const SpawnActorResponse*>(
               &_SpawnActorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpawnActorResponse& a, SpawnActorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnActorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnActorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnActorResponse* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnActorResponse>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SpawnActorResponse& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SpawnActorResponse& from) {
    SpawnActorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SpawnActorResponse* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SpawnActorResponse";
  }
  protected:
  explicit SpawnActorResponse(::google::protobuf_tempo::Arena* arena);
  SpawnActorResponse(::google::protobuf_tempo::Arena* arena, const SpawnActorResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawnedNameFieldNumber = 1,
    kSpawnedTransformFieldNumber = 2,
  };
  // string spawned_name = 1;
  void clear_spawned_name() ;
  const std::string& spawned_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_spawned_name(Arg_&& arg, Args_... args);
  std::string* mutable_spawned_name();
  PROTOBUF_NODISCARD std::string* release_spawned_name();
  void set_allocated_spawned_name(std::string* value);

  private:
  const std::string& _internal_spawned_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spawned_name(
      const std::string& value);
  std::string* _internal_mutable_spawned_name();

  public:
  // .TempoScripting.Transform spawned_transform = 2;
  bool has_spawned_transform() const;
  void clear_spawned_transform() ;
  const ::TempoScripting::Transform& spawned_transform() const;
  PROTOBUF_NODISCARD ::TempoScripting::Transform* release_spawned_transform();
  ::TempoScripting::Transform* mutable_spawned_transform();
  void set_allocated_spawned_transform(::TempoScripting::Transform* value);
  void unsafe_arena_set_allocated_spawned_transform(::TempoScripting::Transform* value);
  ::TempoScripting::Transform* unsafe_arena_release_spawned_transform();

  private:
  const ::TempoScripting::Transform& _internal_spawned_transform() const;
  ::TempoScripting::Transform* _internal_mutable_spawned_transform();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SpawnActorResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 1,
      50, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr spawned_name_;
    ::TempoScripting::Transform* spawned_transform_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SpawnActorRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SpawnActorRequest) */ {
 public:
  inline SpawnActorRequest() : SpawnActorRequest(nullptr) {}
  ~SpawnActorRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SpawnActorRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SpawnActorRequest(const SpawnActorRequest& from)
      : SpawnActorRequest(nullptr, from) {}
  SpawnActorRequest(SpawnActorRequest&& from) noexcept
    : SpawnActorRequest() {
    *this = ::std::move(from);
  }

  inline SpawnActorRequest& operator=(const SpawnActorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnActorRequest& operator=(SpawnActorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnActorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnActorRequest* internal_default_instance() {
    return reinterpret_cast<const SpawnActorRequest*>(
               &_SpawnActorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpawnActorRequest& a, SpawnActorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnActorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnActorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnActorRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnActorRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SpawnActorRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SpawnActorRequest& from) {
    SpawnActorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SpawnActorRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SpawnActorRequest";
  }
  protected:
  explicit SpawnActorRequest(::google::protobuf_tempo::Arena* arena);
  SpawnActorRequest(::google::protobuf_tempo::Arena* arena, const SpawnActorRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRelativeToActorFieldNumber = 4,
    kTransformFieldNumber = 3,
    kDeferredFieldNumber = 2,
  };
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string relative_to_actor = 4;
  void clear_relative_to_actor() ;
  const std::string& relative_to_actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relative_to_actor(Arg_&& arg, Args_... args);
  std::string* mutable_relative_to_actor();
  PROTOBUF_NODISCARD std::string* release_relative_to_actor();
  void set_allocated_relative_to_actor(std::string* value);

  private:
  const std::string& _internal_relative_to_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_to_actor(
      const std::string& value);
  std::string* _internal_mutable_relative_to_actor();

  public:
  // .TempoScripting.Transform transform = 3;
  bool has_transform() const;
  void clear_transform() ;
  const ::TempoScripting::Transform& transform() const;
  PROTOBUF_NODISCARD ::TempoScripting::Transform* release_transform();
  ::TempoScripting::Transform* mutable_transform();
  void set_allocated_transform(::TempoScripting::Transform* value);
  void unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value);
  ::TempoScripting::Transform* unsafe_arena_release_transform();

  private:
  const ::TempoScripting::Transform& _internal_transform() const;
  ::TempoScripting::Transform* _internal_mutable_transform();

  public:
  // bool deferred = 2;
  void clear_deferred() ;
  bool deferred() const;
  void set_deferred(bool value);

  private:
  bool _internal_deferred() const;
  void _internal_set_deferred(bool value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SpawnActorRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 1,
      58, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr type_;
    ::google::protobuf_tempo::internal::ArenaStringPtr relative_to_actor_;
    ::TempoScripting::Transform* transform_;
    bool deferred_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetComponentTransformRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetComponentTransformRequest) */ {
 public:
  inline SetComponentTransformRequest() : SetComponentTransformRequest(nullptr) {}
  ~SetComponentTransformRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetComponentTransformRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetComponentTransformRequest(const SetComponentTransformRequest& from)
      : SetComponentTransformRequest(nullptr, from) {}
  SetComponentTransformRequest(SetComponentTransformRequest&& from) noexcept
    : SetComponentTransformRequest() {
    *this = ::std::move(from);
  }

  inline SetComponentTransformRequest& operator=(const SetComponentTransformRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetComponentTransformRequest& operator=(SetComponentTransformRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetComponentTransformRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetComponentTransformRequest* internal_default_instance() {
    return reinterpret_cast<const SetComponentTransformRequest*>(
               &_SetComponentTransformRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetComponentTransformRequest& a, SetComponentTransformRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetComponentTransformRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetComponentTransformRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetComponentTransformRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetComponentTransformRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetComponentTransformRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetComponentTransformRequest& from) {
    SetComponentTransformRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetComponentTransformRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetComponentTransformRequest";
  }
  protected:
  explicit SetComponentTransformRequest(::google::protobuf_tempo::Arena* arena);
  SetComponentTransformRequest(::google::protobuf_tempo::Arena* arena, const SetComponentTransformRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kComponentFieldNumber = 2,
    kTransformFieldNumber = 3,
    kRelativeToWorldFieldNumber = 4,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string component = 2;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // .TempoScripting.Transform transform = 3;
  bool has_transform() const;
  void clear_transform() ;
  const ::TempoScripting::Transform& transform() const;
  PROTOBUF_NODISCARD ::TempoScripting::Transform* release_transform();
  ::TempoScripting::Transform* mutable_transform();
  void set_allocated_transform(::TempoScripting::Transform* value);
  void unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value);
  ::TempoScripting::Transform* unsafe_arena_release_transform();

  private:
  const ::TempoScripting::Transform& _internal_transform() const;
  ::TempoScripting::Transform* _internal_mutable_transform();

  public:
  // bool relative_to_world = 4;
  void clear_relative_to_world() ;
  bool relative_to_world() const;
  void set_relative_to_world(bool value);

  private:
  bool _internal_relative_to_world() const;
  void _internal_set_relative_to_world(bool value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetComponentTransformRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 4, 1,
      62, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr component_;
    ::TempoScripting::Transform* transform_;
    bool relative_to_world_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API SetActorTransformRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.SetActorTransformRequest) */ {
 public:
  inline SetActorTransformRequest() : SetActorTransformRequest(nullptr) {}
  ~SetActorTransformRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetActorTransformRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline SetActorTransformRequest(const SetActorTransformRequest& from)
      : SetActorTransformRequest(nullptr, from) {}
  SetActorTransformRequest(SetActorTransformRequest&& from) noexcept
    : SetActorTransformRequest() {
    *this = ::std::move(from);
  }

  inline SetActorTransformRequest& operator=(const SetActorTransformRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActorTransformRequest& operator=(SetActorTransformRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetActorTransformRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetActorTransformRequest* internal_default_instance() {
    return reinterpret_cast<const SetActorTransformRequest*>(
               &_SetActorTransformRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetActorTransformRequest& a, SetActorTransformRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActorTransformRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActorTransformRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetActorTransformRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetActorTransformRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const SetActorTransformRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const SetActorTransformRequest& from) {
    SetActorTransformRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetActorTransformRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.SetActorTransformRequest";
  }
  protected:
  explicit SetActorTransformRequest(::google::protobuf_tempo::Arena* arena);
  SetActorTransformRequest(::google::protobuf_tempo::Arena* arena, const SetActorTransformRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kRelativeToActorFieldNumber = 3,
    kTransformFieldNumber = 2,
  };
  // string actor = 1;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string relative_to_actor = 3;
  void clear_relative_to_actor() ;
  const std::string& relative_to_actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relative_to_actor(Arg_&& arg, Args_... args);
  std::string* mutable_relative_to_actor();
  PROTOBUF_NODISCARD std::string* release_relative_to_actor();
  void set_allocated_relative_to_actor(std::string* value);

  private:
  const std::string& _internal_relative_to_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_to_actor(
      const std::string& value);
  std::string* _internal_mutable_relative_to_actor();

  public:
  // .TempoScripting.Transform transform = 2;
  bool has_transform() const;
  void clear_transform() ;
  const ::TempoScripting::Transform& transform() const;
  PROTOBUF_NODISCARD ::TempoScripting::Transform* release_transform();
  ::TempoScripting::Transform* mutable_transform();
  void set_allocated_transform(::TempoScripting::Transform* value);
  void unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value);
  ::TempoScripting::Transform* unsafe_arena_release_transform();

  private:
  const ::TempoScripting::Transform& _internal_transform() const;
  ::TempoScripting::Transform* _internal_mutable_transform();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.SetActorTransformRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 3, 1,
      66, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr relative_to_actor_;
    ::TempoScripting::Transform* transform_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API FinishSpawningActorResponse final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.FinishSpawningActorResponse) */ {
 public:
  inline FinishSpawningActorResponse() : FinishSpawningActorResponse(nullptr) {}
  ~FinishSpawningActorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FinishSpawningActorResponse(::google::protobuf_tempo::internal::ConstantInitialized);

  inline FinishSpawningActorResponse(const FinishSpawningActorResponse& from)
      : FinishSpawningActorResponse(nullptr, from) {}
  FinishSpawningActorResponse(FinishSpawningActorResponse&& from) noexcept
    : FinishSpawningActorResponse() {
    *this = ::std::move(from);
  }

  inline FinishSpawningActorResponse& operator=(const FinishSpawningActorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinishSpawningActorResponse& operator=(FinishSpawningActorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FinishSpawningActorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinishSpawningActorResponse* internal_default_instance() {
    return reinterpret_cast<const FinishSpawningActorResponse*>(
               &_FinishSpawningActorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FinishSpawningActorResponse& a, FinishSpawningActorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FinishSpawningActorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinishSpawningActorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FinishSpawningActorResponse* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FinishSpawningActorResponse>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const FinishSpawningActorResponse& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const FinishSpawningActorResponse& from) {
    FinishSpawningActorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(FinishSpawningActorResponse* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.FinishSpawningActorResponse";
  }
  protected:
  explicit FinishSpawningActorResponse(::google::protobuf_tempo::Arena* arena);
  FinishSpawningActorResponse(::google::protobuf_tempo::Arena* arena, const FinishSpawningActorResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawnedTransformFieldNumber = 1,
  };
  // .TempoScripting.Transform spawned_transform = 1;
  bool has_spawned_transform() const;
  void clear_spawned_transform() ;
  const ::TempoScripting::Transform& spawned_transform() const;
  PROTOBUF_NODISCARD ::TempoScripting::Transform* release_spawned_transform();
  ::TempoScripting::Transform* mutable_spawned_transform();
  void set_allocated_spawned_transform(::TempoScripting::Transform* value);
  void unsafe_arena_set_allocated_spawned_transform(::TempoScripting::Transform* value);
  ::TempoScripting::Transform* unsafe_arena_release_spawned_transform();

  private:
  const ::TempoScripting::Transform& _internal_spawned_transform() const;
  ::TempoScripting::Transform* _internal_mutable_spawned_transform();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.FinishSpawningActorResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::TempoScripting::Transform* spawned_transform_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API AddComponentResponse final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.AddComponentResponse) */ {
 public:
  inline AddComponentResponse() : AddComponentResponse(nullptr) {}
  ~AddComponentResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddComponentResponse(::google::protobuf_tempo::internal::ConstantInitialized);

  inline AddComponentResponse(const AddComponentResponse& from)
      : AddComponentResponse(nullptr, from) {}
  AddComponentResponse(AddComponentResponse&& from) noexcept
    : AddComponentResponse() {
    *this = ::std::move(from);
  }

  inline AddComponentResponse& operator=(const AddComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddComponentResponse& operator=(AddComponentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddComponentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddComponentResponse* internal_default_instance() {
    return reinterpret_cast<const AddComponentResponse*>(
               &_AddComponentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddComponentResponse& a, AddComponentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddComponentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddComponentResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddComponentResponse* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddComponentResponse>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const AddComponentResponse& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const AddComponentResponse& from) {
    AddComponentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddComponentResponse* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.AddComponentResponse";
  }
  protected:
  explicit AddComponentResponse(::google::protobuf_tempo::Arena* arena);
  AddComponentResponse(::google::protobuf_tempo::Arena* arena, const AddComponentResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTransformFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .TempoScripting.Transform transform = 2;
  bool has_transform() const;
  void clear_transform() ;
  const ::TempoScripting::Transform& transform() const;
  PROTOBUF_NODISCARD ::TempoScripting::Transform* release_transform();
  ::TempoScripting::Transform* mutable_transform();
  void set_allocated_transform(::TempoScripting::Transform* value);
  void unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value);
  ::TempoScripting::Transform* unsafe_arena_release_transform();

  private:
  const ::TempoScripting::Transform& _internal_transform() const;
  ::TempoScripting::Transform* _internal_mutable_transform();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.AddComponentResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 1,
      44, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr name_;
    ::TempoScripting::Transform* transform_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API AddComponentRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.AddComponentRequest) */ {
 public:
  inline AddComponentRequest() : AddComponentRequest(nullptr) {}
  ~AddComponentRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddComponentRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline AddComponentRequest(const AddComponentRequest& from)
      : AddComponentRequest(nullptr, from) {}
  AddComponentRequest(AddComponentRequest&& from) noexcept
    : AddComponentRequest() {
    *this = ::std::move(from);
  }

  inline AddComponentRequest& operator=(const AddComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddComponentRequest& operator=(AddComponentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddComponentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddComponentRequest* internal_default_instance() {
    return reinterpret_cast<const AddComponentRequest*>(
               &_AddComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddComponentRequest& a, AddComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddComponentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddComponentRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddComponentRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddComponentRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const AddComponentRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const AddComponentRequest& from) {
    AddComponentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddComponentRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.AddComponentRequest";
  }
  protected:
  explicit AddComponentRequest(::google::protobuf_tempo::Arena* arena);
  AddComponentRequest(::google::protobuf_tempo::Arena* arena, const AddComponentRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kActorFieldNumber = 2,
    kNameFieldNumber = 3,
    kParentFieldNumber = 4,
    kSocketFieldNumber = 6,
    kTransformFieldNumber = 5,
  };
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string actor = 2;
  void clear_actor() ;
  const std::string& actor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor(Arg_&& arg, Args_... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* value);

  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(
      const std::string& value);
  std::string* _internal_mutable_actor();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string parent = 4;
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // string socket = 6;
  void clear_socket() ;
  const std::string& socket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_socket(Arg_&& arg, Args_... args);
  std::string* mutable_socket();
  PROTOBUF_NODISCARD std::string* release_socket();
  void set_allocated_socket(std::string* value);

  private:
  const std::string& _internal_socket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_socket(
      const std::string& value);
  std::string* _internal_mutable_socket();

  public:
  // .TempoScripting.Transform transform = 5;
  bool has_transform() const;
  void clear_transform() ;
  const ::TempoScripting::Transform& transform() const;
  PROTOBUF_NODISCARD ::TempoScripting::Transform* release_transform();
  ::TempoScripting::Transform* mutable_transform();
  void set_allocated_transform(::TempoScripting::Transform* value);
  void unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value);
  ::TempoScripting::Transform* unsafe_arena_release_transform();

  private:
  const ::TempoScripting::Transform& _internal_transform() const;
  ::TempoScripting::Transform* _internal_mutable_transform();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.AddComponentRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      3, 6, 1,
      64, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr type_;
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_;
    ::google::protobuf_tempo::internal::ArenaStringPtr name_;
    ::google::protobuf_tempo::internal::ArenaStringPtr parent_;
    ::google::protobuf_tempo::internal::ArenaStringPtr socket_;
    ::TempoScripting::Transform* transform_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fActorControl_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SpawnActorRequest

// string type = 1;
inline void SpawnActorRequest::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& SpawnActorRequest::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SpawnActorRequest.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpawnActorRequest::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SpawnActorRequest.type)
}
inline std::string* SpawnActorRequest::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SpawnActorRequest.type)
  return _s;
}
inline const std::string& SpawnActorRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void SpawnActorRequest::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* SpawnActorRequest::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* SpawnActorRequest::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SpawnActorRequest.type)
  return _impl_.type_.Release();
}
inline void SpawnActorRequest::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SpawnActorRequest.type)
}

// bool deferred = 2;
inline void SpawnActorRequest::clear_deferred() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.deferred_ = false;
}
inline bool SpawnActorRequest::deferred() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SpawnActorRequest.deferred)
  return _internal_deferred();
}
inline void SpawnActorRequest::set_deferred(bool value) {
  _internal_set_deferred(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SpawnActorRequest.deferred)
}
inline bool SpawnActorRequest::_internal_deferred() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.deferred_;
}
inline void SpawnActorRequest::_internal_set_deferred(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.deferred_ = value;
}

// .TempoScripting.Transform transform = 3;
inline bool SpawnActorRequest::has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline const ::TempoScripting::Transform& SpawnActorRequest::_internal_transform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Transform&>(::TempoScripting::_Transform_default_instance_);
}
inline const ::TempoScripting::Transform& SpawnActorRequest::transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SpawnActorRequest.transform)
  return _internal_transform();
}
inline void SpawnActorRequest::unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.SpawnActorRequest.transform)
}
inline ::TempoScripting::Transform* SpawnActorRequest::release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* released = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Transform* SpawnActorRequest::unsafe_arena_release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SpawnActorRequest.transform)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::TempoScripting::Transform* SpawnActorRequest::_internal_mutable_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Transform>(GetArena());
    _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(p);
  }
  return _impl_.transform_;
}
inline ::TempoScripting::Transform* SpawnActorRequest::mutable_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SpawnActorRequest.transform)
  return _msg;
}
inline void SpawnActorRequest::set_allocated_transform(::TempoScripting::Transform* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SpawnActorRequest.transform)
}

// string relative_to_actor = 4;
inline void SpawnActorRequest::clear_relative_to_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relative_to_actor_.ClearToEmpty();
}
inline const std::string& SpawnActorRequest::relative_to_actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SpawnActorRequest.relative_to_actor)
  return _internal_relative_to_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpawnActorRequest::set_relative_to_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relative_to_actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SpawnActorRequest.relative_to_actor)
}
inline std::string* SpawnActorRequest::mutable_relative_to_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_relative_to_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SpawnActorRequest.relative_to_actor)
  return _s;
}
inline const std::string& SpawnActorRequest::_internal_relative_to_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relative_to_actor_.Get();
}
inline void SpawnActorRequest::_internal_set_relative_to_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relative_to_actor_.Set(value, GetArena());
}
inline std::string* SpawnActorRequest::_internal_mutable_relative_to_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.relative_to_actor_.Mutable( GetArena());
}
inline std::string* SpawnActorRequest::release_relative_to_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SpawnActorRequest.relative_to_actor)
  return _impl_.relative_to_actor_.Release();
}
inline void SpawnActorRequest::set_allocated_relative_to_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relative_to_actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relative_to_actor_.IsDefault()) {
          _impl_.relative_to_actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SpawnActorRequest.relative_to_actor)
}

// -------------------------------------------------------------------

// SpawnActorResponse

// string spawned_name = 1;
inline void SpawnActorResponse::clear_spawned_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spawned_name_.ClearToEmpty();
}
inline const std::string& SpawnActorResponse::spawned_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SpawnActorResponse.spawned_name)
  return _internal_spawned_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpawnActorResponse::set_spawned_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.spawned_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SpawnActorResponse.spawned_name)
}
inline std::string* SpawnActorResponse::mutable_spawned_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_spawned_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SpawnActorResponse.spawned_name)
  return _s;
}
inline const std::string& SpawnActorResponse::_internal_spawned_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.spawned_name_.Get();
}
inline void SpawnActorResponse::_internal_set_spawned_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.spawned_name_.Set(value, GetArena());
}
inline std::string* SpawnActorResponse::_internal_mutable_spawned_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.spawned_name_.Mutable( GetArena());
}
inline std::string* SpawnActorResponse::release_spawned_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SpawnActorResponse.spawned_name)
  return _impl_.spawned_name_.Release();
}
inline void SpawnActorResponse::set_allocated_spawned_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spawned_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.spawned_name_.IsDefault()) {
          _impl_.spawned_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SpawnActorResponse.spawned_name)
}

// .TempoScripting.Transform spawned_transform = 2;
inline bool SpawnActorResponse::has_spawned_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spawned_transform_ != nullptr);
  return value;
}
inline const ::TempoScripting::Transform& SpawnActorResponse::_internal_spawned_transform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Transform* p = _impl_.spawned_transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Transform&>(::TempoScripting::_Transform_default_instance_);
}
inline const ::TempoScripting::Transform& SpawnActorResponse::spawned_transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SpawnActorResponse.spawned_transform)
  return _internal_spawned_transform();
}
inline void SpawnActorResponse::unsafe_arena_set_allocated_spawned_transform(::TempoScripting::Transform* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.spawned_transform_);
  }
  _impl_.spawned_transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.SpawnActorResponse.spawned_transform)
}
inline ::TempoScripting::Transform* SpawnActorResponse::release_spawned_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* released = _impl_.spawned_transform_;
  _impl_.spawned_transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Transform* SpawnActorResponse::unsafe_arena_release_spawned_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SpawnActorResponse.spawned_transform)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* temp = _impl_.spawned_transform_;
  _impl_.spawned_transform_ = nullptr;
  return temp;
}
inline ::TempoScripting::Transform* SpawnActorResponse::_internal_mutable_spawned_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.spawned_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Transform>(GetArena());
    _impl_.spawned_transform_ = reinterpret_cast<::TempoScripting::Transform*>(p);
  }
  return _impl_.spawned_transform_;
}
inline ::TempoScripting::Transform* SpawnActorResponse::mutable_spawned_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Transform* _msg = _internal_mutable_spawned_transform();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SpawnActorResponse.spawned_transform)
  return _msg;
}
inline void SpawnActorResponse::set_allocated_spawned_transform(::TempoScripting::Transform* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.spawned_transform_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.spawned_transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SpawnActorResponse.spawned_transform)
}

// -------------------------------------------------------------------

// FinishSpawningActorRequest

// string actor = 1;
inline void FinishSpawningActorRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& FinishSpawningActorRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.FinishSpawningActorRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FinishSpawningActorRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.FinishSpawningActorRequest.actor)
}
inline std::string* FinishSpawningActorRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.FinishSpawningActorRequest.actor)
  return _s;
}
inline const std::string& FinishSpawningActorRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void FinishSpawningActorRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* FinishSpawningActorRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* FinishSpawningActorRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.FinishSpawningActorRequest.actor)
  return _impl_.actor_.Release();
}
inline void FinishSpawningActorRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.FinishSpawningActorRequest.actor)
}

// -------------------------------------------------------------------

// FinishSpawningActorResponse

// .TempoScripting.Transform spawned_transform = 1;
inline bool FinishSpawningActorResponse::has_spawned_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spawned_transform_ != nullptr);
  return value;
}
inline const ::TempoScripting::Transform& FinishSpawningActorResponse::_internal_spawned_transform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Transform* p = _impl_.spawned_transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Transform&>(::TempoScripting::_Transform_default_instance_);
}
inline const ::TempoScripting::Transform& FinishSpawningActorResponse::spawned_transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.FinishSpawningActorResponse.spawned_transform)
  return _internal_spawned_transform();
}
inline void FinishSpawningActorResponse::unsafe_arena_set_allocated_spawned_transform(::TempoScripting::Transform* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.spawned_transform_);
  }
  _impl_.spawned_transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.FinishSpawningActorResponse.spawned_transform)
}
inline ::TempoScripting::Transform* FinishSpawningActorResponse::release_spawned_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* released = _impl_.spawned_transform_;
  _impl_.spawned_transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Transform* FinishSpawningActorResponse::unsafe_arena_release_spawned_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.FinishSpawningActorResponse.spawned_transform)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* temp = _impl_.spawned_transform_;
  _impl_.spawned_transform_ = nullptr;
  return temp;
}
inline ::TempoScripting::Transform* FinishSpawningActorResponse::_internal_mutable_spawned_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.spawned_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Transform>(GetArena());
    _impl_.spawned_transform_ = reinterpret_cast<::TempoScripting::Transform*>(p);
  }
  return _impl_.spawned_transform_;
}
inline ::TempoScripting::Transform* FinishSpawningActorResponse::mutable_spawned_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Transform* _msg = _internal_mutable_spawned_transform();
  // @@protoc_insertion_point(field_mutable:TempoWorld.FinishSpawningActorResponse.spawned_transform)
  return _msg;
}
inline void FinishSpawningActorResponse::set_allocated_spawned_transform(::TempoScripting::Transform* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.spawned_transform_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.spawned_transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.FinishSpawningActorResponse.spawned_transform)
}

// -------------------------------------------------------------------

// DestroyActorRequest

// string actor = 1;
inline void DestroyActorRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& DestroyActorRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.DestroyActorRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DestroyActorRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.DestroyActorRequest.actor)
}
inline std::string* DestroyActorRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.DestroyActorRequest.actor)
  return _s;
}
inline const std::string& DestroyActorRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void DestroyActorRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* DestroyActorRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* DestroyActorRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.DestroyActorRequest.actor)
  return _impl_.actor_.Release();
}
inline void DestroyActorRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.DestroyActorRequest.actor)
}

// -------------------------------------------------------------------

// AddComponentRequest

// string type = 1;
inline void AddComponentRequest::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& AddComponentRequest::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.AddComponentRequest.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddComponentRequest::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.AddComponentRequest.type)
}
inline std::string* AddComponentRequest::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:TempoWorld.AddComponentRequest.type)
  return _s;
}
inline const std::string& AddComponentRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void AddComponentRequest::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* AddComponentRequest::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* AddComponentRequest::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.AddComponentRequest.type)
  return _impl_.type_.Release();
}
inline void AddComponentRequest::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.AddComponentRequest.type)
}

// string actor = 2;
inline void AddComponentRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& AddComponentRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.AddComponentRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddComponentRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.AddComponentRequest.actor)
}
inline std::string* AddComponentRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.AddComponentRequest.actor)
  return _s;
}
inline const std::string& AddComponentRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void AddComponentRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* AddComponentRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* AddComponentRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.AddComponentRequest.actor)
  return _impl_.actor_.Release();
}
inline void AddComponentRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.AddComponentRequest.actor)
}

// string name = 3;
inline void AddComponentRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AddComponentRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.AddComponentRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddComponentRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.AddComponentRequest.name)
}
inline std::string* AddComponentRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.AddComponentRequest.name)
  return _s;
}
inline const std::string& AddComponentRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void AddComponentRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* AddComponentRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* AddComponentRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.AddComponentRequest.name)
  return _impl_.name_.Release();
}
inline void AddComponentRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.AddComponentRequest.name)
}

// string parent = 4;
inline void AddComponentRequest::clear_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& AddComponentRequest::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.AddComponentRequest.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddComponentRequest::set_parent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.AddComponentRequest.parent)
}
inline std::string* AddComponentRequest::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:TempoWorld.AddComponentRequest.parent)
  return _s;
}
inline const std::string& AddComponentRequest::_internal_parent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_.Get();
}
inline void AddComponentRequest::_internal_set_parent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* AddComponentRequest::_internal_mutable_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* AddComponentRequest::release_parent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.AddComponentRequest.parent)
  return _impl_.parent_.Release();
}
inline void AddComponentRequest::set_allocated_parent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.AddComponentRequest.parent)
}

// .TempoScripting.Transform transform = 5;
inline bool AddComponentRequest::has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline const ::TempoScripting::Transform& AddComponentRequest::_internal_transform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Transform&>(::TempoScripting::_Transform_default_instance_);
}
inline const ::TempoScripting::Transform& AddComponentRequest::transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.AddComponentRequest.transform)
  return _internal_transform();
}
inline void AddComponentRequest::unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.AddComponentRequest.transform)
}
inline ::TempoScripting::Transform* AddComponentRequest::release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* released = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Transform* AddComponentRequest::unsafe_arena_release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.AddComponentRequest.transform)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::TempoScripting::Transform* AddComponentRequest::_internal_mutable_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Transform>(GetArena());
    _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(p);
  }
  return _impl_.transform_;
}
inline ::TempoScripting::Transform* AddComponentRequest::mutable_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:TempoWorld.AddComponentRequest.transform)
  return _msg;
}
inline void AddComponentRequest::set_allocated_transform(::TempoScripting::Transform* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.AddComponentRequest.transform)
}

// string socket = 6;
inline void AddComponentRequest::clear_socket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.socket_.ClearToEmpty();
}
inline const std::string& AddComponentRequest::socket() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.AddComponentRequest.socket)
  return _internal_socket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddComponentRequest::set_socket(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.socket_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.AddComponentRequest.socket)
}
inline std::string* AddComponentRequest::mutable_socket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_socket();
  // @@protoc_insertion_point(field_mutable:TempoWorld.AddComponentRequest.socket)
  return _s;
}
inline const std::string& AddComponentRequest::_internal_socket() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.socket_.Get();
}
inline void AddComponentRequest::_internal_set_socket(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.socket_.Set(value, GetArena());
}
inline std::string* AddComponentRequest::_internal_mutable_socket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.socket_.Mutable( GetArena());
}
inline std::string* AddComponentRequest::release_socket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.AddComponentRequest.socket)
  return _impl_.socket_.Release();
}
inline void AddComponentRequest::set_allocated_socket(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.socket_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.socket_.IsDefault()) {
          _impl_.socket_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.AddComponentRequest.socket)
}

// -------------------------------------------------------------------

// AddComponentResponse

// string name = 1;
inline void AddComponentResponse::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AddComponentResponse::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.AddComponentResponse.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddComponentResponse::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.AddComponentResponse.name)
}
inline std::string* AddComponentResponse::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.AddComponentResponse.name)
  return _s;
}
inline const std::string& AddComponentResponse::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void AddComponentResponse::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* AddComponentResponse::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* AddComponentResponse::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.AddComponentResponse.name)
  return _impl_.name_.Release();
}
inline void AddComponentResponse::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.AddComponentResponse.name)
}

// .TempoScripting.Transform transform = 2;
inline bool AddComponentResponse::has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline const ::TempoScripting::Transform& AddComponentResponse::_internal_transform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Transform&>(::TempoScripting::_Transform_default_instance_);
}
inline const ::TempoScripting::Transform& AddComponentResponse::transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.AddComponentResponse.transform)
  return _internal_transform();
}
inline void AddComponentResponse::unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.AddComponentResponse.transform)
}
inline ::TempoScripting::Transform* AddComponentResponse::release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* released = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Transform* AddComponentResponse::unsafe_arena_release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.AddComponentResponse.transform)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::TempoScripting::Transform* AddComponentResponse::_internal_mutable_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Transform>(GetArena());
    _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(p);
  }
  return _impl_.transform_;
}
inline ::TempoScripting::Transform* AddComponentResponse::mutable_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:TempoWorld.AddComponentResponse.transform)
  return _msg;
}
inline void AddComponentResponse::set_allocated_transform(::TempoScripting::Transform* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.AddComponentResponse.transform)
}

// -------------------------------------------------------------------

// DestroyComponentRequest

// string actor = 1;
inline void DestroyComponentRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& DestroyComponentRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.DestroyComponentRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DestroyComponentRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.DestroyComponentRequest.actor)
}
inline std::string* DestroyComponentRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.DestroyComponentRequest.actor)
  return _s;
}
inline const std::string& DestroyComponentRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void DestroyComponentRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* DestroyComponentRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* DestroyComponentRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.DestroyComponentRequest.actor)
  return _impl_.actor_.Release();
}
inline void DestroyComponentRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.DestroyComponentRequest.actor)
}

// string component = 2;
inline void DestroyComponentRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& DestroyComponentRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.DestroyComponentRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DestroyComponentRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.DestroyComponentRequest.component)
}
inline std::string* DestroyComponentRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.DestroyComponentRequest.component)
  return _s;
}
inline const std::string& DestroyComponentRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void DestroyComponentRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* DestroyComponentRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* DestroyComponentRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.DestroyComponentRequest.component)
  return _impl_.component_.Release();
}
inline void DestroyComponentRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.DestroyComponentRequest.component)
}

// -------------------------------------------------------------------

// SetActorTransformRequest

// string actor = 1;
inline void SetActorTransformRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetActorTransformRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorTransformRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetActorTransformRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorTransformRequest.actor)
}
inline std::string* SetActorTransformRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorTransformRequest.actor)
  return _s;
}
inline const std::string& SetActorTransformRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetActorTransformRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetActorTransformRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetActorTransformRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetActorTransformRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetActorTransformRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetActorTransformRequest.actor)
}

// .TempoScripting.Transform transform = 2;
inline bool SetActorTransformRequest::has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline const ::TempoScripting::Transform& SetActorTransformRequest::_internal_transform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Transform&>(::TempoScripting::_Transform_default_instance_);
}
inline const ::TempoScripting::Transform& SetActorTransformRequest::transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorTransformRequest.transform)
  return _internal_transform();
}
inline void SetActorTransformRequest::unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.SetActorTransformRequest.transform)
}
inline ::TempoScripting::Transform* SetActorTransformRequest::release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* released = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Transform* SetActorTransformRequest::unsafe_arena_release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetActorTransformRequest.transform)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::TempoScripting::Transform* SetActorTransformRequest::_internal_mutable_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Transform>(GetArena());
    _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(p);
  }
  return _impl_.transform_;
}
inline ::TempoScripting::Transform* SetActorTransformRequest::mutable_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorTransformRequest.transform)
  return _msg;
}
inline void SetActorTransformRequest::set_allocated_transform(::TempoScripting::Transform* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetActorTransformRequest.transform)
}

// string relative_to_actor = 3;
inline void SetActorTransformRequest::clear_relative_to_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relative_to_actor_.ClearToEmpty();
}
inline const std::string& SetActorTransformRequest::relative_to_actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorTransformRequest.relative_to_actor)
  return _internal_relative_to_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetActorTransformRequest::set_relative_to_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relative_to_actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorTransformRequest.relative_to_actor)
}
inline std::string* SetActorTransformRequest::mutable_relative_to_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_relative_to_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorTransformRequest.relative_to_actor)
  return _s;
}
inline const std::string& SetActorTransformRequest::_internal_relative_to_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relative_to_actor_.Get();
}
inline void SetActorTransformRequest::_internal_set_relative_to_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relative_to_actor_.Set(value, GetArena());
}
inline std::string* SetActorTransformRequest::_internal_mutable_relative_to_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.relative_to_actor_.Mutable( GetArena());
}
inline std::string* SetActorTransformRequest::release_relative_to_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetActorTransformRequest.relative_to_actor)
  return _impl_.relative_to_actor_.Release();
}
inline void SetActorTransformRequest::set_allocated_relative_to_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relative_to_actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relative_to_actor_.IsDefault()) {
          _impl_.relative_to_actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetActorTransformRequest.relative_to_actor)
}

// -------------------------------------------------------------------

// SetComponentTransformRequest

// string actor = 1;
inline void SetComponentTransformRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetComponentTransformRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentTransformRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetComponentTransformRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentTransformRequest.actor)
}
inline std::string* SetComponentTransformRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentTransformRequest.actor)
  return _s;
}
inline const std::string& SetComponentTransformRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetComponentTransformRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetComponentTransformRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetComponentTransformRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetComponentTransformRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetComponentTransformRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetComponentTransformRequest.actor)
}

// string component = 2;
inline void SetComponentTransformRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetComponentTransformRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentTransformRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetComponentTransformRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentTransformRequest.component)
}
inline std::string* SetComponentTransformRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentTransformRequest.component)
  return _s;
}
inline const std::string& SetComponentTransformRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetComponentTransformRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetComponentTransformRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetComponentTransformRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetComponentTransformRequest.component)
  return _impl_.component_.Release();
}
inline void SetComponentTransformRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetComponentTransformRequest.component)
}

// .TempoScripting.Transform transform = 3;
inline bool SetComponentTransformRequest::has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline const ::TempoScripting::Transform& SetComponentTransformRequest::_internal_transform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Transform&>(::TempoScripting::_Transform_default_instance_);
}
inline const ::TempoScripting::Transform& SetComponentTransformRequest::transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentTransformRequest.transform)
  return _internal_transform();
}
inline void SetComponentTransformRequest::unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.SetComponentTransformRequest.transform)
}
inline ::TempoScripting::Transform* SetComponentTransformRequest::release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* released = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Transform* SetComponentTransformRequest::unsafe_arena_release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetComponentTransformRequest.transform)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::TempoScripting::Transform* SetComponentTransformRequest::_internal_mutable_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Transform>(GetArena());
    _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(p);
  }
  return _impl_.transform_;
}
inline ::TempoScripting::Transform* SetComponentTransformRequest::mutable_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentTransformRequest.transform)
  return _msg;
}
inline void SetComponentTransformRequest::set_allocated_transform(::TempoScripting::Transform* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetComponentTransformRequest.transform)
}

// bool relative_to_world = 4;
inline void SetComponentTransformRequest::clear_relative_to_world() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relative_to_world_ = false;
}
inline bool SetComponentTransformRequest::relative_to_world() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentTransformRequest.relative_to_world)
  return _internal_relative_to_world();
}
inline void SetComponentTransformRequest::set_relative_to_world(bool value) {
  _internal_set_relative_to_world(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentTransformRequest.relative_to_world)
}
inline bool SetComponentTransformRequest::_internal_relative_to_world() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relative_to_world_;
}
inline void SetComponentTransformRequest::_internal_set_relative_to_world(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relative_to_world_ = value;
}

// -------------------------------------------------------------------

// ActivateComponentRequest

// string actor = 1;
inline void ActivateComponentRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& ActivateComponentRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActivateComponentRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActivateComponentRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.ActivateComponentRequest.actor)
}
inline std::string* ActivateComponentRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActivateComponentRequest.actor)
  return _s;
}
inline const std::string& ActivateComponentRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void ActivateComponentRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* ActivateComponentRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* ActivateComponentRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActivateComponentRequest.actor)
  return _impl_.actor_.Release();
}
inline void ActivateComponentRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActivateComponentRequest.actor)
}

// string component = 2;
inline void ActivateComponentRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& ActivateComponentRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActivateComponentRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActivateComponentRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.ActivateComponentRequest.component)
}
inline std::string* ActivateComponentRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActivateComponentRequest.component)
  return _s;
}
inline const std::string& ActivateComponentRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void ActivateComponentRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* ActivateComponentRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* ActivateComponentRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActivateComponentRequest.component)
  return _impl_.component_.Release();
}
inline void ActivateComponentRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActivateComponentRequest.component)
}

// -------------------------------------------------------------------

// DeactivateComponentRequest

// string actor = 1;
inline void DeactivateComponentRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& DeactivateComponentRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.DeactivateComponentRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeactivateComponentRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.DeactivateComponentRequest.actor)
}
inline std::string* DeactivateComponentRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.DeactivateComponentRequest.actor)
  return _s;
}
inline const std::string& DeactivateComponentRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void DeactivateComponentRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* DeactivateComponentRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* DeactivateComponentRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.DeactivateComponentRequest.actor)
  return _impl_.actor_.Release();
}
inline void DeactivateComponentRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.DeactivateComponentRequest.actor)
}

// string component = 2;
inline void DeactivateComponentRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& DeactivateComponentRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.DeactivateComponentRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeactivateComponentRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.DeactivateComponentRequest.component)
}
inline std::string* DeactivateComponentRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.DeactivateComponentRequest.component)
  return _s;
}
inline const std::string& DeactivateComponentRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void DeactivateComponentRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* DeactivateComponentRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* DeactivateComponentRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.DeactivateComponentRequest.component)
  return _impl_.component_.Release();
}
inline void DeactivateComponentRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.DeactivateComponentRequest.component)
}

// -------------------------------------------------------------------

// GetAllActorsRequest

// -------------------------------------------------------------------

// ActorDescriptor

// string name = 1;
inline void ActorDescriptor::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ActorDescriptor::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorDescriptor.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActorDescriptor::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.ActorDescriptor.name)
}
inline std::string* ActorDescriptor::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActorDescriptor.name)
  return _s;
}
inline const std::string& ActorDescriptor::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ActorDescriptor::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ActorDescriptor::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ActorDescriptor::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActorDescriptor.name)
  return _impl_.name_.Release();
}
inline void ActorDescriptor::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActorDescriptor.name)
}

// string type = 2;
inline void ActorDescriptor::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ActorDescriptor::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorDescriptor.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActorDescriptor::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.ActorDescriptor.type)
}
inline std::string* ActorDescriptor::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActorDescriptor.type)
  return _s;
}
inline const std::string& ActorDescriptor::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void ActorDescriptor::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* ActorDescriptor::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* ActorDescriptor::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActorDescriptor.type)
  return _impl_.type_.Release();
}
inline void ActorDescriptor::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActorDescriptor.type)
}

// -------------------------------------------------------------------

// GetAllActorsResponse

// repeated .TempoWorld.ActorDescriptor actors = 1;
inline int GetAllActorsResponse::_internal_actors_size() const {
  return _internal_actors().size();
}
inline int GetAllActorsResponse::actors_size() const {
  return _internal_actors_size();
}
inline void GetAllActorsResponse::clear_actors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actors_.Clear();
}
inline ::TempoWorld::ActorDescriptor* GetAllActorsResponse::mutable_actors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoWorld.GetAllActorsResponse.actors)
  return _internal_mutable_actors()->Mutable(index);
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorDescriptor>* GetAllActorsResponse::mutable_actors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.GetAllActorsResponse.actors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_actors();
}
inline const ::TempoWorld::ActorDescriptor& GetAllActorsResponse::actors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.GetAllActorsResponse.actors)
  return _internal_actors().Get(index);
}
inline ::TempoWorld::ActorDescriptor* GetAllActorsResponse::add_actors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::TempoWorld::ActorDescriptor* _add = _internal_mutable_actors()->Add();
  // @@protoc_insertion_point(field_add:TempoWorld.GetAllActorsResponse.actors)
  return _add;
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorDescriptor>& GetAllActorsResponse::actors() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.GetAllActorsResponse.actors)
  return _internal_actors();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorDescriptor>&
GetAllActorsResponse::_internal_actors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actors_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorDescriptor>*
GetAllActorsResponse::_internal_mutable_actors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.actors_;
}

// -------------------------------------------------------------------

// GetAllComponentsRequest

// string actor = 1;
inline void GetAllComponentsRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& GetAllComponentsRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.GetAllComponentsRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAllComponentsRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.GetAllComponentsRequest.actor)
}
inline std::string* GetAllComponentsRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.GetAllComponentsRequest.actor)
  return _s;
}
inline const std::string& GetAllComponentsRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void GetAllComponentsRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* GetAllComponentsRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* GetAllComponentsRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.GetAllComponentsRequest.actor)
  return _impl_.actor_.Release();
}
inline void GetAllComponentsRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.GetAllComponentsRequest.actor)
}

// -------------------------------------------------------------------

// ComponentDescriptor

// string actor = 1;
inline void ComponentDescriptor::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& ComponentDescriptor::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ComponentDescriptor.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComponentDescriptor::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.ComponentDescriptor.actor)
}
inline std::string* ComponentDescriptor::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ComponentDescriptor.actor)
  return _s;
}
inline const std::string& ComponentDescriptor::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void ComponentDescriptor::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* ComponentDescriptor::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* ComponentDescriptor::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ComponentDescriptor.actor)
  return _impl_.actor_.Release();
}
inline void ComponentDescriptor::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ComponentDescriptor.actor)
}

// string name = 2;
inline void ComponentDescriptor::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ComponentDescriptor::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ComponentDescriptor.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComponentDescriptor::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.ComponentDescriptor.name)
}
inline std::string* ComponentDescriptor::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ComponentDescriptor.name)
  return _s;
}
inline const std::string& ComponentDescriptor::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ComponentDescriptor::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ComponentDescriptor::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ComponentDescriptor::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ComponentDescriptor.name)
  return _impl_.name_.Release();
}
inline void ComponentDescriptor::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ComponentDescriptor.name)
}

// string type = 3;
inline void ComponentDescriptor::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ComponentDescriptor::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ComponentDescriptor.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComponentDescriptor::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.ComponentDescriptor.type)
}
inline std::string* ComponentDescriptor::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ComponentDescriptor.type)
  return _s;
}
inline const std::string& ComponentDescriptor::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void ComponentDescriptor::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* ComponentDescriptor::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* ComponentDescriptor::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ComponentDescriptor.type)
  return _impl_.type_.Release();
}
inline void ComponentDescriptor::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ComponentDescriptor.type)
}

// -------------------------------------------------------------------

// GetAllComponentsResponse

// repeated .TempoWorld.ComponentDescriptor components = 1;
inline int GetAllComponentsResponse::_internal_components_size() const {
  return _internal_components().size();
}
inline int GetAllComponentsResponse::components_size() const {
  return _internal_components_size();
}
inline void GetAllComponentsResponse::clear_components() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.components_.Clear();
}
inline ::TempoWorld::ComponentDescriptor* GetAllComponentsResponse::mutable_components(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoWorld.GetAllComponentsResponse.components)
  return _internal_mutable_components()->Mutable(index);
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ComponentDescriptor>* GetAllComponentsResponse::mutable_components()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.GetAllComponentsResponse.components)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_components();
}
inline const ::TempoWorld::ComponentDescriptor& GetAllComponentsResponse::components(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.GetAllComponentsResponse.components)
  return _internal_components().Get(index);
}
inline ::TempoWorld::ComponentDescriptor* GetAllComponentsResponse::add_components() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::TempoWorld::ComponentDescriptor* _add = _internal_mutable_components()->Add();
  // @@protoc_insertion_point(field_add:TempoWorld.GetAllComponentsResponse.components)
  return _add;
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ComponentDescriptor>& GetAllComponentsResponse::components() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.GetAllComponentsResponse.components)
  return _internal_components();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ComponentDescriptor>&
GetAllComponentsResponse::_internal_components() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.components_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ComponentDescriptor>*
GetAllComponentsResponse::_internal_mutable_components() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.components_;
}

// -------------------------------------------------------------------

// GetActorPropertiesRequest

// string actor = 1;
inline void GetActorPropertiesRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& GetActorPropertiesRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.GetActorPropertiesRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetActorPropertiesRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.GetActorPropertiesRequest.actor)
}
inline std::string* GetActorPropertiesRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.GetActorPropertiesRequest.actor)
  return _s;
}
inline const std::string& GetActorPropertiesRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void GetActorPropertiesRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* GetActorPropertiesRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* GetActorPropertiesRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.GetActorPropertiesRequest.actor)
  return _impl_.actor_.Release();
}
inline void GetActorPropertiesRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.GetActorPropertiesRequest.actor)
}

// bool include_components = 2;
inline void GetActorPropertiesRequest::clear_include_components() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.include_components_ = false;
}
inline bool GetActorPropertiesRequest::include_components() const {
  // @@protoc_insertion_point(field_get:TempoWorld.GetActorPropertiesRequest.include_components)
  return _internal_include_components();
}
inline void GetActorPropertiesRequest::set_include_components(bool value) {
  _internal_set_include_components(value);
  // @@protoc_insertion_point(field_set:TempoWorld.GetActorPropertiesRequest.include_components)
}
inline bool GetActorPropertiesRequest::_internal_include_components() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.include_components_;
}
inline void GetActorPropertiesRequest::_internal_set_include_components(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.include_components_ = value;
}

// -------------------------------------------------------------------

// GetComponentPropertiesRequest

// string actor = 1;
inline void GetComponentPropertiesRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& GetComponentPropertiesRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.GetComponentPropertiesRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetComponentPropertiesRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.GetComponentPropertiesRequest.actor)
}
inline std::string* GetComponentPropertiesRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.GetComponentPropertiesRequest.actor)
  return _s;
}
inline const std::string& GetComponentPropertiesRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void GetComponentPropertiesRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* GetComponentPropertiesRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* GetComponentPropertiesRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.GetComponentPropertiesRequest.actor)
  return _impl_.actor_.Release();
}
inline void GetComponentPropertiesRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.GetComponentPropertiesRequest.actor)
}

// string component = 2;
inline void GetComponentPropertiesRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& GetComponentPropertiesRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.GetComponentPropertiesRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetComponentPropertiesRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.GetComponentPropertiesRequest.component)
}
inline std::string* GetComponentPropertiesRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.GetComponentPropertiesRequest.component)
  return _s;
}
inline const std::string& GetComponentPropertiesRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void GetComponentPropertiesRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* GetComponentPropertiesRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* GetComponentPropertiesRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.GetComponentPropertiesRequest.component)
  return _impl_.component_.Release();
}
inline void GetComponentPropertiesRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.GetComponentPropertiesRequest.component)
}

// -------------------------------------------------------------------

// PropertyDescriptor

// string actor = 1;
inline void PropertyDescriptor::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& PropertyDescriptor::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.PropertyDescriptor.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyDescriptor::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.PropertyDescriptor.actor)
}
inline std::string* PropertyDescriptor::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.PropertyDescriptor.actor)
  return _s;
}
inline const std::string& PropertyDescriptor::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void PropertyDescriptor::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* PropertyDescriptor::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* PropertyDescriptor::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.PropertyDescriptor.actor)
  return _impl_.actor_.Release();
}
inline void PropertyDescriptor::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.PropertyDescriptor.actor)
}

// string component = 2;
inline void PropertyDescriptor::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& PropertyDescriptor::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.PropertyDescriptor.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyDescriptor::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.PropertyDescriptor.component)
}
inline std::string* PropertyDescriptor::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.PropertyDescriptor.component)
  return _s;
}
inline const std::string& PropertyDescriptor::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void PropertyDescriptor::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* PropertyDescriptor::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* PropertyDescriptor::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.PropertyDescriptor.component)
  return _impl_.component_.Release();
}
inline void PropertyDescriptor::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.PropertyDescriptor.component)
}

// string name = 3;
inline void PropertyDescriptor::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PropertyDescriptor::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.PropertyDescriptor.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyDescriptor::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.PropertyDescriptor.name)
}
inline std::string* PropertyDescriptor::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.PropertyDescriptor.name)
  return _s;
}
inline const std::string& PropertyDescriptor::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void PropertyDescriptor::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PropertyDescriptor::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PropertyDescriptor::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.PropertyDescriptor.name)
  return _impl_.name_.Release();
}
inline void PropertyDescriptor::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.PropertyDescriptor.name)
}

// string type = 4;
inline void PropertyDescriptor::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& PropertyDescriptor::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.PropertyDescriptor.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyDescriptor::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.PropertyDescriptor.type)
}
inline std::string* PropertyDescriptor::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:TempoWorld.PropertyDescriptor.type)
  return _s;
}
inline const std::string& PropertyDescriptor::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void PropertyDescriptor::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* PropertyDescriptor::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* PropertyDescriptor::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.PropertyDescriptor.type)
  return _impl_.type_.Release();
}
inline void PropertyDescriptor::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.PropertyDescriptor.type)
}

// string value = 5;
inline void PropertyDescriptor::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& PropertyDescriptor::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.PropertyDescriptor.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyDescriptor::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.PropertyDescriptor.value)
}
inline std::string* PropertyDescriptor::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TempoWorld.PropertyDescriptor.value)
  return _s;
}
inline const std::string& PropertyDescriptor::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void PropertyDescriptor::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* PropertyDescriptor::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* PropertyDescriptor::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.PropertyDescriptor.value)
  return _impl_.value_.Release();
}
inline void PropertyDescriptor::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.PropertyDescriptor.value)
}

// -------------------------------------------------------------------

// GetPropertiesResponse

// repeated .TempoWorld.PropertyDescriptor properties = 1;
inline int GetPropertiesResponse::_internal_properties_size() const {
  return _internal_properties().size();
}
inline int GetPropertiesResponse::properties_size() const {
  return _internal_properties_size();
}
inline void GetPropertiesResponse::clear_properties() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.properties_.Clear();
}
inline ::TempoWorld::PropertyDescriptor* GetPropertiesResponse::mutable_properties(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoWorld.GetPropertiesResponse.properties)
  return _internal_mutable_properties()->Mutable(index);
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::PropertyDescriptor>* GetPropertiesResponse::mutable_properties()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.GetPropertiesResponse.properties)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_properties();
}
inline const ::TempoWorld::PropertyDescriptor& GetPropertiesResponse::properties(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.GetPropertiesResponse.properties)
  return _internal_properties().Get(index);
}
inline ::TempoWorld::PropertyDescriptor* GetPropertiesResponse::add_properties() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::TempoWorld::PropertyDescriptor* _add = _internal_mutable_properties()->Add();
  // @@protoc_insertion_point(field_add:TempoWorld.GetPropertiesResponse.properties)
  return _add;
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::PropertyDescriptor>& GetPropertiesResponse::properties() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.GetPropertiesResponse.properties)
  return _internal_properties();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::PropertyDescriptor>&
GetPropertiesResponse::_internal_properties() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.properties_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::PropertyDescriptor>*
GetPropertiesResponse::_internal_mutable_properties() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.properties_;
}

// -------------------------------------------------------------------

// SetBoolPropertyRequest

// string actor = 1;
inline void SetBoolPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetBoolPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetBoolPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetBoolPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetBoolPropertyRequest.actor)
}
inline std::string* SetBoolPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetBoolPropertyRequest.actor)
  return _s;
}
inline const std::string& SetBoolPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetBoolPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetBoolPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetBoolPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetBoolPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetBoolPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetBoolPropertyRequest.actor)
}

// string component = 2;
inline void SetBoolPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetBoolPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetBoolPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetBoolPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetBoolPropertyRequest.component)
}
inline std::string* SetBoolPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetBoolPropertyRequest.component)
  return _s;
}
inline const std::string& SetBoolPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetBoolPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetBoolPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetBoolPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetBoolPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetBoolPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetBoolPropertyRequest.component)
}

// string property = 3;
inline void SetBoolPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetBoolPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetBoolPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetBoolPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetBoolPropertyRequest.property)
}
inline std::string* SetBoolPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetBoolPropertyRequest.property)
  return _s;
}
inline const std::string& SetBoolPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetBoolPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetBoolPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetBoolPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetBoolPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetBoolPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetBoolPropertyRequest.property)
}

// bool value = 4;
inline void SetBoolPropertyRequest::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = false;
}
inline bool SetBoolPropertyRequest::value() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetBoolPropertyRequest.value)
  return _internal_value();
}
inline void SetBoolPropertyRequest::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetBoolPropertyRequest.value)
}
inline bool SetBoolPropertyRequest::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void SetBoolPropertyRequest::_internal_set_value(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SetStringPropertyRequest

// string actor = 1;
inline void SetStringPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetStringPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetStringPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetStringPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetStringPropertyRequest.actor)
}
inline std::string* SetStringPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetStringPropertyRequest.actor)
  return _s;
}
inline const std::string& SetStringPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetStringPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetStringPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetStringPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetStringPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetStringPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetStringPropertyRequest.actor)
}

// string component = 2;
inline void SetStringPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetStringPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetStringPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetStringPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetStringPropertyRequest.component)
}
inline std::string* SetStringPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetStringPropertyRequest.component)
  return _s;
}
inline const std::string& SetStringPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetStringPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetStringPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetStringPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetStringPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetStringPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetStringPropertyRequest.component)
}

// string property = 3;
inline void SetStringPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetStringPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetStringPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetStringPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetStringPropertyRequest.property)
}
inline std::string* SetStringPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetStringPropertyRequest.property)
  return _s;
}
inline const std::string& SetStringPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetStringPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetStringPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetStringPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetStringPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetStringPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetStringPropertyRequest.property)
}

// string value = 4;
inline void SetStringPropertyRequest::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SetStringPropertyRequest::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetStringPropertyRequest.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetStringPropertyRequest::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetStringPropertyRequest.value)
}
inline std::string* SetStringPropertyRequest::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetStringPropertyRequest.value)
  return _s;
}
inline const std::string& SetStringPropertyRequest::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void SetStringPropertyRequest::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* SetStringPropertyRequest::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* SetStringPropertyRequest::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetStringPropertyRequest.value)
  return _impl_.value_.Release();
}
inline void SetStringPropertyRequest::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetStringPropertyRequest.value)
}

// -------------------------------------------------------------------

// SetEnumPropertyRequest

// string actor = 1;
inline void SetEnumPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetEnumPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetEnumPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetEnumPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetEnumPropertyRequest.actor)
}
inline std::string* SetEnumPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetEnumPropertyRequest.actor)
  return _s;
}
inline const std::string& SetEnumPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetEnumPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetEnumPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetEnumPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetEnumPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetEnumPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetEnumPropertyRequest.actor)
}

// string component = 2;
inline void SetEnumPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetEnumPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetEnumPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetEnumPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetEnumPropertyRequest.component)
}
inline std::string* SetEnumPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetEnumPropertyRequest.component)
  return _s;
}
inline const std::string& SetEnumPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetEnumPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetEnumPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetEnumPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetEnumPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetEnumPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetEnumPropertyRequest.component)
}

// string property = 3;
inline void SetEnumPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetEnumPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetEnumPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetEnumPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetEnumPropertyRequest.property)
}
inline std::string* SetEnumPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetEnumPropertyRequest.property)
  return _s;
}
inline const std::string& SetEnumPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetEnumPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetEnumPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetEnumPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetEnumPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetEnumPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetEnumPropertyRequest.property)
}

// string value = 4;
inline void SetEnumPropertyRequest::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SetEnumPropertyRequest::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetEnumPropertyRequest.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetEnumPropertyRequest::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetEnumPropertyRequest.value)
}
inline std::string* SetEnumPropertyRequest::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetEnumPropertyRequest.value)
  return _s;
}
inline const std::string& SetEnumPropertyRequest::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void SetEnumPropertyRequest::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* SetEnumPropertyRequest::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* SetEnumPropertyRequest::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetEnumPropertyRequest.value)
  return _impl_.value_.Release();
}
inline void SetEnumPropertyRequest::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetEnumPropertyRequest.value)
}

// -------------------------------------------------------------------

// SetIntPropertyRequest

// string actor = 1;
inline void SetIntPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetIntPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetIntPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetIntPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetIntPropertyRequest.actor)
}
inline std::string* SetIntPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetIntPropertyRequest.actor)
  return _s;
}
inline const std::string& SetIntPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetIntPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetIntPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetIntPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetIntPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetIntPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetIntPropertyRequest.actor)
}

// string component = 2;
inline void SetIntPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetIntPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetIntPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetIntPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetIntPropertyRequest.component)
}
inline std::string* SetIntPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetIntPropertyRequest.component)
  return _s;
}
inline const std::string& SetIntPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetIntPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetIntPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetIntPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetIntPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetIntPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetIntPropertyRequest.component)
}

// string property = 3;
inline void SetIntPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetIntPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetIntPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetIntPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetIntPropertyRequest.property)
}
inline std::string* SetIntPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetIntPropertyRequest.property)
  return _s;
}
inline const std::string& SetIntPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetIntPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetIntPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetIntPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetIntPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetIntPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetIntPropertyRequest.property)
}

// int32 value = 4;
inline void SetIntPropertyRequest::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
}
inline ::int32_t SetIntPropertyRequest::value() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetIntPropertyRequest.value)
  return _internal_value();
}
inline void SetIntPropertyRequest::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetIntPropertyRequest.value)
}
inline ::int32_t SetIntPropertyRequest::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void SetIntPropertyRequest::_internal_set_value(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SetFloatPropertyRequest

// string actor = 1;
inline void SetFloatPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetFloatPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetFloatPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetFloatPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetFloatPropertyRequest.actor)
}
inline std::string* SetFloatPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetFloatPropertyRequest.actor)
  return _s;
}
inline const std::string& SetFloatPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetFloatPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetFloatPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetFloatPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetFloatPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetFloatPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetFloatPropertyRequest.actor)
}

// string component = 2;
inline void SetFloatPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetFloatPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetFloatPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetFloatPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetFloatPropertyRequest.component)
}
inline std::string* SetFloatPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetFloatPropertyRequest.component)
  return _s;
}
inline const std::string& SetFloatPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetFloatPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetFloatPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetFloatPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetFloatPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetFloatPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetFloatPropertyRequest.component)
}

// string property = 3;
inline void SetFloatPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetFloatPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetFloatPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetFloatPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetFloatPropertyRequest.property)
}
inline std::string* SetFloatPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetFloatPropertyRequest.property)
  return _s;
}
inline const std::string& SetFloatPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetFloatPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetFloatPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetFloatPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetFloatPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetFloatPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetFloatPropertyRequest.property)
}

// float value = 4;
inline void SetFloatPropertyRequest::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
}
inline float SetFloatPropertyRequest::value() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetFloatPropertyRequest.value)
  return _internal_value();
}
inline void SetFloatPropertyRequest::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetFloatPropertyRequest.value)
}
inline float SetFloatPropertyRequest::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void SetFloatPropertyRequest::_internal_set_value(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SetVectorPropertyRequest

// string actor = 1;
inline void SetVectorPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetVectorPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetVectorPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetVectorPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetVectorPropertyRequest.actor)
}
inline std::string* SetVectorPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetVectorPropertyRequest.actor)
  return _s;
}
inline const std::string& SetVectorPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetVectorPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetVectorPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetVectorPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetVectorPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetVectorPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetVectorPropertyRequest.actor)
}

// string component = 2;
inline void SetVectorPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetVectorPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetVectorPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetVectorPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetVectorPropertyRequest.component)
}
inline std::string* SetVectorPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetVectorPropertyRequest.component)
  return _s;
}
inline const std::string& SetVectorPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetVectorPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetVectorPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetVectorPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetVectorPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetVectorPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetVectorPropertyRequest.component)
}

// string property = 3;
inline void SetVectorPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetVectorPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetVectorPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetVectorPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetVectorPropertyRequest.property)
}
inline std::string* SetVectorPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetVectorPropertyRequest.property)
  return _s;
}
inline const std::string& SetVectorPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetVectorPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetVectorPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetVectorPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetVectorPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetVectorPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetVectorPropertyRequest.property)
}

// float x = 4;
inline void SetVectorPropertyRequest::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline float SetVectorPropertyRequest::x() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetVectorPropertyRequest.x)
  return _internal_x();
}
inline void SetVectorPropertyRequest::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetVectorPropertyRequest.x)
}
inline float SetVectorPropertyRequest::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void SetVectorPropertyRequest::_internal_set_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// float y = 5;
inline void SetVectorPropertyRequest::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline float SetVectorPropertyRequest::y() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetVectorPropertyRequest.y)
  return _internal_y();
}
inline void SetVectorPropertyRequest::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetVectorPropertyRequest.y)
}
inline float SetVectorPropertyRequest::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void SetVectorPropertyRequest::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// float z = 6;
inline void SetVectorPropertyRequest::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline float SetVectorPropertyRequest::z() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetVectorPropertyRequest.z)
  return _internal_z();
}
inline void SetVectorPropertyRequest::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetVectorPropertyRequest.z)
}
inline float SetVectorPropertyRequest::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void SetVectorPropertyRequest::_internal_set_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// SetRotatorPropertyRequest

// string actor = 1;
inline void SetRotatorPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetRotatorPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetRotatorPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetRotatorPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetRotatorPropertyRequest.actor)
}
inline std::string* SetRotatorPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetRotatorPropertyRequest.actor)
  return _s;
}
inline const std::string& SetRotatorPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetRotatorPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetRotatorPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetRotatorPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetRotatorPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetRotatorPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetRotatorPropertyRequest.actor)
}

// string component = 2;
inline void SetRotatorPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetRotatorPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetRotatorPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetRotatorPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetRotatorPropertyRequest.component)
}
inline std::string* SetRotatorPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetRotatorPropertyRequest.component)
  return _s;
}
inline const std::string& SetRotatorPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetRotatorPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetRotatorPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetRotatorPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetRotatorPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetRotatorPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetRotatorPropertyRequest.component)
}

// string property = 3;
inline void SetRotatorPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetRotatorPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetRotatorPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetRotatorPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetRotatorPropertyRequest.property)
}
inline std::string* SetRotatorPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetRotatorPropertyRequest.property)
  return _s;
}
inline const std::string& SetRotatorPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetRotatorPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetRotatorPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetRotatorPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetRotatorPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetRotatorPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetRotatorPropertyRequest.property)
}

// float r = 4;
inline void SetRotatorPropertyRequest::clear_r() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.r_ = 0;
}
inline float SetRotatorPropertyRequest::r() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetRotatorPropertyRequest.r)
  return _internal_r();
}
inline void SetRotatorPropertyRequest::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetRotatorPropertyRequest.r)
}
inline float SetRotatorPropertyRequest::_internal_r() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.r_;
}
inline void SetRotatorPropertyRequest::_internal_set_r(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.r_ = value;
}

// float p = 5;
inline void SetRotatorPropertyRequest::clear_p() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.p_ = 0;
}
inline float SetRotatorPropertyRequest::p() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetRotatorPropertyRequest.p)
  return _internal_p();
}
inline void SetRotatorPropertyRequest::set_p(float value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetRotatorPropertyRequest.p)
}
inline float SetRotatorPropertyRequest::_internal_p() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.p_;
}
inline void SetRotatorPropertyRequest::_internal_set_p(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.p_ = value;
}

// float y = 6;
inline void SetRotatorPropertyRequest::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline float SetRotatorPropertyRequest::y() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetRotatorPropertyRequest.y)
  return _internal_y();
}
inline void SetRotatorPropertyRequest::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetRotatorPropertyRequest.y)
}
inline float SetRotatorPropertyRequest::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void SetRotatorPropertyRequest::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// SetColorPropertyRequest

// string actor = 1;
inline void SetColorPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetColorPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetColorPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetColorPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetColorPropertyRequest.actor)
}
inline std::string* SetColorPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetColorPropertyRequest.actor)
  return _s;
}
inline const std::string& SetColorPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetColorPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetColorPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetColorPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetColorPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetColorPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetColorPropertyRequest.actor)
}

// string component = 2;
inline void SetColorPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetColorPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetColorPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetColorPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetColorPropertyRequest.component)
}
inline std::string* SetColorPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetColorPropertyRequest.component)
  return _s;
}
inline const std::string& SetColorPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetColorPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetColorPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetColorPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetColorPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetColorPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetColorPropertyRequest.component)
}

// string property = 3;
inline void SetColorPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetColorPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetColorPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetColorPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetColorPropertyRequest.property)
}
inline std::string* SetColorPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetColorPropertyRequest.property)
  return _s;
}
inline const std::string& SetColorPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetColorPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetColorPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetColorPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetColorPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetColorPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetColorPropertyRequest.property)
}

// int32 r = 4;
inline void SetColorPropertyRequest::clear_r() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.r_ = 0;
}
inline ::int32_t SetColorPropertyRequest::r() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetColorPropertyRequest.r)
  return _internal_r();
}
inline void SetColorPropertyRequest::set_r(::int32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetColorPropertyRequest.r)
}
inline ::int32_t SetColorPropertyRequest::_internal_r() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.r_;
}
inline void SetColorPropertyRequest::_internal_set_r(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.r_ = value;
}

// int32 g = 5;
inline void SetColorPropertyRequest::clear_g() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.g_ = 0;
}
inline ::int32_t SetColorPropertyRequest::g() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetColorPropertyRequest.g)
  return _internal_g();
}
inline void SetColorPropertyRequest::set_g(::int32_t value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetColorPropertyRequest.g)
}
inline ::int32_t SetColorPropertyRequest::_internal_g() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.g_;
}
inline void SetColorPropertyRequest::_internal_set_g(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.g_ = value;
}

// int32 b = 6;
inline void SetColorPropertyRequest::clear_b() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.b_ = 0;
}
inline ::int32_t SetColorPropertyRequest::b() const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetColorPropertyRequest.b)
  return _internal_b();
}
inline void SetColorPropertyRequest::set_b(::int32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetColorPropertyRequest.b)
}
inline ::int32_t SetColorPropertyRequest::_internal_b() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.b_;
}
inline void SetColorPropertyRequest::_internal_set_b(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.b_ = value;
}

// -------------------------------------------------------------------

// SetClassPropertyRequest

// string actor = 1;
inline void SetClassPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetClassPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetClassPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetClassPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetClassPropertyRequest.actor)
}
inline std::string* SetClassPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetClassPropertyRequest.actor)
  return _s;
}
inline const std::string& SetClassPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetClassPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetClassPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetClassPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetClassPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetClassPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetClassPropertyRequest.actor)
}

// string component = 2;
inline void SetClassPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetClassPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetClassPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetClassPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetClassPropertyRequest.component)
}
inline std::string* SetClassPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetClassPropertyRequest.component)
  return _s;
}
inline const std::string& SetClassPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetClassPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetClassPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetClassPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetClassPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetClassPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetClassPropertyRequest.component)
}

// string property = 3;
inline void SetClassPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetClassPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetClassPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetClassPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetClassPropertyRequest.property)
}
inline std::string* SetClassPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetClassPropertyRequest.property)
  return _s;
}
inline const std::string& SetClassPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetClassPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetClassPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetClassPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetClassPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetClassPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetClassPropertyRequest.property)
}

// string value = 4;
inline void SetClassPropertyRequest::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SetClassPropertyRequest::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetClassPropertyRequest.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetClassPropertyRequest::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetClassPropertyRequest.value)
}
inline std::string* SetClassPropertyRequest::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetClassPropertyRequest.value)
  return _s;
}
inline const std::string& SetClassPropertyRequest::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void SetClassPropertyRequest::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* SetClassPropertyRequest::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* SetClassPropertyRequest::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetClassPropertyRequest.value)
  return _impl_.value_.Release();
}
inline void SetClassPropertyRequest::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetClassPropertyRequest.value)
}

// -------------------------------------------------------------------

// SetAssetPropertyRequest

// string actor = 1;
inline void SetAssetPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetAssetPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetAssetPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetAssetPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetAssetPropertyRequest.actor)
}
inline std::string* SetAssetPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetAssetPropertyRequest.actor)
  return _s;
}
inline const std::string& SetAssetPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetAssetPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetAssetPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetAssetPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetAssetPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetAssetPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetAssetPropertyRequest.actor)
}

// string component = 2;
inline void SetAssetPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetAssetPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetAssetPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetAssetPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetAssetPropertyRequest.component)
}
inline std::string* SetAssetPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetAssetPropertyRequest.component)
  return _s;
}
inline const std::string& SetAssetPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetAssetPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetAssetPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetAssetPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetAssetPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetAssetPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetAssetPropertyRequest.component)
}

// string property = 3;
inline void SetAssetPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetAssetPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetAssetPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetAssetPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetAssetPropertyRequest.property)
}
inline std::string* SetAssetPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetAssetPropertyRequest.property)
  return _s;
}
inline const std::string& SetAssetPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetAssetPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetAssetPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetAssetPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetAssetPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetAssetPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetAssetPropertyRequest.property)
}

// string value = 4;
inline void SetAssetPropertyRequest::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SetAssetPropertyRequest::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetAssetPropertyRequest.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetAssetPropertyRequest::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetAssetPropertyRequest.value)
}
inline std::string* SetAssetPropertyRequest::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetAssetPropertyRequest.value)
  return _s;
}
inline const std::string& SetAssetPropertyRequest::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void SetAssetPropertyRequest::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* SetAssetPropertyRequest::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* SetAssetPropertyRequest::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetAssetPropertyRequest.value)
  return _impl_.value_.Release();
}
inline void SetAssetPropertyRequest::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetAssetPropertyRequest.value)
}

// -------------------------------------------------------------------

// SetActorPropertyRequest

// string actor = 1;
inline void SetActorPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetActorPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetActorPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorPropertyRequest.actor)
}
inline std::string* SetActorPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorPropertyRequest.actor)
  return _s;
}
inline const std::string& SetActorPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetActorPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetActorPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetActorPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetActorPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetActorPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetActorPropertyRequest.actor)
}

// string component = 2;
inline void SetActorPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetActorPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetActorPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorPropertyRequest.component)
}
inline std::string* SetActorPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorPropertyRequest.component)
  return _s;
}
inline const std::string& SetActorPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetActorPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetActorPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetActorPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetActorPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetActorPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetActorPropertyRequest.component)
}

// string property = 3;
inline void SetActorPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetActorPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetActorPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorPropertyRequest.property)
}
inline std::string* SetActorPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorPropertyRequest.property)
  return _s;
}
inline const std::string& SetActorPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetActorPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetActorPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetActorPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetActorPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetActorPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetActorPropertyRequest.property)
}

// string value = 4;
inline void SetActorPropertyRequest::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SetActorPropertyRequest::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorPropertyRequest.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetActorPropertyRequest::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorPropertyRequest.value)
}
inline std::string* SetActorPropertyRequest::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorPropertyRequest.value)
  return _s;
}
inline const std::string& SetActorPropertyRequest::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void SetActorPropertyRequest::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* SetActorPropertyRequest::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* SetActorPropertyRequest::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetActorPropertyRequest.value)
  return _impl_.value_.Release();
}
inline void SetActorPropertyRequest::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetActorPropertyRequest.value)
}

// -------------------------------------------------------------------

// SetComponentPropertyRequest

// string actor = 1;
inline void SetComponentPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetComponentPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetComponentPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentPropertyRequest.actor)
}
inline std::string* SetComponentPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentPropertyRequest.actor)
  return _s;
}
inline const std::string& SetComponentPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetComponentPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetComponentPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetComponentPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetComponentPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetComponentPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetComponentPropertyRequest.actor)
}

// string component = 2;
inline void SetComponentPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetComponentPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetComponentPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentPropertyRequest.component)
}
inline std::string* SetComponentPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentPropertyRequest.component)
  return _s;
}
inline const std::string& SetComponentPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetComponentPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetComponentPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetComponentPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetComponentPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetComponentPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetComponentPropertyRequest.component)
}

// string property = 3;
inline void SetComponentPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetComponentPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetComponentPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentPropertyRequest.property)
}
inline std::string* SetComponentPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentPropertyRequest.property)
  return _s;
}
inline const std::string& SetComponentPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetComponentPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetComponentPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetComponentPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetComponentPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetComponentPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetComponentPropertyRequest.property)
}

// string value = 4;
inline void SetComponentPropertyRequest::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SetComponentPropertyRequest::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentPropertyRequest.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetComponentPropertyRequest::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentPropertyRequest.value)
}
inline std::string* SetComponentPropertyRequest::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentPropertyRequest.value)
  return _s;
}
inline const std::string& SetComponentPropertyRequest::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void SetComponentPropertyRequest::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* SetComponentPropertyRequest::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* SetComponentPropertyRequest::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetComponentPropertyRequest.value)
  return _impl_.value_.Release();
}
inline void SetComponentPropertyRequest::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetComponentPropertyRequest.value)
}

// -------------------------------------------------------------------

// SetBoolArrayPropertyRequest

// string actor = 1;
inline void SetBoolArrayPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetBoolArrayPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetBoolArrayPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetBoolArrayPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetBoolArrayPropertyRequest.actor)
}
inline std::string* SetBoolArrayPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetBoolArrayPropertyRequest.actor)
  return _s;
}
inline const std::string& SetBoolArrayPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetBoolArrayPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetBoolArrayPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetBoolArrayPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetBoolArrayPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetBoolArrayPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetBoolArrayPropertyRequest.actor)
}

// string component = 2;
inline void SetBoolArrayPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetBoolArrayPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetBoolArrayPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetBoolArrayPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetBoolArrayPropertyRequest.component)
}
inline std::string* SetBoolArrayPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetBoolArrayPropertyRequest.component)
  return _s;
}
inline const std::string& SetBoolArrayPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetBoolArrayPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetBoolArrayPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetBoolArrayPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetBoolArrayPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetBoolArrayPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetBoolArrayPropertyRequest.component)
}

// string property = 3;
inline void SetBoolArrayPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetBoolArrayPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetBoolArrayPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetBoolArrayPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetBoolArrayPropertyRequest.property)
}
inline std::string* SetBoolArrayPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetBoolArrayPropertyRequest.property)
  return _s;
}
inline const std::string& SetBoolArrayPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetBoolArrayPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetBoolArrayPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetBoolArrayPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetBoolArrayPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetBoolArrayPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetBoolArrayPropertyRequest.property)
}

// repeated bool values = 4;
inline int SetBoolArrayPropertyRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int SetBoolArrayPropertyRequest::values_size() const {
  return _internal_values_size();
}
inline void SetBoolArrayPropertyRequest::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline bool SetBoolArrayPropertyRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetBoolArrayPropertyRequest.values)
  return _internal_values().Get(index);
}
inline void SetBoolArrayPropertyRequest::set_values(int index, bool value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetBoolArrayPropertyRequest.values)
}
inline void SetBoolArrayPropertyRequest::add_values(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:TempoWorld.SetBoolArrayPropertyRequest.values)
}
inline const ::google::protobuf_tempo::RepeatedField<bool>& SetBoolArrayPropertyRequest::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.SetBoolArrayPropertyRequest.values)
  return _internal_values();
}
inline ::google::protobuf_tempo::RepeatedField<bool>* SetBoolArrayPropertyRequest::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.SetBoolArrayPropertyRequest.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf_tempo::RepeatedField<bool>& SetBoolArrayPropertyRequest::_internal_values()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf_tempo::RepeatedField<bool>* SetBoolArrayPropertyRequest::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SetStringArrayPropertyRequest

// string actor = 1;
inline void SetStringArrayPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetStringArrayPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetStringArrayPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetStringArrayPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetStringArrayPropertyRequest.actor)
}
inline std::string* SetStringArrayPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetStringArrayPropertyRequest.actor)
  return _s;
}
inline const std::string& SetStringArrayPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetStringArrayPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetStringArrayPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetStringArrayPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetStringArrayPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetStringArrayPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetStringArrayPropertyRequest.actor)
}

// string component = 2;
inline void SetStringArrayPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetStringArrayPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetStringArrayPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetStringArrayPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetStringArrayPropertyRequest.component)
}
inline std::string* SetStringArrayPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetStringArrayPropertyRequest.component)
  return _s;
}
inline const std::string& SetStringArrayPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetStringArrayPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetStringArrayPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetStringArrayPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetStringArrayPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetStringArrayPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetStringArrayPropertyRequest.component)
}

// string property = 3;
inline void SetStringArrayPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetStringArrayPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetStringArrayPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetStringArrayPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetStringArrayPropertyRequest.property)
}
inline std::string* SetStringArrayPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetStringArrayPropertyRequest.property)
  return _s;
}
inline const std::string& SetStringArrayPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetStringArrayPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetStringArrayPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetStringArrayPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetStringArrayPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetStringArrayPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetStringArrayPropertyRequest.property)
}

// repeated string values = 4;
inline int SetStringArrayPropertyRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int SetStringArrayPropertyRequest::values_size() const {
  return _internal_values_size();
}
inline void SetStringArrayPropertyRequest::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline std::string* SetStringArrayPropertyRequest::add_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:TempoWorld.SetStringArrayPropertyRequest.values)
  return _s;
}
inline const std::string& SetStringArrayPropertyRequest::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetStringArrayPropertyRequest.values)
  return _internal_values().Get(index);
}
inline std::string* SetStringArrayPropertyRequest::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetStringArrayPropertyRequest.values)
  return _internal_mutable_values()->Mutable(index);
}
inline void SetStringArrayPropertyRequest::set_values(int index, const std::string& value) {
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetStringArrayPropertyRequest.values)
}
inline void SetStringArrayPropertyRequest::set_values(int index, std::string&& value) {
  _internal_mutable_values()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TempoWorld.SetStringArrayPropertyRequest.values)
}
inline void SetStringArrayPropertyRequest::set_values(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TempoWorld.SetStringArrayPropertyRequest.values)
}
inline void SetStringArrayPropertyRequest::set_values(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_values()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TempoWorld.SetStringArrayPropertyRequest.values)
}
inline void SetStringArrayPropertyRequest::set_values(int index, absl_tempo::string_view value) {
  _internal_mutable_values()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:TempoWorld.SetStringArrayPropertyRequest.values)
}
inline void SetStringArrayPropertyRequest::add_values(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:TempoWorld.SetStringArrayPropertyRequest.values)
}
inline void SetStringArrayPropertyRequest::add_values(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:TempoWorld.SetStringArrayPropertyRequest.values)
}
inline void SetStringArrayPropertyRequest::add_values(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TempoWorld.SetStringArrayPropertyRequest.values)
}
inline void SetStringArrayPropertyRequest::add_values(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TempoWorld.SetStringArrayPropertyRequest.values)
}
inline void SetStringArrayPropertyRequest::add_values(absl_tempo::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:TempoWorld.SetStringArrayPropertyRequest.values)
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetStringArrayPropertyRequest::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.SetStringArrayPropertyRequest.values)
  return _internal_values();
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetStringArrayPropertyRequest::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.SetStringArrayPropertyRequest.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetStringArrayPropertyRequest::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetStringArrayPropertyRequest::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SetEnumArrayPropertyRequest

// string actor = 1;
inline void SetEnumArrayPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetEnumArrayPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetEnumArrayPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetEnumArrayPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetEnumArrayPropertyRequest.actor)
}
inline std::string* SetEnumArrayPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetEnumArrayPropertyRequest.actor)
  return _s;
}
inline const std::string& SetEnumArrayPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetEnumArrayPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetEnumArrayPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetEnumArrayPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetEnumArrayPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetEnumArrayPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetEnumArrayPropertyRequest.actor)
}

// string component = 2;
inline void SetEnumArrayPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetEnumArrayPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetEnumArrayPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetEnumArrayPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetEnumArrayPropertyRequest.component)
}
inline std::string* SetEnumArrayPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetEnumArrayPropertyRequest.component)
  return _s;
}
inline const std::string& SetEnumArrayPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetEnumArrayPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetEnumArrayPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetEnumArrayPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetEnumArrayPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetEnumArrayPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetEnumArrayPropertyRequest.component)
}

// string property = 3;
inline void SetEnumArrayPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetEnumArrayPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetEnumArrayPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetEnumArrayPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetEnumArrayPropertyRequest.property)
}
inline std::string* SetEnumArrayPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetEnumArrayPropertyRequest.property)
  return _s;
}
inline const std::string& SetEnumArrayPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetEnumArrayPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetEnumArrayPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetEnumArrayPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetEnumArrayPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetEnumArrayPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetEnumArrayPropertyRequest.property)
}

// repeated string values = 4;
inline int SetEnumArrayPropertyRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int SetEnumArrayPropertyRequest::values_size() const {
  return _internal_values_size();
}
inline void SetEnumArrayPropertyRequest::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline std::string* SetEnumArrayPropertyRequest::add_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:TempoWorld.SetEnumArrayPropertyRequest.values)
  return _s;
}
inline const std::string& SetEnumArrayPropertyRequest::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetEnumArrayPropertyRequest.values)
  return _internal_values().Get(index);
}
inline std::string* SetEnumArrayPropertyRequest::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetEnumArrayPropertyRequest.values)
  return _internal_mutable_values()->Mutable(index);
}
inline void SetEnumArrayPropertyRequest::set_values(int index, const std::string& value) {
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetEnumArrayPropertyRequest.values)
}
inline void SetEnumArrayPropertyRequest::set_values(int index, std::string&& value) {
  _internal_mutable_values()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TempoWorld.SetEnumArrayPropertyRequest.values)
}
inline void SetEnumArrayPropertyRequest::set_values(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TempoWorld.SetEnumArrayPropertyRequest.values)
}
inline void SetEnumArrayPropertyRequest::set_values(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_values()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TempoWorld.SetEnumArrayPropertyRequest.values)
}
inline void SetEnumArrayPropertyRequest::set_values(int index, absl_tempo::string_view value) {
  _internal_mutable_values()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:TempoWorld.SetEnumArrayPropertyRequest.values)
}
inline void SetEnumArrayPropertyRequest::add_values(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:TempoWorld.SetEnumArrayPropertyRequest.values)
}
inline void SetEnumArrayPropertyRequest::add_values(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:TempoWorld.SetEnumArrayPropertyRequest.values)
}
inline void SetEnumArrayPropertyRequest::add_values(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TempoWorld.SetEnumArrayPropertyRequest.values)
}
inline void SetEnumArrayPropertyRequest::add_values(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TempoWorld.SetEnumArrayPropertyRequest.values)
}
inline void SetEnumArrayPropertyRequest::add_values(absl_tempo::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:TempoWorld.SetEnumArrayPropertyRequest.values)
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetEnumArrayPropertyRequest::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.SetEnumArrayPropertyRequest.values)
  return _internal_values();
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetEnumArrayPropertyRequest::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.SetEnumArrayPropertyRequest.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetEnumArrayPropertyRequest::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetEnumArrayPropertyRequest::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SetIntArrayPropertyRequest

// string actor = 1;
inline void SetIntArrayPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetIntArrayPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetIntArrayPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetIntArrayPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetIntArrayPropertyRequest.actor)
}
inline std::string* SetIntArrayPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetIntArrayPropertyRequest.actor)
  return _s;
}
inline const std::string& SetIntArrayPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetIntArrayPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetIntArrayPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetIntArrayPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetIntArrayPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetIntArrayPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetIntArrayPropertyRequest.actor)
}

// string component = 2;
inline void SetIntArrayPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetIntArrayPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetIntArrayPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetIntArrayPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetIntArrayPropertyRequest.component)
}
inline std::string* SetIntArrayPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetIntArrayPropertyRequest.component)
  return _s;
}
inline const std::string& SetIntArrayPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetIntArrayPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetIntArrayPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetIntArrayPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetIntArrayPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetIntArrayPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetIntArrayPropertyRequest.component)
}

// string property = 3;
inline void SetIntArrayPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetIntArrayPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetIntArrayPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetIntArrayPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetIntArrayPropertyRequest.property)
}
inline std::string* SetIntArrayPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetIntArrayPropertyRequest.property)
  return _s;
}
inline const std::string& SetIntArrayPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetIntArrayPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetIntArrayPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetIntArrayPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetIntArrayPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetIntArrayPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetIntArrayPropertyRequest.property)
}

// repeated int32 values = 4;
inline int SetIntArrayPropertyRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int SetIntArrayPropertyRequest::values_size() const {
  return _internal_values_size();
}
inline void SetIntArrayPropertyRequest::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline ::int32_t SetIntArrayPropertyRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetIntArrayPropertyRequest.values)
  return _internal_values().Get(index);
}
inline void SetIntArrayPropertyRequest::set_values(int index, ::int32_t value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetIntArrayPropertyRequest.values)
}
inline void SetIntArrayPropertyRequest::add_values(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:TempoWorld.SetIntArrayPropertyRequest.values)
}
inline const ::google::protobuf_tempo::RepeatedField<::int32_t>& SetIntArrayPropertyRequest::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.SetIntArrayPropertyRequest.values)
  return _internal_values();
}
inline ::google::protobuf_tempo::RepeatedField<::int32_t>* SetIntArrayPropertyRequest::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.SetIntArrayPropertyRequest.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf_tempo::RepeatedField<::int32_t>& SetIntArrayPropertyRequest::_internal_values()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf_tempo::RepeatedField<::int32_t>* SetIntArrayPropertyRequest::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SetFloatArrayPropertyRequest

// string actor = 1;
inline void SetFloatArrayPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetFloatArrayPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetFloatArrayPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetFloatArrayPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetFloatArrayPropertyRequest.actor)
}
inline std::string* SetFloatArrayPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetFloatArrayPropertyRequest.actor)
  return _s;
}
inline const std::string& SetFloatArrayPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetFloatArrayPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetFloatArrayPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetFloatArrayPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetFloatArrayPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetFloatArrayPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetFloatArrayPropertyRequest.actor)
}

// string component = 2;
inline void SetFloatArrayPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetFloatArrayPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetFloatArrayPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetFloatArrayPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetFloatArrayPropertyRequest.component)
}
inline std::string* SetFloatArrayPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetFloatArrayPropertyRequest.component)
  return _s;
}
inline const std::string& SetFloatArrayPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetFloatArrayPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetFloatArrayPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetFloatArrayPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetFloatArrayPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetFloatArrayPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetFloatArrayPropertyRequest.component)
}

// string property = 3;
inline void SetFloatArrayPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetFloatArrayPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetFloatArrayPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetFloatArrayPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetFloatArrayPropertyRequest.property)
}
inline std::string* SetFloatArrayPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetFloatArrayPropertyRequest.property)
  return _s;
}
inline const std::string& SetFloatArrayPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetFloatArrayPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetFloatArrayPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetFloatArrayPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetFloatArrayPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetFloatArrayPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetFloatArrayPropertyRequest.property)
}

// repeated float values = 4;
inline int SetFloatArrayPropertyRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int SetFloatArrayPropertyRequest::values_size() const {
  return _internal_values_size();
}
inline void SetFloatArrayPropertyRequest::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline float SetFloatArrayPropertyRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:TempoWorld.SetFloatArrayPropertyRequest.values)
  return _internal_values().Get(index);
}
inline void SetFloatArrayPropertyRequest::set_values(int index, float value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetFloatArrayPropertyRequest.values)
}
inline void SetFloatArrayPropertyRequest::add_values(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:TempoWorld.SetFloatArrayPropertyRequest.values)
}
inline const ::google::protobuf_tempo::RepeatedField<float>& SetFloatArrayPropertyRequest::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.SetFloatArrayPropertyRequest.values)
  return _internal_values();
}
inline ::google::protobuf_tempo::RepeatedField<float>* SetFloatArrayPropertyRequest::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.SetFloatArrayPropertyRequest.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf_tempo::RepeatedField<float>& SetFloatArrayPropertyRequest::_internal_values()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf_tempo::RepeatedField<float>* SetFloatArrayPropertyRequest::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SetClassArrayPropertyRequest

// string actor = 1;
inline void SetClassArrayPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetClassArrayPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetClassArrayPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetClassArrayPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetClassArrayPropertyRequest.actor)
}
inline std::string* SetClassArrayPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetClassArrayPropertyRequest.actor)
  return _s;
}
inline const std::string& SetClassArrayPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetClassArrayPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetClassArrayPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetClassArrayPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetClassArrayPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetClassArrayPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetClassArrayPropertyRequest.actor)
}

// string component = 2;
inline void SetClassArrayPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetClassArrayPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetClassArrayPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetClassArrayPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetClassArrayPropertyRequest.component)
}
inline std::string* SetClassArrayPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetClassArrayPropertyRequest.component)
  return _s;
}
inline const std::string& SetClassArrayPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetClassArrayPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetClassArrayPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetClassArrayPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetClassArrayPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetClassArrayPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetClassArrayPropertyRequest.component)
}

// string property = 3;
inline void SetClassArrayPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetClassArrayPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetClassArrayPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetClassArrayPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetClassArrayPropertyRequest.property)
}
inline std::string* SetClassArrayPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetClassArrayPropertyRequest.property)
  return _s;
}
inline const std::string& SetClassArrayPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetClassArrayPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetClassArrayPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetClassArrayPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetClassArrayPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetClassArrayPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetClassArrayPropertyRequest.property)
}

// repeated string values = 4;
inline int SetClassArrayPropertyRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int SetClassArrayPropertyRequest::values_size() const {
  return _internal_values_size();
}
inline void SetClassArrayPropertyRequest::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline std::string* SetClassArrayPropertyRequest::add_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:TempoWorld.SetClassArrayPropertyRequest.values)
  return _s;
}
inline const std::string& SetClassArrayPropertyRequest::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetClassArrayPropertyRequest.values)
  return _internal_values().Get(index);
}
inline std::string* SetClassArrayPropertyRequest::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetClassArrayPropertyRequest.values)
  return _internal_mutable_values()->Mutable(index);
}
inline void SetClassArrayPropertyRequest::set_values(int index, const std::string& value) {
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetClassArrayPropertyRequest.values)
}
inline void SetClassArrayPropertyRequest::set_values(int index, std::string&& value) {
  _internal_mutable_values()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TempoWorld.SetClassArrayPropertyRequest.values)
}
inline void SetClassArrayPropertyRequest::set_values(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TempoWorld.SetClassArrayPropertyRequest.values)
}
inline void SetClassArrayPropertyRequest::set_values(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_values()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TempoWorld.SetClassArrayPropertyRequest.values)
}
inline void SetClassArrayPropertyRequest::set_values(int index, absl_tempo::string_view value) {
  _internal_mutable_values()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:TempoWorld.SetClassArrayPropertyRequest.values)
}
inline void SetClassArrayPropertyRequest::add_values(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:TempoWorld.SetClassArrayPropertyRequest.values)
}
inline void SetClassArrayPropertyRequest::add_values(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:TempoWorld.SetClassArrayPropertyRequest.values)
}
inline void SetClassArrayPropertyRequest::add_values(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TempoWorld.SetClassArrayPropertyRequest.values)
}
inline void SetClassArrayPropertyRequest::add_values(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TempoWorld.SetClassArrayPropertyRequest.values)
}
inline void SetClassArrayPropertyRequest::add_values(absl_tempo::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:TempoWorld.SetClassArrayPropertyRequest.values)
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetClassArrayPropertyRequest::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.SetClassArrayPropertyRequest.values)
  return _internal_values();
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetClassArrayPropertyRequest::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.SetClassArrayPropertyRequest.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetClassArrayPropertyRequest::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetClassArrayPropertyRequest::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SetAssetArrayPropertyRequest

// string actor = 1;
inline void SetAssetArrayPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetAssetArrayPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetAssetArrayPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetAssetArrayPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetAssetArrayPropertyRequest.actor)
}
inline std::string* SetAssetArrayPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetAssetArrayPropertyRequest.actor)
  return _s;
}
inline const std::string& SetAssetArrayPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetAssetArrayPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetAssetArrayPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetAssetArrayPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetAssetArrayPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetAssetArrayPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetAssetArrayPropertyRequest.actor)
}

// string component = 2;
inline void SetAssetArrayPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetAssetArrayPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetAssetArrayPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetAssetArrayPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetAssetArrayPropertyRequest.component)
}
inline std::string* SetAssetArrayPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetAssetArrayPropertyRequest.component)
  return _s;
}
inline const std::string& SetAssetArrayPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetAssetArrayPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetAssetArrayPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetAssetArrayPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetAssetArrayPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetAssetArrayPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetAssetArrayPropertyRequest.component)
}

// string property = 3;
inline void SetAssetArrayPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetAssetArrayPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetAssetArrayPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetAssetArrayPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetAssetArrayPropertyRequest.property)
}
inline std::string* SetAssetArrayPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetAssetArrayPropertyRequest.property)
  return _s;
}
inline const std::string& SetAssetArrayPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetAssetArrayPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetAssetArrayPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetAssetArrayPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetAssetArrayPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetAssetArrayPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetAssetArrayPropertyRequest.property)
}

// repeated string values = 4;
inline int SetAssetArrayPropertyRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int SetAssetArrayPropertyRequest::values_size() const {
  return _internal_values_size();
}
inline void SetAssetArrayPropertyRequest::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline std::string* SetAssetArrayPropertyRequest::add_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:TempoWorld.SetAssetArrayPropertyRequest.values)
  return _s;
}
inline const std::string& SetAssetArrayPropertyRequest::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetAssetArrayPropertyRequest.values)
  return _internal_values().Get(index);
}
inline std::string* SetAssetArrayPropertyRequest::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetAssetArrayPropertyRequest.values)
  return _internal_mutable_values()->Mutable(index);
}
inline void SetAssetArrayPropertyRequest::set_values(int index, const std::string& value) {
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetAssetArrayPropertyRequest.values)
}
inline void SetAssetArrayPropertyRequest::set_values(int index, std::string&& value) {
  _internal_mutable_values()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TempoWorld.SetAssetArrayPropertyRequest.values)
}
inline void SetAssetArrayPropertyRequest::set_values(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TempoWorld.SetAssetArrayPropertyRequest.values)
}
inline void SetAssetArrayPropertyRequest::set_values(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_values()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TempoWorld.SetAssetArrayPropertyRequest.values)
}
inline void SetAssetArrayPropertyRequest::set_values(int index, absl_tempo::string_view value) {
  _internal_mutable_values()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:TempoWorld.SetAssetArrayPropertyRequest.values)
}
inline void SetAssetArrayPropertyRequest::add_values(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:TempoWorld.SetAssetArrayPropertyRequest.values)
}
inline void SetAssetArrayPropertyRequest::add_values(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:TempoWorld.SetAssetArrayPropertyRequest.values)
}
inline void SetAssetArrayPropertyRequest::add_values(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TempoWorld.SetAssetArrayPropertyRequest.values)
}
inline void SetAssetArrayPropertyRequest::add_values(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TempoWorld.SetAssetArrayPropertyRequest.values)
}
inline void SetAssetArrayPropertyRequest::add_values(absl_tempo::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:TempoWorld.SetAssetArrayPropertyRequest.values)
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetAssetArrayPropertyRequest::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.SetAssetArrayPropertyRequest.values)
  return _internal_values();
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetAssetArrayPropertyRequest::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.SetAssetArrayPropertyRequest.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetAssetArrayPropertyRequest::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetAssetArrayPropertyRequest::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SetActorArrayPropertyRequest

// string actor = 1;
inline void SetActorArrayPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetActorArrayPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorArrayPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetActorArrayPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorArrayPropertyRequest.actor)
}
inline std::string* SetActorArrayPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorArrayPropertyRequest.actor)
  return _s;
}
inline const std::string& SetActorArrayPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetActorArrayPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetActorArrayPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetActorArrayPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetActorArrayPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetActorArrayPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetActorArrayPropertyRequest.actor)
}

// string component = 2;
inline void SetActorArrayPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetActorArrayPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorArrayPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetActorArrayPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorArrayPropertyRequest.component)
}
inline std::string* SetActorArrayPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorArrayPropertyRequest.component)
  return _s;
}
inline const std::string& SetActorArrayPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetActorArrayPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetActorArrayPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetActorArrayPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetActorArrayPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetActorArrayPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetActorArrayPropertyRequest.component)
}

// string property = 3;
inline void SetActorArrayPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetActorArrayPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorArrayPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetActorArrayPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorArrayPropertyRequest.property)
}
inline std::string* SetActorArrayPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorArrayPropertyRequest.property)
  return _s;
}
inline const std::string& SetActorArrayPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetActorArrayPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetActorArrayPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetActorArrayPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetActorArrayPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetActorArrayPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetActorArrayPropertyRequest.property)
}

// repeated string values = 4;
inline int SetActorArrayPropertyRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int SetActorArrayPropertyRequest::values_size() const {
  return _internal_values_size();
}
inline void SetActorArrayPropertyRequest::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline std::string* SetActorArrayPropertyRequest::add_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:TempoWorld.SetActorArrayPropertyRequest.values)
  return _s;
}
inline const std::string& SetActorArrayPropertyRequest::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetActorArrayPropertyRequest.values)
  return _internal_values().Get(index);
}
inline std::string* SetActorArrayPropertyRequest::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetActorArrayPropertyRequest.values)
  return _internal_mutable_values()->Mutable(index);
}
inline void SetActorArrayPropertyRequest::set_values(int index, const std::string& value) {
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorArrayPropertyRequest.values)
}
inline void SetActorArrayPropertyRequest::set_values(int index, std::string&& value) {
  _internal_mutable_values()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TempoWorld.SetActorArrayPropertyRequest.values)
}
inline void SetActorArrayPropertyRequest::set_values(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TempoWorld.SetActorArrayPropertyRequest.values)
}
inline void SetActorArrayPropertyRequest::set_values(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_values()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TempoWorld.SetActorArrayPropertyRequest.values)
}
inline void SetActorArrayPropertyRequest::set_values(int index, absl_tempo::string_view value) {
  _internal_mutable_values()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:TempoWorld.SetActorArrayPropertyRequest.values)
}
inline void SetActorArrayPropertyRequest::add_values(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:TempoWorld.SetActorArrayPropertyRequest.values)
}
inline void SetActorArrayPropertyRequest::add_values(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:TempoWorld.SetActorArrayPropertyRequest.values)
}
inline void SetActorArrayPropertyRequest::add_values(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TempoWorld.SetActorArrayPropertyRequest.values)
}
inline void SetActorArrayPropertyRequest::add_values(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TempoWorld.SetActorArrayPropertyRequest.values)
}
inline void SetActorArrayPropertyRequest::add_values(absl_tempo::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:TempoWorld.SetActorArrayPropertyRequest.values)
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetActorArrayPropertyRequest::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.SetActorArrayPropertyRequest.values)
  return _internal_values();
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetActorArrayPropertyRequest::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.SetActorArrayPropertyRequest.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetActorArrayPropertyRequest::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetActorArrayPropertyRequest::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SetComponentArrayPropertyRequest

// string actor = 1;
inline void SetComponentArrayPropertyRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& SetComponentArrayPropertyRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentArrayPropertyRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetComponentArrayPropertyRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentArrayPropertyRequest.actor)
}
inline std::string* SetComponentArrayPropertyRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentArrayPropertyRequest.actor)
  return _s;
}
inline const std::string& SetComponentArrayPropertyRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void SetComponentArrayPropertyRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* SetComponentArrayPropertyRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* SetComponentArrayPropertyRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetComponentArrayPropertyRequest.actor)
  return _impl_.actor_.Release();
}
inline void SetComponentArrayPropertyRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetComponentArrayPropertyRequest.actor)
}

// string component = 2;
inline void SetComponentArrayPropertyRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& SetComponentArrayPropertyRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentArrayPropertyRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetComponentArrayPropertyRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentArrayPropertyRequest.component)
}
inline std::string* SetComponentArrayPropertyRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentArrayPropertyRequest.component)
  return _s;
}
inline const std::string& SetComponentArrayPropertyRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void SetComponentArrayPropertyRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* SetComponentArrayPropertyRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* SetComponentArrayPropertyRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetComponentArrayPropertyRequest.component)
  return _impl_.component_.Release();
}
inline void SetComponentArrayPropertyRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetComponentArrayPropertyRequest.component)
}

// string property = 3;
inline void SetComponentArrayPropertyRequest::clear_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.ClearToEmpty();
}
inline const std::string& SetComponentArrayPropertyRequest::property() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentArrayPropertyRequest.property)
  return _internal_property();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetComponentArrayPropertyRequest::set_property(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentArrayPropertyRequest.property)
}
inline std::string* SetComponentArrayPropertyRequest::mutable_property() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentArrayPropertyRequest.property)
  return _s;
}
inline const std::string& SetComponentArrayPropertyRequest::_internal_property() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.property_.Get();
}
inline void SetComponentArrayPropertyRequest::_internal_set_property(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.property_.Set(value, GetArena());
}
inline std::string* SetComponentArrayPropertyRequest::_internal_mutable_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.property_.Mutable( GetArena());
}
inline std::string* SetComponentArrayPropertyRequest::release_property() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.SetComponentArrayPropertyRequest.property)
  return _impl_.property_.Release();
}
inline void SetComponentArrayPropertyRequest::set_allocated_property(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.property_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_.IsDefault()) {
          _impl_.property_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.SetComponentArrayPropertyRequest.property)
}

// repeated string values = 4;
inline int SetComponentArrayPropertyRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int SetComponentArrayPropertyRequest::values_size() const {
  return _internal_values_size();
}
inline void SetComponentArrayPropertyRequest::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline std::string* SetComponentArrayPropertyRequest::add_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:TempoWorld.SetComponentArrayPropertyRequest.values)
  return _s;
}
inline const std::string& SetComponentArrayPropertyRequest::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.SetComponentArrayPropertyRequest.values)
  return _internal_values().Get(index);
}
inline std::string* SetComponentArrayPropertyRequest::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoWorld.SetComponentArrayPropertyRequest.values)
  return _internal_mutable_values()->Mutable(index);
}
inline void SetComponentArrayPropertyRequest::set_values(int index, const std::string& value) {
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentArrayPropertyRequest.values)
}
inline void SetComponentArrayPropertyRequest::set_values(int index, std::string&& value) {
  _internal_mutable_values()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TempoWorld.SetComponentArrayPropertyRequest.values)
}
inline void SetComponentArrayPropertyRequest::set_values(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TempoWorld.SetComponentArrayPropertyRequest.values)
}
inline void SetComponentArrayPropertyRequest::set_values(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_values()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TempoWorld.SetComponentArrayPropertyRequest.values)
}
inline void SetComponentArrayPropertyRequest::set_values(int index, absl_tempo::string_view value) {
  _internal_mutable_values()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:TempoWorld.SetComponentArrayPropertyRequest.values)
}
inline void SetComponentArrayPropertyRequest::add_values(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:TempoWorld.SetComponentArrayPropertyRequest.values)
}
inline void SetComponentArrayPropertyRequest::add_values(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:TempoWorld.SetComponentArrayPropertyRequest.values)
}
inline void SetComponentArrayPropertyRequest::add_values(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TempoWorld.SetComponentArrayPropertyRequest.values)
}
inline void SetComponentArrayPropertyRequest::add_values(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TempoWorld.SetComponentArrayPropertyRequest.values)
}
inline void SetComponentArrayPropertyRequest::add_values(absl_tempo::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:TempoWorld.SetComponentArrayPropertyRequest.values)
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetComponentArrayPropertyRequest::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.SetComponentArrayPropertyRequest.values)
  return _internal_values();
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetComponentArrayPropertyRequest::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.SetComponentArrayPropertyRequest.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<std::string>&
SetComponentArrayPropertyRequest::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<std::string>*
SetComponentArrayPropertyRequest::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// CallFunctionRequest

// string actor = 1;
inline void CallFunctionRequest::clear_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.ClearToEmpty();
}
inline const std::string& CallFunctionRequest::actor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.CallFunctionRequest.actor)
  return _internal_actor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallFunctionRequest::set_actor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.CallFunctionRequest.actor)
}
inline std::string* CallFunctionRequest::mutable_actor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:TempoWorld.CallFunctionRequest.actor)
  return _s;
}
inline const std::string& CallFunctionRequest::_internal_actor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_.Get();
}
inline void CallFunctionRequest::_internal_set_actor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_.Set(value, GetArena());
}
inline std::string* CallFunctionRequest::_internal_mutable_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_.Mutable( GetArena());
}
inline std::string* CallFunctionRequest::release_actor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.CallFunctionRequest.actor)
  return _impl_.actor_.Release();
}
inline void CallFunctionRequest::set_allocated_actor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_.IsDefault()) {
          _impl_.actor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.CallFunctionRequest.actor)
}

// string component = 2;
inline void CallFunctionRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& CallFunctionRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.CallFunctionRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallFunctionRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.CallFunctionRequest.component)
}
inline std::string* CallFunctionRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TempoWorld.CallFunctionRequest.component)
  return _s;
}
inline const std::string& CallFunctionRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void CallFunctionRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* CallFunctionRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* CallFunctionRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.CallFunctionRequest.component)
  return _impl_.component_.Release();
}
inline void CallFunctionRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.CallFunctionRequest.component)
}

// string function = 3;
inline void CallFunctionRequest::clear_function() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.function_.ClearToEmpty();
}
inline const std::string& CallFunctionRequest::function() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.CallFunctionRequest.function)
  return _internal_function();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallFunctionRequest::set_function(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.function_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.CallFunctionRequest.function)
}
inline std::string* CallFunctionRequest::mutable_function() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:TempoWorld.CallFunctionRequest.function)
  return _s;
}
inline const std::string& CallFunctionRequest::_internal_function() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.function_.Get();
}
inline void CallFunctionRequest::_internal_set_function(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.function_.Set(value, GetArena());
}
inline std::string* CallFunctionRequest::_internal_mutable_function() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.function_.Mutable( GetArena());
}
inline std::string* CallFunctionRequest::release_function() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.CallFunctionRequest.function)
  return _impl_.function_.Release();
}
inline void CallFunctionRequest::set_allocated_function(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.function_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.function_.IsDefault()) {
          _impl_.function_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.CallFunctionRequest.function)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoWorld


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TempoWorld_2fActorControl_2eproto_2epb_2eh

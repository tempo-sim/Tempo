// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoWorld/WorldState.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_TempoWorld_2fWorldState_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TempoWorld_2fWorldState_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "TempoScripting/Geometry.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TempoWorld_2fWorldState_2eproto TEMPOWORLD_API

namespace google {
namespace protobuf_tempo {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf_tempo
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TEMPOWORLD_API TableStruct_TempoWorld_2fWorldState_2eproto {
  static const ::uint32_t offsets[];
};
TEMPOWORLD_API extern const ::google::protobuf_tempo::internal::DescriptorTable
    descriptor_table_TempoWorld_2fWorldState_2eproto;
namespace TempoWorld {
class ActorState;
struct ActorStateDefaultTypeInternal;
TEMPOWORLD_API extern ActorStateDefaultTypeInternal _ActorState_default_instance_;
class ActorStateRequest;
struct ActorStateRequestDefaultTypeInternal;
TEMPOWORLD_API extern ActorStateRequestDefaultTypeInternal _ActorStateRequest_default_instance_;
class ActorStates;
struct ActorStatesDefaultTypeInternal;
TEMPOWORLD_API extern ActorStatesDefaultTypeInternal _ActorStates_default_instance_;
class ActorStatesNearRequest;
struct ActorStatesNearRequestDefaultTypeInternal;
TEMPOWORLD_API extern ActorStatesNearRequestDefaultTypeInternal _ActorStatesNearRequest_default_instance_;
class OverlapEventRequest;
struct OverlapEventRequestDefaultTypeInternal;
TEMPOWORLD_API extern OverlapEventRequestDefaultTypeInternal _OverlapEventRequest_default_instance_;
class OverlapEventResponse;
struct OverlapEventResponseDefaultTypeInternal;
TEMPOWORLD_API extern OverlapEventResponseDefaultTypeInternal _OverlapEventResponse_default_instance_;
}  // namespace TempoWorld
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google

namespace TempoWorld {

// ===================================================================


// -------------------------------------------------------------------

class TEMPOWORLD_API OverlapEventResponse final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.OverlapEventResponse) */ {
 public:
  inline OverlapEventResponse() : OverlapEventResponse(nullptr) {}
  ~OverlapEventResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OverlapEventResponse(::google::protobuf_tempo::internal::ConstantInitialized);

  inline OverlapEventResponse(const OverlapEventResponse& from)
      : OverlapEventResponse(nullptr, from) {}
  OverlapEventResponse(OverlapEventResponse&& from) noexcept
    : OverlapEventResponse() {
    *this = ::std::move(from);
  }

  inline OverlapEventResponse& operator=(const OverlapEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlapEventResponse& operator=(OverlapEventResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OverlapEventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OverlapEventResponse* internal_default_instance() {
    return reinterpret_cast<const OverlapEventResponse*>(
               &_OverlapEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OverlapEventResponse& a, OverlapEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlapEventResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverlapEventResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OverlapEventResponse* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OverlapEventResponse>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const OverlapEventResponse& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const OverlapEventResponse& from) {
    OverlapEventResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(OverlapEventResponse* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.OverlapEventResponse";
  }
  protected:
  explicit OverlapEventResponse(::google::protobuf_tempo::Arena* arena);
  OverlapEventResponse(::google::protobuf_tempo::Arena* arena, const OverlapEventResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverlappedActorNameFieldNumber = 1,
    kOtherActorNameFieldNumber = 2,
    kOtherActorTypeFieldNumber = 3,
  };
  // string overlapped_actor_name = 1;
  void clear_overlapped_actor_name() ;
  const std::string& overlapped_actor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_overlapped_actor_name(Arg_&& arg, Args_... args);
  std::string* mutable_overlapped_actor_name();
  PROTOBUF_NODISCARD std::string* release_overlapped_actor_name();
  void set_allocated_overlapped_actor_name(std::string* value);

  private:
  const std::string& _internal_overlapped_actor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_overlapped_actor_name(
      const std::string& value);
  std::string* _internal_mutable_overlapped_actor_name();

  public:
  // string other_actor_name = 2;
  void clear_other_actor_name() ;
  const std::string& other_actor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_other_actor_name(Arg_&& arg, Args_... args);
  std::string* mutable_other_actor_name();
  PROTOBUF_NODISCARD std::string* release_other_actor_name();
  void set_allocated_other_actor_name(std::string* value);

  private:
  const std::string& _internal_other_actor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_other_actor_name(
      const std::string& value);
  std::string* _internal_mutable_other_actor_name();

  public:
  // string other_actor_type = 3;
  void clear_other_actor_type() ;
  const std::string& other_actor_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_other_actor_type(Arg_&& arg, Args_... args);
  std::string* mutable_other_actor_type();
  PROTOBUF_NODISCARD std::string* release_other_actor_type();
  void set_allocated_other_actor_type(std::string* value);

  private:
  const std::string& _internal_other_actor_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_other_actor_type(
      const std::string& value);
  std::string* _internal_mutable_other_actor_type();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.OverlapEventResponse)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 3, 0,
      93, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr overlapped_actor_name_;
    ::google::protobuf_tempo::internal::ArenaStringPtr other_actor_name_;
    ::google::protobuf_tempo::internal::ArenaStringPtr other_actor_type_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fWorldState_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API OverlapEventRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.OverlapEventRequest) */ {
 public:
  inline OverlapEventRequest() : OverlapEventRequest(nullptr) {}
  ~OverlapEventRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OverlapEventRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline OverlapEventRequest(const OverlapEventRequest& from)
      : OverlapEventRequest(nullptr, from) {}
  OverlapEventRequest(OverlapEventRequest&& from) noexcept
    : OverlapEventRequest() {
    *this = ::std::move(from);
  }

  inline OverlapEventRequest& operator=(const OverlapEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlapEventRequest& operator=(OverlapEventRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OverlapEventRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OverlapEventRequest* internal_default_instance() {
    return reinterpret_cast<const OverlapEventRequest*>(
               &_OverlapEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OverlapEventRequest& a, OverlapEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlapEventRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverlapEventRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OverlapEventRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OverlapEventRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const OverlapEventRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const OverlapEventRequest& from) {
    OverlapEventRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(OverlapEventRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.OverlapEventRequest";
  }
  protected:
  explicit OverlapEventRequest(::google::protobuf_tempo::Arena* arena);
  OverlapEventRequest(::google::protobuf_tempo::Arena* arena, const OverlapEventRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorNameFieldNumber = 1,
  };
  // string actor_name = 1;
  void clear_actor_name() ;
  const std::string& actor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor_name(Arg_&& arg, Args_... args);
  std::string* mutable_actor_name();
  PROTOBUF_NODISCARD std::string* release_actor_name();
  void set_allocated_actor_name(std::string* value);

  private:
  const std::string& _internal_actor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor_name(
      const std::string& value);
  std::string* _internal_mutable_actor_name();

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.OverlapEventRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_name_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fWorldState_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API ActorStatesNearRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.ActorStatesNearRequest) */ {
 public:
  inline ActorStatesNearRequest() : ActorStatesNearRequest(nullptr) {}
  ~ActorStatesNearRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActorStatesNearRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline ActorStatesNearRequest(const ActorStatesNearRequest& from)
      : ActorStatesNearRequest(nullptr, from) {}
  ActorStatesNearRequest(ActorStatesNearRequest&& from) noexcept
    : ActorStatesNearRequest() {
    *this = ::std::move(from);
  }

  inline ActorStatesNearRequest& operator=(const ActorStatesNearRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorStatesNearRequest& operator=(ActorStatesNearRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorStatesNearRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorStatesNearRequest* internal_default_instance() {
    return reinterpret_cast<const ActorStatesNearRequest*>(
               &_ActorStatesNearRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActorStatesNearRequest& a, ActorStatesNearRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorStatesNearRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorStatesNearRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorStatesNearRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorStatesNearRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const ActorStatesNearRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const ActorStatesNearRequest& from) {
    ActorStatesNearRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActorStatesNearRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.ActorStatesNearRequest";
  }
  protected:
  explicit ActorStatesNearRequest(::google::protobuf_tempo::Arena* arena);
  ActorStatesNearRequest(::google::protobuf_tempo::Arena* arena, const ActorStatesNearRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearActorNameFieldNumber = 1,
    kSearchRadiusFieldNumber = 2,
    kIncludeStaticFieldNumber = 3,
    kIncludeHiddenActorsFieldNumber = 4,
    kIncludeHiddenComponentsFieldNumber = 5,
  };
  // string near_actor_name = 1;
  void clear_near_actor_name() ;
  const std::string& near_actor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_near_actor_name(Arg_&& arg, Args_... args);
  std::string* mutable_near_actor_name();
  PROTOBUF_NODISCARD std::string* release_near_actor_name();
  void set_allocated_near_actor_name(std::string* value);

  private:
  const std::string& _internal_near_actor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_near_actor_name(
      const std::string& value);
  std::string* _internal_mutable_near_actor_name();

  public:
  // float search_radius = 2;
  void clear_search_radius() ;
  float search_radius() const;
  void set_search_radius(float value);

  private:
  float _internal_search_radius() const;
  void _internal_set_search_radius(float value);

  public:
  // bool include_static = 3;
  void clear_include_static() ;
  bool include_static() const;
  void set_include_static(bool value);

  private:
  bool _internal_include_static() const;
  void _internal_set_include_static(bool value);

  public:
  // bool include_hidden_actors = 4;
  void clear_include_hidden_actors() ;
  bool include_hidden_actors() const;
  void set_include_hidden_actors(bool value);

  private:
  bool _internal_include_hidden_actors() const;
  void _internal_set_include_hidden_actors(bool value);

  public:
  // bool include_hidden_components = 5;
  void clear_include_hidden_components() ;
  bool include_hidden_components() const;
  void set_include_hidden_components(bool value);

  private:
  bool _internal_include_hidden_components() const;
  void _internal_set_include_hidden_components(bool value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.ActorStatesNearRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      3, 5, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr near_actor_name_;
    float search_radius_;
    bool include_static_;
    bool include_hidden_actors_;
    bool include_hidden_components_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fWorldState_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API ActorStateRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.ActorStateRequest) */ {
 public:
  inline ActorStateRequest() : ActorStateRequest(nullptr) {}
  ~ActorStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActorStateRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline ActorStateRequest(const ActorStateRequest& from)
      : ActorStateRequest(nullptr, from) {}
  ActorStateRequest(ActorStateRequest&& from) noexcept
    : ActorStateRequest() {
    *this = ::std::move(from);
  }

  inline ActorStateRequest& operator=(const ActorStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorStateRequest& operator=(ActorStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorStateRequest* internal_default_instance() {
    return reinterpret_cast<const ActorStateRequest*>(
               &_ActorStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActorStateRequest& a, ActorStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorStateRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorStateRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const ActorStateRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const ActorStateRequest& from) {
    ActorStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActorStateRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.ActorStateRequest";
  }
  protected:
  explicit ActorStateRequest(::google::protobuf_tempo::Arena* arena);
  ActorStateRequest(::google::protobuf_tempo::Arena* arena, const ActorStateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorNameFieldNumber = 1,
    kIncludeHiddenComponentsFieldNumber = 2,
  };
  // string actor_name = 1;
  void clear_actor_name() ;
  const std::string& actor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor_name(Arg_&& arg, Args_... args);
  std::string* mutable_actor_name();
  PROTOBUF_NODISCARD std::string* release_actor_name();
  void set_allocated_actor_name(std::string* value);

  private:
  const std::string& _internal_actor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor_name(
      const std::string& value);
  std::string* _internal_mutable_actor_name();

  public:
  // bool include_hidden_components = 2;
  void clear_include_hidden_components() ;
  bool include_hidden_components() const;
  void set_include_hidden_components(bool value);

  private:
  bool _internal_include_hidden_components() const;
  void _internal_set_include_hidden_components(bool value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.ActorStateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::ArenaStringPtr actor_name_;
    bool include_hidden_components_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fWorldState_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API ActorState final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.ActorState) */ {
 public:
  inline ActorState() : ActorState(nullptr) {}
  ~ActorState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActorState(::google::protobuf_tempo::internal::ConstantInitialized);

  inline ActorState(const ActorState& from)
      : ActorState(nullptr, from) {}
  ActorState(ActorState&& from) noexcept
    : ActorState() {
    *this = ::std::move(from);
  }

  inline ActorState& operator=(const ActorState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorState& operator=(ActorState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorState* internal_default_instance() {
    return reinterpret_cast<const ActorState*>(
               &_ActorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ActorState& a, ActorState& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorState* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorState>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const ActorState& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const ActorState& from) {
    ActorState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActorState* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.ActorState";
  }
  protected:
  explicit ActorState(::google::protobuf_tempo::Arena* arena);
  ActorState(::google::protobuf_tempo::Arena* arena, const ActorState& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTransformFieldNumber = 3,
    kLinearVelocityFieldNumber = 4,
    kAngularVelocityFieldNumber = 5,
    kBoundsFieldNumber = 6,
    kTimestampFieldNumber = 1,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .TempoScripting.Transform transform = 3;
  bool has_transform() const;
  void clear_transform() ;
  const ::TempoScripting::Transform& transform() const;
  PROTOBUF_NODISCARD ::TempoScripting::Transform* release_transform();
  ::TempoScripting::Transform* mutable_transform();
  void set_allocated_transform(::TempoScripting::Transform* value);
  void unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value);
  ::TempoScripting::Transform* unsafe_arena_release_transform();

  private:
  const ::TempoScripting::Transform& _internal_transform() const;
  ::TempoScripting::Transform* _internal_mutable_transform();

  public:
  // .TempoScripting.Vector linear_velocity = 4;
  bool has_linear_velocity() const;
  void clear_linear_velocity() ;
  const ::TempoScripting::Vector& linear_velocity() const;
  PROTOBUF_NODISCARD ::TempoScripting::Vector* release_linear_velocity();
  ::TempoScripting::Vector* mutable_linear_velocity();
  void set_allocated_linear_velocity(::TempoScripting::Vector* value);
  void unsafe_arena_set_allocated_linear_velocity(::TempoScripting::Vector* value);
  ::TempoScripting::Vector* unsafe_arena_release_linear_velocity();

  private:
  const ::TempoScripting::Vector& _internal_linear_velocity() const;
  ::TempoScripting::Vector* _internal_mutable_linear_velocity();

  public:
  // .TempoScripting.Vector angular_velocity = 5;
  bool has_angular_velocity() const;
  void clear_angular_velocity() ;
  const ::TempoScripting::Vector& angular_velocity() const;
  PROTOBUF_NODISCARD ::TempoScripting::Vector* release_angular_velocity();
  ::TempoScripting::Vector* mutable_angular_velocity();
  void set_allocated_angular_velocity(::TempoScripting::Vector* value);
  void unsafe_arena_set_allocated_angular_velocity(::TempoScripting::Vector* value);
  ::TempoScripting::Vector* unsafe_arena_release_angular_velocity();

  private:
  const ::TempoScripting::Vector& _internal_angular_velocity() const;
  ::TempoScripting::Vector* _internal_mutable_angular_velocity();

  public:
  // .TempoScripting.Box bounds = 6;
  bool has_bounds() const;
  void clear_bounds() ;
  const ::TempoScripting::Box& bounds() const;
  PROTOBUF_NODISCARD ::TempoScripting::Box* release_bounds();
  ::TempoScripting::Box* mutable_bounds();
  void set_allocated_bounds(::TempoScripting::Box* value);
  void unsafe_arena_set_allocated_bounds(::TempoScripting::Box* value);
  ::TempoScripting::Box* unsafe_arena_release_bounds();

  private:
  const ::TempoScripting::Box& _internal_bounds() const;
  ::TempoScripting::Box* _internal_mutable_bounds();

  public:
  // double timestamp = 1;
  void clear_timestamp() ;
  double timestamp() const;
  void set_timestamp(double value);

  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);

  public:
  // @@protoc_insertion_point(class_scope:TempoWorld.ActorState)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      3, 6, 4,
      34, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::google::protobuf_tempo::internal::ArenaStringPtr name_;
    ::TempoScripting::Transform* transform_;
    ::TempoScripting::Vector* linear_velocity_;
    ::TempoScripting::Vector* angular_velocity_;
    ::TempoScripting::Box* bounds_;
    double timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fWorldState_2eproto;
};// -------------------------------------------------------------------

class TEMPOWORLD_API ActorStates final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoWorld.ActorStates) */ {
 public:
  inline ActorStates() : ActorStates(nullptr) {}
  ~ActorStates() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActorStates(::google::protobuf_tempo::internal::ConstantInitialized);

  inline ActorStates(const ActorStates& from)
      : ActorStates(nullptr, from) {}
  ActorStates(ActorStates&& from) noexcept
    : ActorStates() {
    *this = ::std::move(from);
  }

  inline ActorStates& operator=(const ActorStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorStates& operator=(ActorStates&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorStates* internal_default_instance() {
    return reinterpret_cast<const ActorStates*>(
               &_ActorStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ActorStates& a, ActorStates& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorStates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorStates* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorStates* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorStates>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const ActorStates& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const ActorStates& from) {
    ActorStates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActorStates* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoWorld.ActorStates";
  }
  protected:
  explicit ActorStates(::google::protobuf_tempo::Arena* arena);
  ActorStates(::google::protobuf_tempo::Arena* arena, const ActorStates& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorStatesFieldNumber = 1,
  };
  // repeated .TempoWorld.ActorState actor_states = 1;
  int actor_states_size() const;
  private:
  int _internal_actor_states_size() const;

  public:
  void clear_actor_states() ;
  ::TempoWorld::ActorState* mutable_actor_states(int index);
  ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::ActorState >*
      mutable_actor_states();
  private:
  const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorState>& _internal_actor_states() const;
  ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorState>* _internal_mutable_actor_states();
  public:
  const ::TempoWorld::ActorState& actor_states(int index) const;
  ::TempoWorld::ActorState* add_actor_states();
  const ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::ActorState >&
      actor_states() const;
  // @@protoc_insertion_point(class_scope:TempoWorld.ActorStates)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOWORLD_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::RepeatedPtrField< ::TempoWorld::ActorState > actor_states_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoWorld_2fWorldState_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OverlapEventRequest

// string actor_name = 1;
inline void OverlapEventRequest::clear_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_name_.ClearToEmpty();
}
inline const std::string& OverlapEventRequest::actor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.OverlapEventRequest.actor_name)
  return _internal_actor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OverlapEventRequest::set_actor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.OverlapEventRequest.actor_name)
}
inline std::string* OverlapEventRequest::mutable_actor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.OverlapEventRequest.actor_name)
  return _s;
}
inline const std::string& OverlapEventRequest::_internal_actor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_name_.Get();
}
inline void OverlapEventRequest::_internal_set_actor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_name_.Set(value, GetArena());
}
inline std::string* OverlapEventRequest::_internal_mutable_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_name_.Mutable( GetArena());
}
inline std::string* OverlapEventRequest::release_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.OverlapEventRequest.actor_name)
  return _impl_.actor_name_.Release();
}
inline void OverlapEventRequest::set_allocated_actor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_name_.IsDefault()) {
          _impl_.actor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.OverlapEventRequest.actor_name)
}

// -------------------------------------------------------------------

// OverlapEventResponse

// string overlapped_actor_name = 1;
inline void OverlapEventResponse::clear_overlapped_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.overlapped_actor_name_.ClearToEmpty();
}
inline const std::string& OverlapEventResponse::overlapped_actor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.OverlapEventResponse.overlapped_actor_name)
  return _internal_overlapped_actor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OverlapEventResponse::set_overlapped_actor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.overlapped_actor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.OverlapEventResponse.overlapped_actor_name)
}
inline std::string* OverlapEventResponse::mutable_overlapped_actor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_overlapped_actor_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.OverlapEventResponse.overlapped_actor_name)
  return _s;
}
inline const std::string& OverlapEventResponse::_internal_overlapped_actor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.overlapped_actor_name_.Get();
}
inline void OverlapEventResponse::_internal_set_overlapped_actor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.overlapped_actor_name_.Set(value, GetArena());
}
inline std::string* OverlapEventResponse::_internal_mutable_overlapped_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.overlapped_actor_name_.Mutable( GetArena());
}
inline std::string* OverlapEventResponse::release_overlapped_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.OverlapEventResponse.overlapped_actor_name)
  return _impl_.overlapped_actor_name_.Release();
}
inline void OverlapEventResponse::set_allocated_overlapped_actor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.overlapped_actor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.overlapped_actor_name_.IsDefault()) {
          _impl_.overlapped_actor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.OverlapEventResponse.overlapped_actor_name)
}

// string other_actor_name = 2;
inline void OverlapEventResponse::clear_other_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.other_actor_name_.ClearToEmpty();
}
inline const std::string& OverlapEventResponse::other_actor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.OverlapEventResponse.other_actor_name)
  return _internal_other_actor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OverlapEventResponse::set_other_actor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.other_actor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.OverlapEventResponse.other_actor_name)
}
inline std::string* OverlapEventResponse::mutable_other_actor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_other_actor_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.OverlapEventResponse.other_actor_name)
  return _s;
}
inline const std::string& OverlapEventResponse::_internal_other_actor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.other_actor_name_.Get();
}
inline void OverlapEventResponse::_internal_set_other_actor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.other_actor_name_.Set(value, GetArena());
}
inline std::string* OverlapEventResponse::_internal_mutable_other_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.other_actor_name_.Mutable( GetArena());
}
inline std::string* OverlapEventResponse::release_other_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.OverlapEventResponse.other_actor_name)
  return _impl_.other_actor_name_.Release();
}
inline void OverlapEventResponse::set_allocated_other_actor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.other_actor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.other_actor_name_.IsDefault()) {
          _impl_.other_actor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.OverlapEventResponse.other_actor_name)
}

// string other_actor_type = 3;
inline void OverlapEventResponse::clear_other_actor_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.other_actor_type_.ClearToEmpty();
}
inline const std::string& OverlapEventResponse::other_actor_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.OverlapEventResponse.other_actor_type)
  return _internal_other_actor_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OverlapEventResponse::set_other_actor_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.other_actor_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.OverlapEventResponse.other_actor_type)
}
inline std::string* OverlapEventResponse::mutable_other_actor_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_other_actor_type();
  // @@protoc_insertion_point(field_mutable:TempoWorld.OverlapEventResponse.other_actor_type)
  return _s;
}
inline const std::string& OverlapEventResponse::_internal_other_actor_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.other_actor_type_.Get();
}
inline void OverlapEventResponse::_internal_set_other_actor_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.other_actor_type_.Set(value, GetArena());
}
inline std::string* OverlapEventResponse::_internal_mutable_other_actor_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.other_actor_type_.Mutable( GetArena());
}
inline std::string* OverlapEventResponse::release_other_actor_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.OverlapEventResponse.other_actor_type)
  return _impl_.other_actor_type_.Release();
}
inline void OverlapEventResponse::set_allocated_other_actor_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.other_actor_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.other_actor_type_.IsDefault()) {
          _impl_.other_actor_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.OverlapEventResponse.other_actor_type)
}

// -------------------------------------------------------------------

// ActorStateRequest

// string actor_name = 1;
inline void ActorStateRequest::clear_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_name_.ClearToEmpty();
}
inline const std::string& ActorStateRequest::actor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorStateRequest.actor_name)
  return _internal_actor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActorStateRequest::set_actor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.ActorStateRequest.actor_name)
}
inline std::string* ActorStateRequest::mutable_actor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActorStateRequest.actor_name)
  return _s;
}
inline const std::string& ActorStateRequest::_internal_actor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_name_.Get();
}
inline void ActorStateRequest::_internal_set_actor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actor_name_.Set(value, GetArena());
}
inline std::string* ActorStateRequest::_internal_mutable_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actor_name_.Mutable( GetArena());
}
inline std::string* ActorStateRequest::release_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActorStateRequest.actor_name)
  return _impl_.actor_name_.Release();
}
inline void ActorStateRequest::set_allocated_actor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actor_name_.IsDefault()) {
          _impl_.actor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActorStateRequest.actor_name)
}

// bool include_hidden_components = 2;
inline void ActorStateRequest::clear_include_hidden_components() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.include_hidden_components_ = false;
}
inline bool ActorStateRequest::include_hidden_components() const {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorStateRequest.include_hidden_components)
  return _internal_include_hidden_components();
}
inline void ActorStateRequest::set_include_hidden_components(bool value) {
  _internal_set_include_hidden_components(value);
  // @@protoc_insertion_point(field_set:TempoWorld.ActorStateRequest.include_hidden_components)
}
inline bool ActorStateRequest::_internal_include_hidden_components() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.include_hidden_components_;
}
inline void ActorStateRequest::_internal_set_include_hidden_components(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.include_hidden_components_ = value;
}

// -------------------------------------------------------------------

// ActorStatesNearRequest

// string near_actor_name = 1;
inline void ActorStatesNearRequest::clear_near_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.near_actor_name_.ClearToEmpty();
}
inline const std::string& ActorStatesNearRequest::near_actor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorStatesNearRequest.near_actor_name)
  return _internal_near_actor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActorStatesNearRequest::set_near_actor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.near_actor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.ActorStatesNearRequest.near_actor_name)
}
inline std::string* ActorStatesNearRequest::mutable_near_actor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_near_actor_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActorStatesNearRequest.near_actor_name)
  return _s;
}
inline const std::string& ActorStatesNearRequest::_internal_near_actor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.near_actor_name_.Get();
}
inline void ActorStatesNearRequest::_internal_set_near_actor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.near_actor_name_.Set(value, GetArena());
}
inline std::string* ActorStatesNearRequest::_internal_mutable_near_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.near_actor_name_.Mutable( GetArena());
}
inline std::string* ActorStatesNearRequest::release_near_actor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActorStatesNearRequest.near_actor_name)
  return _impl_.near_actor_name_.Release();
}
inline void ActorStatesNearRequest::set_allocated_near_actor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.near_actor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.near_actor_name_.IsDefault()) {
          _impl_.near_actor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActorStatesNearRequest.near_actor_name)
}

// float search_radius = 2;
inline void ActorStatesNearRequest::clear_search_radius() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.search_radius_ = 0;
}
inline float ActorStatesNearRequest::search_radius() const {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorStatesNearRequest.search_radius)
  return _internal_search_radius();
}
inline void ActorStatesNearRequest::set_search_radius(float value) {
  _internal_set_search_radius(value);
  // @@protoc_insertion_point(field_set:TempoWorld.ActorStatesNearRequest.search_radius)
}
inline float ActorStatesNearRequest::_internal_search_radius() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.search_radius_;
}
inline void ActorStatesNearRequest::_internal_set_search_radius(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.search_radius_ = value;
}

// bool include_static = 3;
inline void ActorStatesNearRequest::clear_include_static() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.include_static_ = false;
}
inline bool ActorStatesNearRequest::include_static() const {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorStatesNearRequest.include_static)
  return _internal_include_static();
}
inline void ActorStatesNearRequest::set_include_static(bool value) {
  _internal_set_include_static(value);
  // @@protoc_insertion_point(field_set:TempoWorld.ActorStatesNearRequest.include_static)
}
inline bool ActorStatesNearRequest::_internal_include_static() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.include_static_;
}
inline void ActorStatesNearRequest::_internal_set_include_static(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.include_static_ = value;
}

// bool include_hidden_actors = 4;
inline void ActorStatesNearRequest::clear_include_hidden_actors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.include_hidden_actors_ = false;
}
inline bool ActorStatesNearRequest::include_hidden_actors() const {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorStatesNearRequest.include_hidden_actors)
  return _internal_include_hidden_actors();
}
inline void ActorStatesNearRequest::set_include_hidden_actors(bool value) {
  _internal_set_include_hidden_actors(value);
  // @@protoc_insertion_point(field_set:TempoWorld.ActorStatesNearRequest.include_hidden_actors)
}
inline bool ActorStatesNearRequest::_internal_include_hidden_actors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.include_hidden_actors_;
}
inline void ActorStatesNearRequest::_internal_set_include_hidden_actors(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.include_hidden_actors_ = value;
}

// bool include_hidden_components = 5;
inline void ActorStatesNearRequest::clear_include_hidden_components() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.include_hidden_components_ = false;
}
inline bool ActorStatesNearRequest::include_hidden_components() const {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorStatesNearRequest.include_hidden_components)
  return _internal_include_hidden_components();
}
inline void ActorStatesNearRequest::set_include_hidden_components(bool value) {
  _internal_set_include_hidden_components(value);
  // @@protoc_insertion_point(field_set:TempoWorld.ActorStatesNearRequest.include_hidden_components)
}
inline bool ActorStatesNearRequest::_internal_include_hidden_components() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.include_hidden_components_;
}
inline void ActorStatesNearRequest::_internal_set_include_hidden_components(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.include_hidden_components_ = value;
}

// -------------------------------------------------------------------

// ActorState

// double timestamp = 1;
inline void ActorState::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = 0;
}
inline double ActorState::timestamp() const {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorState.timestamp)
  return _internal_timestamp();
}
inline void ActorState::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:TempoWorld.ActorState.timestamp)
}
inline double ActorState::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void ActorState::_internal_set_timestamp(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// string name = 2;
inline void ActorState::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ActorState::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorState.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActorState::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TempoWorld.ActorState.name)
}
inline std::string* ActorState::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActorState.name)
  return _s;
}
inline const std::string& ActorState::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ActorState::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ActorState::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ActorState::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActorState.name)
  return _impl_.name_.Release();
}
inline void ActorState::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActorState.name)
}

// .TempoScripting.Transform transform = 3;
inline bool ActorState::has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline const ::TempoScripting::Transform& ActorState::_internal_transform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Transform&>(::TempoScripting::_Transform_default_instance_);
}
inline const ::TempoScripting::Transform& ActorState::transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorState.transform)
  return _internal_transform();
}
inline void ActorState::unsafe_arena_set_allocated_transform(::TempoScripting::Transform* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.ActorState.transform)
}
inline ::TempoScripting::Transform* ActorState::release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* released = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Transform* ActorState::unsafe_arena_release_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActorState.transform)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoScripting::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::TempoScripting::Transform* ActorState::_internal_mutable_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Transform>(GetArena());
    _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(p);
  }
  return _impl_.transform_;
}
inline ::TempoScripting::Transform* ActorState::mutable_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActorState.transform)
  return _msg;
}
inline void ActorState::set_allocated_transform(::TempoScripting::Transform* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.transform_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.transform_ = reinterpret_cast<::TempoScripting::Transform*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActorState.transform)
}

// .TempoScripting.Vector linear_velocity = 4;
inline bool ActorState::has_linear_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_velocity_ != nullptr);
  return value;
}
inline const ::TempoScripting::Vector& ActorState::_internal_linear_velocity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Vector* p = _impl_.linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Vector&>(::TempoScripting::_Vector_default_instance_);
}
inline const ::TempoScripting::Vector& ActorState::linear_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorState.linear_velocity)
  return _internal_linear_velocity();
}
inline void ActorState::unsafe_arena_set_allocated_linear_velocity(::TempoScripting::Vector* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.linear_velocity_);
  }
  _impl_.linear_velocity_ = reinterpret_cast<::TempoScripting::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.ActorState.linear_velocity)
}
inline ::TempoScripting::Vector* ActorState::release_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TempoScripting::Vector* released = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Vector* ActorState::unsafe_arena_release_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActorState.linear_velocity)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TempoScripting::Vector* temp = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
  return temp;
}
inline ::TempoScripting::Vector* ActorState::_internal_mutable_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Vector>(GetArena());
    _impl_.linear_velocity_ = reinterpret_cast<::TempoScripting::Vector*>(p);
  }
  return _impl_.linear_velocity_;
}
inline ::TempoScripting::Vector* ActorState::mutable_linear_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Vector* _msg = _internal_mutable_linear_velocity();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActorState.linear_velocity)
  return _msg;
}
inline void ActorState::set_allocated_linear_velocity(::TempoScripting::Vector* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.linear_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.linear_velocity_ = reinterpret_cast<::TempoScripting::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActorState.linear_velocity)
}

// .TempoScripting.Vector angular_velocity = 5;
inline bool ActorState::has_angular_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_ != nullptr);
  return value;
}
inline const ::TempoScripting::Vector& ActorState::_internal_angular_velocity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Vector* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Vector&>(::TempoScripting::_Vector_default_instance_);
}
inline const ::TempoScripting::Vector& ActorState::angular_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorState.angular_velocity)
  return _internal_angular_velocity();
}
inline void ActorState::unsafe_arena_set_allocated_angular_velocity(::TempoScripting::Vector* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = reinterpret_cast<::TempoScripting::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.ActorState.angular_velocity)
}
inline ::TempoScripting::Vector* ActorState::release_angular_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TempoScripting::Vector* released = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Vector* ActorState::unsafe_arena_release_angular_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActorState.angular_velocity)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TempoScripting::Vector* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::TempoScripting::Vector* ActorState::_internal_mutable_angular_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Vector>(GetArena());
    _impl_.angular_velocity_ = reinterpret_cast<::TempoScripting::Vector*>(p);
  }
  return _impl_.angular_velocity_;
}
inline ::TempoScripting::Vector* ActorState::mutable_angular_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Vector* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActorState.angular_velocity)
  return _msg;
}
inline void ActorState::set_allocated_angular_velocity(::TempoScripting::Vector* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.angular_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.angular_velocity_ = reinterpret_cast<::TempoScripting::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActorState.angular_velocity)
}

// .TempoScripting.Box bounds = 6;
inline bool ActorState::has_bounds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bounds_ != nullptr);
  return value;
}
inline const ::TempoScripting::Box& ActorState::_internal_bounds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoScripting::Box* p = _impl_.bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoScripting::Box&>(::TempoScripting::_Box_default_instance_);
}
inline const ::TempoScripting::Box& ActorState::bounds() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorState.bounds)
  return _internal_bounds();
}
inline void ActorState::unsafe_arena_set_allocated_bounds(::TempoScripting::Box* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.bounds_);
  }
  _impl_.bounds_ = reinterpret_cast<::TempoScripting::Box*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoWorld.ActorState.bounds)
}
inline ::TempoScripting::Box* ActorState::release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TempoScripting::Box* released = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoScripting::Box* ActorState::unsafe_arena_release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoWorld.ActorState.bounds)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TempoScripting::Box* temp = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
  return temp;
}
inline ::TempoScripting::Box* ActorState::_internal_mutable_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoScripting::Box>(GetArena());
    _impl_.bounds_ = reinterpret_cast<::TempoScripting::Box*>(p);
  }
  return _impl_.bounds_;
}
inline ::TempoScripting::Box* ActorState::mutable_bounds() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoScripting::Box* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActorState.bounds)
  return _msg;
}
inline void ActorState::set_allocated_bounds(::TempoScripting::Box* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.bounds_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.bounds_ = reinterpret_cast<::TempoScripting::Box*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoWorld.ActorState.bounds)
}

// -------------------------------------------------------------------

// ActorStates

// repeated .TempoWorld.ActorState actor_states = 1;
inline int ActorStates::_internal_actor_states_size() const {
  return _internal_actor_states().size();
}
inline int ActorStates::actor_states_size() const {
  return _internal_actor_states_size();
}
inline void ActorStates::clear_actor_states() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actor_states_.Clear();
}
inline ::TempoWorld::ActorState* ActorStates::mutable_actor_states(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TempoWorld.ActorStates.actor_states)
  return _internal_mutable_actor_states()->Mutable(index);
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorState>* ActorStates::mutable_actor_states()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TempoWorld.ActorStates.actor_states)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_actor_states();
}
inline const ::TempoWorld::ActorState& ActorStates::actor_states(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoWorld.ActorStates.actor_states)
  return _internal_actor_states().Get(index);
}
inline ::TempoWorld::ActorState* ActorStates::add_actor_states() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::TempoWorld::ActorState* _add = _internal_mutable_actor_states()->Add();
  // @@protoc_insertion_point(field_add:TempoWorld.ActorStates.actor_states)
  return _add;
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorState>& ActorStates::actor_states() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TempoWorld.ActorStates.actor_states)
  return _internal_actor_states();
}
inline const ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorState>&
ActorStates::_internal_actor_states() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actor_states_;
}
inline ::google::protobuf_tempo::RepeatedPtrField<::TempoWorld::ActorState>*
ActorStates::_internal_mutable_actor_states() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.actor_states_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoWorld


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TempoWorld_2fWorldState_2eproto_2epb_2eh

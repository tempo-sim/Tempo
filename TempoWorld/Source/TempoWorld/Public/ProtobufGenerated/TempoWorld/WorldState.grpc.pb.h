// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoWorld/WorldState.proto
// Original file comments:
// Copyright Tempo Simulation, LLC. All Rights Reserved
//
#ifndef GRPC_TempoWorld_2fWorldState_2eproto__INCLUDED
#define GRPC_TempoWorld_2fWorldState_2eproto__INCLUDED

#include "TempoWorld/WorldState.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace TempoWorld {

class WorldStateService final {
 public:
  static constexpr char const* service_full_name() {
    return "TempoWorld.WorldStateService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoWorld::OverlapEventResponse>> StreamOverlapEvents(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoWorld::OverlapEventResponse>>(StreamOverlapEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::OverlapEventResponse>> AsyncStreamOverlapEvents(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::OverlapEventResponse>>(AsyncStreamOverlapEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::OverlapEventResponse>> PrepareAsyncStreamOverlapEvents(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::OverlapEventResponse>>(PrepareAsyncStreamOverlapEventsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::TempoWorld::ActorState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorState>> AsyncGetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorState>>(AsyncGetCurrentActorStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorState>> PrepareAsyncGetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorState>>(PrepareAsyncGetCurrentActorStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoWorld::ActorState>> StreamActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoWorld::ActorState>>(StreamActorStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorState>> AsyncStreamActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorState>>(AsyncStreamActorStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorState>> PrepareAsyncStreamActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorState>>(PrepareAsyncStreamActorStateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::TempoWorld::ActorStates* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorStates>> AsyncGetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorStates>>(AsyncGetCurrentActorStatesNearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorStates>> PrepareAsyncGetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorStates>>(PrepareAsyncGetCurrentActorStatesNearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoWorld::ActorStates>> StreamActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TempoWorld::ActorStates>>(StreamActorStatesNearRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorStates>> AsyncStreamActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorStates>>(AsyncStreamActorStatesNearRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorStates>> PrepareAsyncStreamActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorStates>>(PrepareAsyncStreamActorStatesNearRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StreamOverlapEvents(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest* request, ::grpc::ClientReadReactor< ::TempoWorld::OverlapEventResponse>* reactor) = 0;
      virtual void GetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest* request, ::TempoWorld::ActorState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest* request, ::TempoWorld::ActorState* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest* request, ::grpc::ClientReadReactor< ::TempoWorld::ActorState>* reactor) = 0;
      virtual void GetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::TempoWorld::ActorStates* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::TempoWorld::ActorStates* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::grpc::ClientReadReactor< ::TempoWorld::ActorStates>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::TempoWorld::OverlapEventResponse>* StreamOverlapEventsRaw(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoWorld::OverlapEventResponse>* AsyncStreamOverlapEventsRaw(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoWorld::OverlapEventResponse>* PrepareAsyncStreamOverlapEventsRaw(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorState>* AsyncGetCurrentActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorState>* PrepareAsyncGetCurrentActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TempoWorld::ActorState>* StreamActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorState>* AsyncStreamActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorState>* PrepareAsyncStreamActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorStates>* AsyncGetCurrentActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoWorld::ActorStates>* PrepareAsyncGetCurrentActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TempoWorld::ActorStates>* StreamActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorStates>* AsyncStreamActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TempoWorld::ActorStates>* PrepareAsyncStreamActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::TempoWorld::OverlapEventResponse>> StreamOverlapEvents(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TempoWorld::OverlapEventResponse>>(StreamOverlapEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::OverlapEventResponse>> AsyncStreamOverlapEvents(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::OverlapEventResponse>>(AsyncStreamOverlapEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::OverlapEventResponse>> PrepareAsyncStreamOverlapEvents(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::OverlapEventResponse>>(PrepareAsyncStreamOverlapEventsRaw(context, request, cq));
    }
    ::grpc::Status GetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::TempoWorld::ActorState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorState>> AsyncGetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorState>>(AsyncGetCurrentActorStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorState>> PrepareAsyncGetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorState>>(PrepareAsyncGetCurrentActorStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TempoWorld::ActorState>> StreamActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TempoWorld::ActorState>>(StreamActorStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::ActorState>> AsyncStreamActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::ActorState>>(AsyncStreamActorStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::ActorState>> PrepareAsyncStreamActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::ActorState>>(PrepareAsyncStreamActorStateRaw(context, request, cq));
    }
    ::grpc::Status GetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::TempoWorld::ActorStates* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorStates>> AsyncGetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorStates>>(AsyncGetCurrentActorStatesNearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorStates>> PrepareAsyncGetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorStates>>(PrepareAsyncGetCurrentActorStatesNearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TempoWorld::ActorStates>> StreamActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TempoWorld::ActorStates>>(StreamActorStatesNearRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::ActorStates>> AsyncStreamActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::ActorStates>>(AsyncStreamActorStatesNearRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::ActorStates>> PrepareAsyncStreamActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TempoWorld::ActorStates>>(PrepareAsyncStreamActorStatesNearRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StreamOverlapEvents(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest* request, ::grpc::ClientReadReactor< ::TempoWorld::OverlapEventResponse>* reactor) override;
      void GetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest* request, ::TempoWorld::ActorState* response, std::function<void(::grpc::Status)>) override;
      void GetCurrentActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest* request, ::TempoWorld::ActorState* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamActorState(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest* request, ::grpc::ClientReadReactor< ::TempoWorld::ActorState>* reactor) override;
      void GetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::TempoWorld::ActorStates* response, std::function<void(::grpc::Status)>) override;
      void GetCurrentActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::TempoWorld::ActorStates* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamActorStatesNear(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::grpc::ClientReadReactor< ::TempoWorld::ActorStates>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::TempoWorld::OverlapEventResponse>* StreamOverlapEventsRaw(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request) override;
    ::grpc::ClientAsyncReader< ::TempoWorld::OverlapEventResponse>* AsyncStreamOverlapEventsRaw(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TempoWorld::OverlapEventResponse>* PrepareAsyncStreamOverlapEventsRaw(::grpc::ClientContext* context, const ::TempoWorld::OverlapEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorState>* AsyncGetCurrentActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorState>* PrepareAsyncGetCurrentActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TempoWorld::ActorState>* StreamActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request) override;
    ::grpc::ClientAsyncReader< ::TempoWorld::ActorState>* AsyncStreamActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TempoWorld::ActorState>* PrepareAsyncStreamActorStateRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorStates>* AsyncGetCurrentActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoWorld::ActorStates>* PrepareAsyncGetCurrentActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TempoWorld::ActorStates>* StreamActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request) override;
    ::grpc::ClientAsyncReader< ::TempoWorld::ActorStates>* AsyncStreamActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TempoWorld::ActorStates>* PrepareAsyncStreamActorStatesNearRaw(::grpc::ClientContext* context, const ::TempoWorld::ActorStatesNearRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StreamOverlapEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentActorState_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamActorState_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentActorStatesNear_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamActorStatesNear_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StreamOverlapEvents(::grpc::ServerContext* context, const ::TempoWorld::OverlapEventRequest* request, ::grpc::ServerWriter< ::TempoWorld::OverlapEventResponse>* writer);
    virtual ::grpc::Status GetCurrentActorState(::grpc::ServerContext* context, const ::TempoWorld::ActorStateRequest* request, ::TempoWorld::ActorState* response);
    virtual ::grpc::Status StreamActorState(::grpc::ServerContext* context, const ::TempoWorld::ActorStateRequest* request, ::grpc::ServerWriter< ::TempoWorld::ActorState>* writer);
    virtual ::grpc::Status GetCurrentActorStatesNear(::grpc::ServerContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::TempoWorld::ActorStates* response);
    virtual ::grpc::Status StreamActorStatesNear(::grpc::ServerContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::grpc::ServerWriter< ::TempoWorld::ActorStates>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamOverlapEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamOverlapEvents() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StreamOverlapEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOverlapEvents(::grpc::ServerContext* /*context*/, const ::TempoWorld::OverlapEventRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::OverlapEventResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamOverlapEvents(::grpc::ServerContext* context, ::TempoWorld::OverlapEventRequest* request, ::grpc::ServerAsyncWriter< ::TempoWorld::OverlapEventResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCurrentActorState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCurrentActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::TempoWorld::ActorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentActorState(::grpc::ServerContext* context, ::TempoWorld::ActorStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoWorld::ActorState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamActorState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StreamActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamActorState(::grpc::ServerContext* context, ::TempoWorld::ActorStateRequest* request, ::grpc::ServerAsyncWriter< ::TempoWorld::ActorState>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCurrentActorStatesNear() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetCurrentActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::TempoWorld::ActorStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentActorStatesNear(::grpc::ServerContext* context, ::TempoWorld::ActorStatesNearRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoWorld::ActorStates>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamActorStatesNear() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StreamActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorStates>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamActorStatesNear(::grpc::ServerContext* context, ::TempoWorld::ActorStatesNearRequest* request, ::grpc::ServerAsyncWriter< ::TempoWorld::ActorStates>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StreamOverlapEvents<WithAsyncMethod_GetCurrentActorState<WithAsyncMethod_StreamActorState<WithAsyncMethod_GetCurrentActorStatesNear<WithAsyncMethod_StreamActorStatesNear<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StreamOverlapEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamOverlapEvents() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::TempoWorld::OverlapEventRequest, ::TempoWorld::OverlapEventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoWorld::OverlapEventRequest* request) { return this->StreamOverlapEvents(context, request); }));
    }
    ~WithCallbackMethod_StreamOverlapEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOverlapEvents(::grpc::ServerContext* /*context*/, const ::TempoWorld::OverlapEventRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::OverlapEventResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::TempoWorld::OverlapEventResponse>* StreamOverlapEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoWorld::OverlapEventRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCurrentActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCurrentActorState() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoWorld::ActorStateRequest* request, ::TempoWorld::ActorState* response) { return this->GetCurrentActorState(context, request, response); }));}
    void SetMessageAllocatorFor_GetCurrentActorState(
        ::grpc::MessageAllocator< ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCurrentActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::TempoWorld::ActorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentActorState(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::TempoWorld::ActorState* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamActorState() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoWorld::ActorStateRequest* request) { return this->StreamActorState(context, request); }));
    }
    ~WithCallbackMethod_StreamActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::TempoWorld::ActorState>* StreamActorState(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCurrentActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCurrentActorStatesNear() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoWorld::ActorStatesNearRequest* request, ::TempoWorld::ActorStates* response) { return this->GetCurrentActorStatesNear(context, request, response); }));}
    void SetMessageAllocatorFor_GetCurrentActorStatesNear(
        ::grpc::MessageAllocator< ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCurrentActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::TempoWorld::ActorStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentActorStatesNear(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::TempoWorld::ActorStates* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamActorStatesNear() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoWorld::ActorStatesNearRequest* request) { return this->StreamActorStatesNear(context, request); }));
    }
    ~WithCallbackMethod_StreamActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorStates>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::TempoWorld::ActorStates>* StreamActorStatesNear(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StreamOverlapEvents<WithCallbackMethod_GetCurrentActorState<WithCallbackMethod_StreamActorState<WithCallbackMethod_GetCurrentActorStatesNear<WithCallbackMethod_StreamActorStatesNear<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StreamOverlapEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamOverlapEvents() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StreamOverlapEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOverlapEvents(::grpc::ServerContext* /*context*/, const ::TempoWorld::OverlapEventRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::OverlapEventResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCurrentActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCurrentActorState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCurrentActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::TempoWorld::ActorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamActorState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StreamActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCurrentActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCurrentActorStatesNear() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetCurrentActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::TempoWorld::ActorStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamActorStatesNear() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StreamActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorStates>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamOverlapEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamOverlapEvents() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StreamOverlapEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOverlapEvents(::grpc::ServerContext* /*context*/, const ::TempoWorld::OverlapEventRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::OverlapEventResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamOverlapEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCurrentActorState() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCurrentActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::TempoWorld::ActorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentActorState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamActorState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StreamActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamActorState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCurrentActorStatesNear() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetCurrentActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::TempoWorld::ActorStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentActorStatesNear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamActorStatesNear() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StreamActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorStates>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamActorStatesNear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamOverlapEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamOverlapEvents() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamOverlapEvents(context, request); }));
    }
    ~WithRawCallbackMethod_StreamOverlapEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOverlapEvents(::grpc::ServerContext* /*context*/, const ::TempoWorld::OverlapEventRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::OverlapEventResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamOverlapEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCurrentActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCurrentActorState() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCurrentActorState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCurrentActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::TempoWorld::ActorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentActorState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamActorState() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamActorState(context, request); }));
    }
    ~WithRawCallbackMethod_StreamActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamActorState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCurrentActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCurrentActorStatesNear() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCurrentActorStatesNear(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCurrentActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::TempoWorld::ActorStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentActorStatesNear(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamActorStatesNear() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamActorStatesNear(context, request); }));
    }
    ~WithRawCallbackMethod_StreamActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorStates>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamActorStatesNear(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCurrentActorState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState>* streamer) {
                       return this->StreamedGetCurrentActorState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCurrentActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::TempoWorld::ActorState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentActorState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoWorld::ActorStateRequest,::TempoWorld::ActorState>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCurrentActorStatesNear() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates>* streamer) {
                       return this->StreamedGetCurrentActorStatesNear(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCurrentActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::TempoWorld::ActorStates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentActorStatesNear(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoWorld::ActorStatesNearRequest,::TempoWorld::ActorStates>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCurrentActorState<WithStreamedUnaryMethod_GetCurrentActorStatesNear<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamOverlapEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamOverlapEvents() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::TempoWorld::OverlapEventRequest, ::TempoWorld::OverlapEventResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::TempoWorld::OverlapEventRequest, ::TempoWorld::OverlapEventResponse>* streamer) {
                       return this->StreamedStreamOverlapEvents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamOverlapEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamOverlapEvents(::grpc::ServerContext* /*context*/, const ::TempoWorld::OverlapEventRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::OverlapEventResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamOverlapEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TempoWorld::OverlapEventRequest,::TempoWorld::OverlapEventResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamActorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamActorState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::TempoWorld::ActorStateRequest, ::TempoWorld::ActorState>* streamer) {
                       return this->StreamedStreamActorState(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamActorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamActorState(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStateRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamActorState(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TempoWorld::ActorStateRequest,::TempoWorld::ActorState>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamActorStatesNear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamActorStatesNear() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::TempoWorld::ActorStatesNearRequest, ::TempoWorld::ActorStates>* streamer) {
                       return this->StreamedStreamActorStatesNear(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamActorStatesNear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamActorStatesNear(::grpc::ServerContext* /*context*/, const ::TempoWorld::ActorStatesNearRequest* /*request*/, ::grpc::ServerWriter< ::TempoWorld::ActorStates>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamActorStatesNear(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TempoWorld::ActorStatesNearRequest,::TempoWorld::ActorStates>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamOverlapEvents<WithSplitStreamingMethod_StreamActorState<WithSplitStreamingMethod_StreamActorStatesNear<Service > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_StreamOverlapEvents<WithStreamedUnaryMethod_GetCurrentActorState<WithSplitStreamingMethod_StreamActorState<WithStreamedUnaryMethod_GetCurrentActorStatesNear<WithSplitStreamingMethod_StreamActorStatesNear<Service > > > > > StreamedService;
};

}  // namespace TempoWorld


#endif  // GRPC_TempoWorld_2fWorldState_2eproto__INCLUDED

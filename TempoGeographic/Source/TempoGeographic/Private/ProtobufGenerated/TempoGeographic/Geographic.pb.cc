// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoGeographic/Geographic.proto

#include "TempoGeographic/Geographic.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf_tempo;
namespace _pbi = ::google::protobuf_tempo::internal;
namespace _fl = ::google::protobuf_tempo::internal::field_layout;
namespace TempoGeographic {

inline constexpr TimeOfDay::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : hour_{0u},
        minute_{0u},
        second_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TimeOfDay::TimeOfDay(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TimeOfDayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeOfDayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeOfDayDefaultTypeInternal() {}
  union {
    TimeOfDay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOGEOGRAPHIC_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeOfDayDefaultTypeInternal _TimeOfDay_default_instance_;

inline constexpr GeographicCoordinate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : latitude_{0},
        longitude_{0},
        altitude_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GeographicCoordinate::GeographicCoordinate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GeographicCoordinateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeographicCoordinateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeographicCoordinateDefaultTypeInternal() {}
  union {
    GeographicCoordinate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOGEOGRAPHIC_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeographicCoordinateDefaultTypeInternal _GeographicCoordinate_default_instance_;

inline constexpr DayCycleRateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DayCycleRateRequest::DayCycleRateRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DayCycleRateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DayCycleRateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DayCycleRateRequestDefaultTypeInternal() {}
  union {
    DayCycleRateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOGEOGRAPHIC_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DayCycleRateRequestDefaultTypeInternal _DayCycleRateRequest_default_instance_;

inline constexpr Date::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : day_{0u},
        month_{0u},
        year_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Date::Date(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateDefaultTypeInternal() {}
  union {
    Date _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOGEOGRAPHIC_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateDefaultTypeInternal _Date_default_instance_;

inline constexpr DateTime::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        date_{nullptr},
        time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DateTime::DateTime(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DateTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateTimeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateTimeDefaultTypeInternal() {}
  union {
    DateTime _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPOGEOGRAPHIC_API
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateTimeDefaultTypeInternal _DateTime_default_instance_;
}  // namespace TempoGeographic
static ::_pb::Metadata file_level_metadata_TempoGeographic_2fGeographic_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_TempoGeographic_2fGeographic_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_TempoGeographic_2fGeographic_2eproto = nullptr;
const ::uint32_t TableStruct_TempoGeographic_2fGeographic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::Date, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::Date, _impl_.day_),
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::Date, _impl_.month_),
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::Date, _impl_.year_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::TimeOfDay, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::TimeOfDay, _impl_.hour_),
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::TimeOfDay, _impl_.minute_),
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::TimeOfDay, _impl_.second_),
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::DateTime, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::DateTime, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::DateTime, _impl_.date_),
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::DateTime, _impl_.time_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::GeographicCoordinate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::GeographicCoordinate, _impl_.latitude_),
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::GeographicCoordinate, _impl_.longitude_),
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::GeographicCoordinate, _impl_.altitude_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::DayCycleRateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TempoGeographic::DayCycleRateRequest, _impl_.rate_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::TempoGeographic::Date)},
        {11, -1, -1, sizeof(::TempoGeographic::TimeOfDay)},
        {22, 32, -1, sizeof(::TempoGeographic::DateTime)},
        {34, -1, -1, sizeof(::TempoGeographic::GeographicCoordinate)},
        {45, -1, -1, sizeof(::TempoGeographic::DayCycleRateRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::TempoGeographic::_Date_default_instance_._instance,
    &::TempoGeographic::_TimeOfDay_default_instance_._instance,
    &::TempoGeographic::_DateTime_default_instance_._instance,
    &::TempoGeographic::_GeographicCoordinate_default_instance_._instance,
    &::TempoGeographic::_DayCycleRateRequest_default_instance_._instance,
};
const char descriptor_table_protodef_TempoGeographic_2fGeographic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n TempoGeographic/Geographic.proto\022\017Temp"
    "oGeographic\032\032TempoScripting/Empty.proto\""
    "0\n\004Date\022\013\n\003day\030\001 \001(\r\022\r\n\005month\030\002 \001(\r\022\014\n\004y"
    "ear\030\003 \001(\r\"9\n\tTimeOfDay\022\014\n\004hour\030\001 \001(\r\022\016\n\006"
    "minute\030\002 \001(\r\022\016\n\006second\030\003 \001(\r\"Y\n\010DateTime"
    "\022#\n\004date\030\001 \001(\0132\025.TempoGeographic.Date\022(\n"
    "\004time\030\002 \001(\0132\032.TempoGeographic.TimeOfDay\""
    "M\n\024GeographicCoordinate\022\020\n\010latitude\030\001 \001("
    "\001\022\021\n\tlongitude\030\002 \001(\001\022\020\n\010altitude\030\003 \001(\001\"#"
    "\n\023DayCycleRateRequest\022\014\n\004rate\030\001 \001(\0022\200\003\n\021"
    "GeographicService\0227\n\007SetDate\022\025.TempoGeog"
    "raphic.Date\032\025.TempoScripting.Empty\022A\n\014Se"
    "tTimeOfDay\022\032.TempoGeographic.TimeOfDay\032\025"
    ".TempoScripting.Empty\022V\n\027SetDayCycleRela"
    "tiveRate\022$.TempoGeographic.DayCycleRateR"
    "equest\032\025.TempoScripting.Empty\022\?\n\013GetDate"
    "Time\022\025.TempoScripting.Empty\032\031.TempoGeogr"
    "aphic.DateTime\022V\n\026SetGeographicReference"
    "\022%.TempoGeographic.GeographicCoordinate\032"
    "\025.TempoScripting.Emptyb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_TempoGeographic_2fGeographic_2eproto_deps[1] =
    {
        &::descriptor_table_TempoScripting_2fEmpty_2eproto,
};
static ::absl_tempo::once_flag descriptor_table_TempoGeographic_2fGeographic_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TempoGeographic_2fGeographic_2eproto = {
    false,
    false,
    790,
    descriptor_table_protodef_TempoGeographic_2fGeographic_2eproto,
    "TempoGeographic/Geographic.proto",
    &descriptor_table_TempoGeographic_2fGeographic_2eproto_once,
    descriptor_table_TempoGeographic_2fGeographic_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_TempoGeographic_2fGeographic_2eproto::offsets,
    file_level_metadata_TempoGeographic_2fGeographic_2eproto,
    file_level_enum_descriptors_TempoGeographic_2fGeographic_2eproto,
    file_level_service_descriptors_TempoGeographic_2fGeographic_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TempoGeographic_2fGeographic_2eproto_getter() {
  return &descriptor_table_TempoGeographic_2fGeographic_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TempoGeographic_2fGeographic_2eproto(&descriptor_table_TempoGeographic_2fGeographic_2eproto);
namespace TempoGeographic {
// ===================================================================

class Date::_Internal {
 public:
};

Date::Date(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoGeographic.Date)
}
Date::Date(
    ::google::protobuf_tempo::Arena* arena, const Date& from)
    : Date(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Date::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : _cached_size_{0} {}

inline void Date::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, day_),
           0,
           offsetof(Impl_, year_) -
               offsetof(Impl_, day_) +
               sizeof(Impl_::year_));
}
Date::~Date() {
  // @@protoc_insertion_point(destructor:TempoGeographic.Date)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void Date::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Date::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoGeographic.Date)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.day_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.year_) -
      reinterpret_cast<char*>(&_impl_.day_)) + sizeof(_impl_.year_));
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* Date::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Date::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Date_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 day = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Date, _impl_.day_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Date, _impl_.day_)}},
    // uint32 month = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Date, _impl_.month_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Date, _impl_.month_)}},
    // uint32 year = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Date, _impl_.year_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Date, _impl_.year_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 day = 1;
    {PROTOBUF_FIELD_OFFSET(Date, _impl_.day_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 month = 2;
    {PROTOBUF_FIELD_OFFSET(Date, _impl_.month_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 year = 3;
    {PROTOBUF_FIELD_OFFSET(Date, _impl_.year_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Date::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoGeographic.Date)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 day = 1;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_day(), target);
  }

  // uint32 month = 2;
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_month(), target);
  }

  // uint32 year = 3;
  if (this->_internal_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoGeographic.Date)
  return target;
}

::size_t Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoGeographic.Date)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 day = 1;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_day());
  }

  // uint32 month = 2;
  if (this->_internal_month() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_month());
  }

  // uint32 year = 3;
  if (this->_internal_year() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_year());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData Date::_class_data_ = {
    Date::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* Date::GetClassData() const {
  return &_class_data_;
}

void Date::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<Date*>(&to_msg);
  auto& from = static_cast<const Date&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoGeographic.Date)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  if (from._internal_month() != 0) {
    _this->_internal_set_month(from._internal_month());
  }
  if (from._internal_year() != 0) {
    _this->_internal_set_year(from._internal_year());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void Date::CopyFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoGeographic.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Date::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Date::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Date::InternalSwap(Date* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Date, _impl_.year_)
      + sizeof(Date::_impl_.year_)
      - PROTOBUF_FIELD_OFFSET(Date, _impl_.day_)>(
          reinterpret_cast<char*>(&_impl_.day_),
          reinterpret_cast<char*>(&other->_impl_.day_));
}

::google::protobuf_tempo::Metadata Date::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoGeographic_2fGeographic_2eproto_getter, &descriptor_table_TempoGeographic_2fGeographic_2eproto_once,
      file_level_metadata_TempoGeographic_2fGeographic_2eproto[0]);
}
// ===================================================================

class TimeOfDay::_Internal {
 public:
};

TimeOfDay::TimeOfDay(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoGeographic.TimeOfDay)
}
TimeOfDay::TimeOfDay(
    ::google::protobuf_tempo::Arena* arena, const TimeOfDay& from)
    : TimeOfDay(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TimeOfDay::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : _cached_size_{0} {}

inline void TimeOfDay::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, hour_),
           0,
           offsetof(Impl_, second_) -
               offsetof(Impl_, hour_) +
               sizeof(Impl_::second_));
}
TimeOfDay::~TimeOfDay() {
  // @@protoc_insertion_point(destructor:TempoGeographic.TimeOfDay)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void TimeOfDay::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TimeOfDay::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoGeographic.TimeOfDay)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hour_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.second_) -
      reinterpret_cast<char*>(&_impl_.hour_)) + sizeof(_impl_.second_));
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* TimeOfDay::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TimeOfDay::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TimeOfDay_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 hour = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeOfDay, _impl_.hour_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.hour_)}},
    // uint32 minute = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeOfDay, _impl_.minute_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.minute_)}},
    // uint32 second = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeOfDay, _impl_.second_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.second_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 hour = 1;
    {PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.hour_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 minute = 2;
    {PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.minute_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 second = 3;
    {PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.second_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TimeOfDay::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoGeographic.TimeOfDay)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 hour = 1;
  if (this->_internal_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_hour(), target);
  }

  // uint32 minute = 2;
  if (this->_internal_minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_minute(), target);
  }

  // uint32 second = 3;
  if (this->_internal_second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoGeographic.TimeOfDay)
  return target;
}

::size_t TimeOfDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoGeographic.TimeOfDay)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hour = 1;
  if (this->_internal_hour() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_hour());
  }

  // uint32 minute = 2;
  if (this->_internal_minute() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_minute());
  }

  // uint32 second = 3;
  if (this->_internal_second() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_second());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData TimeOfDay::_class_data_ = {
    TimeOfDay::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* TimeOfDay::GetClassData() const {
  return &_class_data_;
}

void TimeOfDay::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<TimeOfDay*>(&to_msg);
  auto& from = static_cast<const TimeOfDay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoGeographic.TimeOfDay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hour() != 0) {
    _this->_internal_set_hour(from._internal_hour());
  }
  if (from._internal_minute() != 0) {
    _this->_internal_set_minute(from._internal_minute());
  }
  if (from._internal_second() != 0) {
    _this->_internal_set_second(from._internal_second());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void TimeOfDay::CopyFrom(const TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoGeographic.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TimeOfDay::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TimeOfDay::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TimeOfDay::InternalSwap(TimeOfDay* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.second_)
      + sizeof(TimeOfDay::_impl_.second_)
      - PROTOBUF_FIELD_OFFSET(TimeOfDay, _impl_.hour_)>(
          reinterpret_cast<char*>(&_impl_.hour_),
          reinterpret_cast<char*>(&other->_impl_.hour_));
}

::google::protobuf_tempo::Metadata TimeOfDay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoGeographic_2fGeographic_2eproto_getter, &descriptor_table_TempoGeographic_2fGeographic_2eproto_once,
      file_level_metadata_TempoGeographic_2fGeographic_2eproto[1]);
}
// ===================================================================

class DateTime::_Internal {
 public:
  using HasBits = decltype(std::declval<DateTime>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DateTime, _impl_._has_bits_);
  static const ::TempoGeographic::Date& date(const DateTime* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TempoGeographic::TimeOfDay& time(const DateTime* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TempoGeographic::Date& DateTime::_Internal::date(const DateTime* msg) {
  return *msg->_impl_.date_;
}
const ::TempoGeographic::TimeOfDay& DateTime::_Internal::time(const DateTime* msg) {
  return *msg->_impl_.time_;
}
DateTime::DateTime(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoGeographic.DateTime)
}
inline PROTOBUF_NDEBUG_INLINE DateTime::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility, ::google::protobuf_tempo::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DateTime::DateTime(
    ::google::protobuf_tempo::Arena* arena,
    const DateTime& from)
    : ::google::protobuf_tempo::Message(arena) {
  DateTime* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::TempoGeographic::Date>(arena, *from._impl_.date_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::TempoGeographic::TimeOfDay>(arena, *from._impl_.time_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:TempoGeographic.DateTime)
}
inline PROTOBUF_NDEBUG_INLINE DateTime::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : _cached_size_{0} {}

inline void DateTime::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, date_),
           0,
           offsetof(Impl_, time_) -
               offsetof(Impl_, date_) +
               sizeof(Impl_::time_));
}
DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:TempoGeographic.DateTime)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void DateTime::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.date_;
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoGeographic.DateTime)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.date_ != nullptr);
      _impl_.date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* DateTime::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> DateTime::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DateTime, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DateTime_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .TempoGeographic.TimeOfDay time = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DateTime, _impl_.time_)}},
    // .TempoGeographic.Date date = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DateTime, _impl_.date_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .TempoGeographic.Date date = 1;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .TempoGeographic.TimeOfDay time = 2;
    {PROTOBUF_FIELD_OFFSET(DateTime, _impl_.time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::TempoGeographic::Date>()},
    {::_pbi::TcParser::GetTable<::TempoGeographic::TimeOfDay>()},
  }}, {{
  }},
};

::uint8_t* DateTime::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoGeographic.DateTime)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .TempoGeographic.Date date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // .TempoGeographic.TimeOfDay time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf_tempo::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoGeographic.DateTime)
  return target;
}

::size_t DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoGeographic.DateTime)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .TempoGeographic.Date date = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(*_impl_.date_);
    }

    // .TempoGeographic.TimeOfDay time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf_tempo::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData DateTime::_class_data_ = {
    DateTime::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* DateTime::GetClassData() const {
  return &_class_data_;
}

void DateTime::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<DateTime*>(&to_msg);
  auto& from = static_cast<const DateTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoGeographic.DateTime)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_date()->::TempoGeographic::Date::MergeFrom(
          from._internal_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_time()->::TempoGeographic::TimeOfDay::MergeFrom(
          from._internal_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoGeographic.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DateTime::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DateTime::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DateTime::InternalSwap(DateTime* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateTime, _impl_.time_)
      + sizeof(DateTime::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(DateTime, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::google::protobuf_tempo::Metadata DateTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoGeographic_2fGeographic_2eproto_getter, &descriptor_table_TempoGeographic_2fGeographic_2eproto_once,
      file_level_metadata_TempoGeographic_2fGeographic_2eproto[2]);
}
// ===================================================================

class GeographicCoordinate::_Internal {
 public:
};

GeographicCoordinate::GeographicCoordinate(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoGeographic.GeographicCoordinate)
}
GeographicCoordinate::GeographicCoordinate(
    ::google::protobuf_tempo::Arena* arena, const GeographicCoordinate& from)
    : GeographicCoordinate(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GeographicCoordinate::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : _cached_size_{0} {}

inline void GeographicCoordinate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           0,
           offsetof(Impl_, altitude_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::altitude_));
}
GeographicCoordinate::~GeographicCoordinate() {
  // @@protoc_insertion_point(destructor:TempoGeographic.GeographicCoordinate)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void GeographicCoordinate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GeographicCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoGeographic.GeographicCoordinate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.altitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.altitude_));
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* GeographicCoordinate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GeographicCoordinate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GeographicCoordinate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double latitude = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(GeographicCoordinate, _impl_.latitude_)}},
    // double longitude = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(GeographicCoordinate, _impl_.longitude_)}},
    // double altitude = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(GeographicCoordinate, _impl_.altitude_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double latitude = 1;
    {PROTOBUF_FIELD_OFFSET(GeographicCoordinate, _impl_.latitude_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude = 2;
    {PROTOBUF_FIELD_OFFSET(GeographicCoordinate, _impl_.longitude_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double altitude = 3;
    {PROTOBUF_FIELD_OFFSET(GeographicCoordinate, _impl_.altitude_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GeographicCoordinate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoGeographic.GeographicCoordinate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  ::uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  ::uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_longitude(), target);
  }

  // double altitude = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  ::uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoGeographic.GeographicCoordinate)
  return target;
}

::size_t GeographicCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoGeographic.GeographicCoordinate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  ::uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 9;
  }

  // double longitude = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  ::uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 9;
  }

  // double altitude = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  ::uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData GeographicCoordinate::_class_data_ = {
    GeographicCoordinate::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* GeographicCoordinate::GetClassData() const {
  return &_class_data_;
}

void GeographicCoordinate::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<GeographicCoordinate*>(&to_msg);
  auto& from = static_cast<const GeographicCoordinate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoGeographic.GeographicCoordinate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  ::uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  ::uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_altitude = from._internal_altitude();
  ::uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _this->_internal_set_altitude(from._internal_altitude());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void GeographicCoordinate::CopyFrom(const GeographicCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoGeographic.GeographicCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GeographicCoordinate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GeographicCoordinate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GeographicCoordinate::InternalSwap(GeographicCoordinate* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf_tempo::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeographicCoordinate, _impl_.altitude_)
      + sizeof(GeographicCoordinate::_impl_.altitude_)
      - PROTOBUF_FIELD_OFFSET(GeographicCoordinate, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::google::protobuf_tempo::Metadata GeographicCoordinate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoGeographic_2fGeographic_2eproto_getter, &descriptor_table_TempoGeographic_2fGeographic_2eproto_once,
      file_level_metadata_TempoGeographic_2fGeographic_2eproto[3]);
}
// ===================================================================

class DayCycleRateRequest::_Internal {
 public:
};

DayCycleRateRequest::DayCycleRateRequest(::google::protobuf_tempo::Arena* arena)
    : ::google::protobuf_tempo::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TempoGeographic.DayCycleRateRequest)
}
DayCycleRateRequest::DayCycleRateRequest(
    ::google::protobuf_tempo::Arena* arena, const DayCycleRateRequest& from)
    : DayCycleRateRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DayCycleRateRequest::Impl_::Impl_(
    ::google::protobuf_tempo::internal::InternalVisibility visibility,
    ::google::protobuf_tempo::Arena* arena)
      : _cached_size_{0} {}

inline void DayCycleRateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_ = {};
}
DayCycleRateRequest::~DayCycleRateRequest() {
  // @@protoc_insertion_point(destructor:TempoGeographic.DayCycleRateRequest)
  _internal_metadata_.Delete<::google::protobuf_tempo::UnknownFieldSet>();
  SharedDtor();
}
inline void DayCycleRateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DayCycleRateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TempoGeographic.DayCycleRateRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_ = 0;
  _internal_metadata_.Clear<::google::protobuf_tempo::UnknownFieldSet>();
}

const char* DayCycleRateRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> DayCycleRateRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DayCycleRateRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float rate = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(DayCycleRateRequest, _impl_.rate_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float rate = 1;
    {PROTOBUF_FIELD_OFFSET(DayCycleRateRequest, _impl_.rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* DayCycleRateRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempoGeographic.DayCycleRateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float rate = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempoGeographic.DayCycleRateRequest)
  return target;
}

::size_t DayCycleRateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempoGeographic.DayCycleRateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float rate = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf_tempo::Message::ClassData DayCycleRateRequest::_class_data_ = {
    DayCycleRateRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf_tempo::Message::ClassData* DayCycleRateRequest::GetClassData() const {
  return &_class_data_;
}

void DayCycleRateRequest::MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg) {
  auto* const _this = static_cast<DayCycleRateRequest*>(&to_msg);
  auto& from = static_cast<const DayCycleRateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TempoGeographic.DayCycleRateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = from._internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    _this->_internal_set_rate(from._internal_rate());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf_tempo::UnknownFieldSet>(from._internal_metadata_);
}

void DayCycleRateRequest::CopyFrom(const DayCycleRateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempoGeographic.DayCycleRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DayCycleRateRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DayCycleRateRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DayCycleRateRequest::InternalSwap(DayCycleRateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_, other->_impl_.rate_);
}

::google::protobuf_tempo::Metadata DayCycleRateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TempoGeographic_2fGeographic_2eproto_getter, &descriptor_table_TempoGeographic_2fGeographic_2eproto_once,
      file_level_metadata_TempoGeographic_2fGeographic_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoGeographic
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

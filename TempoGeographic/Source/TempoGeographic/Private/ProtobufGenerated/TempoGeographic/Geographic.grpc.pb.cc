// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoGeographic/Geographic.proto

#include "TempoGeographic/Geographic.pb.h"
#include "TempoGeographic/Geographic.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace TempoGeographic {

static const char* GeographicService_method_names[] = {
  "/TempoGeographic.GeographicService/SetDate",
  "/TempoGeographic.GeographicService/SetTimeOfDay",
  "/TempoGeographic.GeographicService/SetDayCycleRelativeRate",
  "/TempoGeographic.GeographicService/GetDateTime",
  "/TempoGeographic.GeographicService/SetGeographicReference",
};

std::unique_ptr< GeographicService::Stub> GeographicService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GeographicService::Stub> stub(new GeographicService::Stub(channel, options));
  return stub;
}

GeographicService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetDate_(GeographicService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTimeOfDay_(GeographicService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDayCycleRelativeRate_(GeographicService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDateTime_(GeographicService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetGeographicReference_(GeographicService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GeographicService::Stub::SetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoGeographic::Date, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDate_, context, request, response);
}

void GeographicService::Stub::async::SetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoGeographic::Date, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDate_, context, request, response, std::move(f));
}

void GeographicService::Stub::async::SetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* GeographicService::Stub::PrepareAsyncSetDateRaw(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoGeographic::Date, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* GeographicService::Stub::AsyncSetDateRaw(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeographicService::Stub::SetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoGeographic::TimeOfDay, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTimeOfDay_, context, request, response);
}

void GeographicService::Stub::async::SetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoGeographic::TimeOfDay, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTimeOfDay_, context, request, response, std::move(f));
}

void GeographicService::Stub::async::SetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTimeOfDay_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* GeographicService::Stub::PrepareAsyncSetTimeOfDayRaw(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoGeographic::TimeOfDay, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTimeOfDay_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* GeographicService::Stub::AsyncSetTimeOfDayRaw(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTimeOfDayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeographicService::Stub::SetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoGeographic::DayCycleRateRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDayCycleRelativeRate_, context, request, response);
}

void GeographicService::Stub::async::SetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoGeographic::DayCycleRateRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDayCycleRelativeRate_, context, request, response, std::move(f));
}

void GeographicService::Stub::async::SetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDayCycleRelativeRate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* GeographicService::Stub::PrepareAsyncSetDayCycleRelativeRateRaw(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoGeographic::DayCycleRateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDayCycleRelativeRate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* GeographicService::Stub::AsyncSetDayCycleRelativeRateRaw(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDayCycleRelativeRateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeographicService::Stub::GetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoGeographic::DateTime* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoGeographic::DateTime, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDateTime_, context, request, response);
}

void GeographicService::Stub::async::GetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoGeographic::DateTime* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoGeographic::DateTime, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDateTime_, context, request, response, std::move(f));
}

void GeographicService::Stub::async::GetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoGeographic::DateTime* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDateTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoGeographic::DateTime>* GeographicService::Stub::PrepareAsyncGetDateTimeRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoGeographic::DateTime, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDateTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoGeographic::DateTime>* GeographicService::Stub::AsyncGetDateTimeRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDateTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeographicService::Stub::SetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoGeographic::GeographicCoordinate, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGeographicReference_, context, request, response);
}

void GeographicService::Stub::async::SetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoGeographic::GeographicCoordinate, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGeographicReference_, context, request, response, std::move(f));
}

void GeographicService::Stub::async::SetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGeographicReference_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* GeographicService::Stub::PrepareAsyncSetGeographicReferenceRaw(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoGeographic::GeographicCoordinate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGeographicReference_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* GeographicService::Stub::AsyncSetGeographicReferenceRaw(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGeographicReferenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

GeographicService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeographicService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeographicService::Service, ::TempoGeographic::Date, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeographicService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoGeographic::Date* req,
             ::TempoScripting::Empty* resp) {
               return service->SetDate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeographicService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeographicService::Service, ::TempoGeographic::TimeOfDay, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeographicService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoGeographic::TimeOfDay* req,
             ::TempoScripting::Empty* resp) {
               return service->SetTimeOfDay(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeographicService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeographicService::Service, ::TempoGeographic::DayCycleRateRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeographicService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoGeographic::DayCycleRateRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetDayCycleRelativeRate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeographicService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeographicService::Service, ::TempoScripting::Empty, ::TempoGeographic::DateTime, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeographicService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoGeographic::DateTime* resp) {
               return service->GetDateTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeographicService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeographicService::Service, ::TempoGeographic::GeographicCoordinate, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeographicService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoGeographic::GeographicCoordinate* req,
             ::TempoScripting::Empty* resp) {
               return service->SetGeographicReference(ctx, req, resp);
             }, this)));
}

GeographicService::Service::~Service() {
}

::grpc::Status GeographicService::Service::SetDate(::grpc::ServerContext* context, const ::TempoGeographic::Date* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeographicService::Service::SetTimeOfDay(::grpc::ServerContext* context, const ::TempoGeographic::TimeOfDay* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeographicService::Service::SetDayCycleRelativeRate(::grpc::ServerContext* context, const ::TempoGeographic::DayCycleRateRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeographicService::Service::GetDateTime(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoGeographic::DateTime* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeographicService::Service::SetGeographicReference(::grpc::ServerContext* context, const ::TempoGeographic::GeographicCoordinate* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TempoGeographic


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TempoGeographic/Geographic.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_TempoGeographic_2fGeographic_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TempoGeographic_2fGeographic_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "TempoScripting/Empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TempoGeographic_2fGeographic_2eproto TEMPOGEOGRAPHIC_API

namespace google {
namespace protobuf_tempo {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf_tempo
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TEMPOGEOGRAPHIC_API TableStruct_TempoGeographic_2fGeographic_2eproto {
  static const ::uint32_t offsets[];
};
TEMPOGEOGRAPHIC_API extern const ::google::protobuf_tempo::internal::DescriptorTable
    descriptor_table_TempoGeographic_2fGeographic_2eproto;
namespace TempoGeographic {
class Date;
struct DateDefaultTypeInternal;
TEMPOGEOGRAPHIC_API extern DateDefaultTypeInternal _Date_default_instance_;
class DateTime;
struct DateTimeDefaultTypeInternal;
TEMPOGEOGRAPHIC_API extern DateTimeDefaultTypeInternal _DateTime_default_instance_;
class DayCycleRateRequest;
struct DayCycleRateRequestDefaultTypeInternal;
TEMPOGEOGRAPHIC_API extern DayCycleRateRequestDefaultTypeInternal _DayCycleRateRequest_default_instance_;
class GeographicCoordinate;
struct GeographicCoordinateDefaultTypeInternal;
TEMPOGEOGRAPHIC_API extern GeographicCoordinateDefaultTypeInternal _GeographicCoordinate_default_instance_;
class TimeOfDay;
struct TimeOfDayDefaultTypeInternal;
TEMPOGEOGRAPHIC_API extern TimeOfDayDefaultTypeInternal _TimeOfDay_default_instance_;
}  // namespace TempoGeographic
namespace google {
namespace protobuf_tempo {
}  // namespace protobuf_tempo
}  // namespace google

namespace TempoGeographic {

// ===================================================================


// -------------------------------------------------------------------

class TEMPOGEOGRAPHIC_API TimeOfDay final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoGeographic.TimeOfDay) */ {
 public:
  inline TimeOfDay() : TimeOfDay(nullptr) {}
  ~TimeOfDay() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TimeOfDay(::google::protobuf_tempo::internal::ConstantInitialized);

  inline TimeOfDay(const TimeOfDay& from)
      : TimeOfDay(nullptr, from) {}
  TimeOfDay(TimeOfDay&& from) noexcept
    : TimeOfDay() {
    *this = ::std::move(from);
  }

  inline TimeOfDay& operator=(const TimeOfDay& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeOfDay& operator=(TimeOfDay&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeOfDay& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeOfDay* internal_default_instance() {
    return reinterpret_cast<const TimeOfDay*>(
               &_TimeOfDay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeOfDay& a, TimeOfDay& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeOfDay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeOfDay* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeOfDay* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeOfDay>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const TimeOfDay& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const TimeOfDay& from) {
    TimeOfDay::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(TimeOfDay* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoGeographic.TimeOfDay";
  }
  protected:
  explicit TimeOfDay(::google::protobuf_tempo::Arena* arena);
  TimeOfDay(::google::protobuf_tempo::Arena* arena, const TimeOfDay& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHourFieldNumber = 1,
    kMinuteFieldNumber = 2,
    kSecondFieldNumber = 3,
  };
  // uint32 hour = 1;
  void clear_hour() ;
  ::uint32_t hour() const;
  void set_hour(::uint32_t value);

  private:
  ::uint32_t _internal_hour() const;
  void _internal_set_hour(::uint32_t value);

  public:
  // uint32 minute = 2;
  void clear_minute() ;
  ::uint32_t minute() const;
  void set_minute(::uint32_t value);

  private:
  ::uint32_t _internal_minute() const;
  void _internal_set_minute(::uint32_t value);

  public:
  // uint32 second = 3;
  void clear_second() ;
  ::uint32_t second() const;
  void set_second(::uint32_t value);

  private:
  ::uint32_t _internal_second() const;
  void _internal_set_second(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TempoGeographic.TimeOfDay)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOGEOGRAPHIC_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::uint32_t hour_;
    ::uint32_t minute_;
    ::uint32_t second_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoGeographic_2fGeographic_2eproto;
};// -------------------------------------------------------------------

class TEMPOGEOGRAPHIC_API GeographicCoordinate final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoGeographic.GeographicCoordinate) */ {
 public:
  inline GeographicCoordinate() : GeographicCoordinate(nullptr) {}
  ~GeographicCoordinate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GeographicCoordinate(::google::protobuf_tempo::internal::ConstantInitialized);

  inline GeographicCoordinate(const GeographicCoordinate& from)
      : GeographicCoordinate(nullptr, from) {}
  GeographicCoordinate(GeographicCoordinate&& from) noexcept
    : GeographicCoordinate() {
    *this = ::std::move(from);
  }

  inline GeographicCoordinate& operator=(const GeographicCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeographicCoordinate& operator=(GeographicCoordinate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeographicCoordinate& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeographicCoordinate* internal_default_instance() {
    return reinterpret_cast<const GeographicCoordinate*>(
               &_GeographicCoordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GeographicCoordinate& a, GeographicCoordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(GeographicCoordinate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeographicCoordinate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeographicCoordinate* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeographicCoordinate>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const GeographicCoordinate& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const GeographicCoordinate& from) {
    GeographicCoordinate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(GeographicCoordinate* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoGeographic.GeographicCoordinate";
  }
  protected:
  explicit GeographicCoordinate(::google::protobuf_tempo::Arena* arena);
  GeographicCoordinate(::google::protobuf_tempo::Arena* arena, const GeographicCoordinate& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // double latitude = 1;
  void clear_latitude() ;
  double latitude() const;
  void set_latitude(double value);

  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);

  public:
  // double longitude = 2;
  void clear_longitude() ;
  double longitude() const;
  void set_longitude(double value);

  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);

  public:
  // double altitude = 3;
  void clear_altitude() ;
  double altitude() const;
  void set_altitude(double value);

  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);

  public:
  // @@protoc_insertion_point(class_scope:TempoGeographic.GeographicCoordinate)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOGEOGRAPHIC_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    double latitude_;
    double longitude_;
    double altitude_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoGeographic_2fGeographic_2eproto;
};// -------------------------------------------------------------------

class TEMPOGEOGRAPHIC_API DayCycleRateRequest final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoGeographic.DayCycleRateRequest) */ {
 public:
  inline DayCycleRateRequest() : DayCycleRateRequest(nullptr) {}
  ~DayCycleRateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DayCycleRateRequest(::google::protobuf_tempo::internal::ConstantInitialized);

  inline DayCycleRateRequest(const DayCycleRateRequest& from)
      : DayCycleRateRequest(nullptr, from) {}
  DayCycleRateRequest(DayCycleRateRequest&& from) noexcept
    : DayCycleRateRequest() {
    *this = ::std::move(from);
  }

  inline DayCycleRateRequest& operator=(const DayCycleRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DayCycleRateRequest& operator=(DayCycleRateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DayCycleRateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DayCycleRateRequest* internal_default_instance() {
    return reinterpret_cast<const DayCycleRateRequest*>(
               &_DayCycleRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DayCycleRateRequest& a, DayCycleRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DayCycleRateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DayCycleRateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DayCycleRateRequest* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DayCycleRateRequest>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const DayCycleRateRequest& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const DayCycleRateRequest& from) {
    DayCycleRateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(DayCycleRateRequest* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoGeographic.DayCycleRateRequest";
  }
  protected:
  explicit DayCycleRateRequest(::google::protobuf_tempo::Arena* arena);
  DayCycleRateRequest(::google::protobuf_tempo::Arena* arena, const DayCycleRateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateFieldNumber = 1,
  };
  // float rate = 1;
  void clear_rate() ;
  float rate() const;
  void set_rate(float value);

  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);

  public:
  // @@protoc_insertion_point(class_scope:TempoGeographic.DayCycleRateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOGEOGRAPHIC_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    float rate_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoGeographic_2fGeographic_2eproto;
};// -------------------------------------------------------------------

class TEMPOGEOGRAPHIC_API Date final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoGeographic.Date) */ {
 public:
  inline Date() : Date(nullptr) {}
  ~Date() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Date(::google::protobuf_tempo::internal::ConstantInitialized);

  inline Date(const Date& from)
      : Date(nullptr, from) {}
  Date(Date&& from) noexcept
    : Date() {
    *this = ::std::move(from);
  }

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  inline Date& operator=(Date&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Date& default_instance() {
    return *internal_default_instance();
  }
  static inline const Date* internal_default_instance() {
    return reinterpret_cast<const Date*>(
               &_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Date& a, Date& b) {
    a.Swap(&b);
  }
  inline void Swap(Date* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Date* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Date* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Date>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const Date& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const Date& from) {
    Date::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(Date* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoGeographic.Date";
  }
  protected:
  explicit Date(::google::protobuf_tempo::Arena* arena);
  Date(::google::protobuf_tempo::Arena* arena, const Date& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayFieldNumber = 1,
    kMonthFieldNumber = 2,
    kYearFieldNumber = 3,
  };
  // uint32 day = 1;
  void clear_day() ;
  ::uint32_t day() const;
  void set_day(::uint32_t value);

  private:
  ::uint32_t _internal_day() const;
  void _internal_set_day(::uint32_t value);

  public:
  // uint32 month = 2;
  void clear_month() ;
  ::uint32_t month() const;
  void set_month(::uint32_t value);

  private:
  ::uint32_t _internal_month() const;
  void _internal_set_month(::uint32_t value);

  public:
  // uint32 year = 3;
  void clear_year() ;
  ::uint32_t year() const;
  void set_year(::uint32_t value);

  private:
  ::uint32_t _internal_year() const;
  void _internal_set_year(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TempoGeographic.Date)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOGEOGRAPHIC_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::uint32_t day_;
    ::uint32_t month_;
    ::uint32_t year_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoGeographic_2fGeographic_2eproto;
};// -------------------------------------------------------------------

class TEMPOGEOGRAPHIC_API DateTime final :
    public ::google::protobuf_tempo::Message /* @@protoc_insertion_point(class_definition:TempoGeographic.DateTime) */ {
 public:
  inline DateTime() : DateTime(nullptr) {}
  ~DateTime() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DateTime(::google::protobuf_tempo::internal::ConstantInitialized);

  inline DateTime(const DateTime& from)
      : DateTime(nullptr, from) {}
  DateTime(DateTime&& from) noexcept
    : DateTime() {
    *this = ::std::move(from);
  }

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTime& operator=(DateTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf_tempo::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf_tempo::UnknownFieldSet>(::google::protobuf_tempo::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf_tempo::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf_tempo::UnknownFieldSet>();
  }

  static const ::google::protobuf_tempo::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf_tempo::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf_tempo::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DateTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const DateTime* internal_default_instance() {
    return reinterpret_cast<const DateTime*>(
               &_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DateTime& a, DateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf_tempo::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateTime* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DateTime* New(::google::protobuf_tempo::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DateTime>(arena);
  }
  using ::google::protobuf_tempo::Message::CopyFrom;
  void CopyFrom(const DateTime& from);
  using ::google::protobuf_tempo::Message::MergeFrom;
  void MergeFrom( const DateTime& from) {
    DateTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf_tempo::Message& to_msg, const ::google::protobuf_tempo::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf_tempo::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf_tempo::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf_tempo::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf_tempo::Arena* arena);
  void SharedDtor();
  void InternalSwap(DateTime* other);

  private:
  friend class ::google::protobuf_tempo::internal::AnyMetadata;
  static ::absl_tempo::string_view FullMessageName() {
    return "TempoGeographic.DateTime";
  }
  protected:
  explicit DateTime(::google::protobuf_tempo::Arena* arena);
  DateTime(::google::protobuf_tempo::Arena* arena, const DateTime& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf_tempo::Message::ClassData*GetClassData() const final;

  ::google::protobuf_tempo::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // .TempoGeographic.Date date = 1;
  bool has_date() const;
  void clear_date() ;
  const ::TempoGeographic::Date& date() const;
  PROTOBUF_NODISCARD ::TempoGeographic::Date* release_date();
  ::TempoGeographic::Date* mutable_date();
  void set_allocated_date(::TempoGeographic::Date* value);
  void unsafe_arena_set_allocated_date(::TempoGeographic::Date* value);
  ::TempoGeographic::Date* unsafe_arena_release_date();

  private:
  const ::TempoGeographic::Date& _internal_date() const;
  ::TempoGeographic::Date* _internal_mutable_date();

  public:
  // .TempoGeographic.TimeOfDay time = 2;
  bool has_time() const;
  void clear_time() ;
  const ::TempoGeographic::TimeOfDay& time() const;
  PROTOBUF_NODISCARD ::TempoGeographic::TimeOfDay* release_time();
  ::TempoGeographic::TimeOfDay* mutable_time();
  void set_allocated_time(::TempoGeographic::TimeOfDay* value);
  void unsafe_arena_set_allocated_time(::TempoGeographic::TimeOfDay* value);
  ::TempoGeographic::TimeOfDay* unsafe_arena_release_time();

  private:
  const ::TempoGeographic::TimeOfDay& _internal_time() const;
  ::TempoGeographic::TimeOfDay* _internal_mutable_time();

  public:
  // @@protoc_insertion_point(class_scope:TempoGeographic.DateTime)
 private:
  class _Internal;

  friend class ::google::protobuf_tempo::internal::TcParser;
  static const ::google::protobuf_tempo::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf_tempo::MessageLite;
  friend class ::google::protobuf_tempo::Arena;
  template <typename T>
  friend class ::google::protobuf_tempo::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct TEMPOGEOGRAPHIC_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf_tempo::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena);
        inline explicit Impl_(::google::protobuf_tempo::internal::InternalVisibility visibility,
                              ::google::protobuf_tempo::Arena* arena, const Impl_& from);
    ::google::protobuf_tempo::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf_tempo::internal::CachedSize _cached_size_;
    ::TempoGeographic::Date* date_;
    ::TempoGeographic::TimeOfDay* time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TempoGeographic_2fGeographic_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Date

// uint32 day = 1;
inline void Date::clear_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.day_ = 0u;
}
inline ::uint32_t Date::day() const {
  // @@protoc_insertion_point(field_get:TempoGeographic.Date.day)
  return _internal_day();
}
inline void Date::set_day(::uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:TempoGeographic.Date.day)
}
inline ::uint32_t Date::_internal_day() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.day_;
}
inline void Date::_internal_set_day(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.day_ = value;
}

// uint32 month = 2;
inline void Date::clear_month() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.month_ = 0u;
}
inline ::uint32_t Date::month() const {
  // @@protoc_insertion_point(field_get:TempoGeographic.Date.month)
  return _internal_month();
}
inline void Date::set_month(::uint32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:TempoGeographic.Date.month)
}
inline ::uint32_t Date::_internal_month() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.month_;
}
inline void Date::_internal_set_month(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.month_ = value;
}

// uint32 year = 3;
inline void Date::clear_year() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.year_ = 0u;
}
inline ::uint32_t Date::year() const {
  // @@protoc_insertion_point(field_get:TempoGeographic.Date.year)
  return _internal_year();
}
inline void Date::set_year(::uint32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:TempoGeographic.Date.year)
}
inline ::uint32_t Date::_internal_year() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.year_;
}
inline void Date::_internal_set_year(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.year_ = value;
}

// -------------------------------------------------------------------

// TimeOfDay

// uint32 hour = 1;
inline void TimeOfDay::clear_hour() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hour_ = 0u;
}
inline ::uint32_t TimeOfDay::hour() const {
  // @@protoc_insertion_point(field_get:TempoGeographic.TimeOfDay.hour)
  return _internal_hour();
}
inline void TimeOfDay::set_hour(::uint32_t value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:TempoGeographic.TimeOfDay.hour)
}
inline ::uint32_t TimeOfDay::_internal_hour() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hour_;
}
inline void TimeOfDay::_internal_set_hour(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hour_ = value;
}

// uint32 minute = 2;
inline void TimeOfDay::clear_minute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.minute_ = 0u;
}
inline ::uint32_t TimeOfDay::minute() const {
  // @@protoc_insertion_point(field_get:TempoGeographic.TimeOfDay.minute)
  return _internal_minute();
}
inline void TimeOfDay::set_minute(::uint32_t value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:TempoGeographic.TimeOfDay.minute)
}
inline ::uint32_t TimeOfDay::_internal_minute() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.minute_;
}
inline void TimeOfDay::_internal_set_minute(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.minute_ = value;
}

// uint32 second = 3;
inline void TimeOfDay::clear_second() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.second_ = 0u;
}
inline ::uint32_t TimeOfDay::second() const {
  // @@protoc_insertion_point(field_get:TempoGeographic.TimeOfDay.second)
  return _internal_second();
}
inline void TimeOfDay::set_second(::uint32_t value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:TempoGeographic.TimeOfDay.second)
}
inline ::uint32_t TimeOfDay::_internal_second() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.second_;
}
inline void TimeOfDay::_internal_set_second(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.second_ = value;
}

// -------------------------------------------------------------------

// DateTime

// .TempoGeographic.Date date = 1;
inline bool DateTime::has_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.date_ != nullptr);
  return value;
}
inline void DateTime::clear_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.date_ != nullptr) _impl_.date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TempoGeographic::Date& DateTime::_internal_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoGeographic::Date* p = _impl_.date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoGeographic::Date&>(::TempoGeographic::_Date_default_instance_);
}
inline const ::TempoGeographic::Date& DateTime::date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoGeographic.DateTime.date)
  return _internal_date();
}
inline void DateTime::unsafe_arena_set_allocated_date(::TempoGeographic::Date* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.date_);
  }
  _impl_.date_ = reinterpret_cast<::TempoGeographic::Date*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoGeographic.DateTime.date)
}
inline ::TempoGeographic::Date* DateTime::release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoGeographic::Date* released = _impl_.date_;
  _impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoGeographic::Date* DateTime::unsafe_arena_release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoGeographic.DateTime.date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TempoGeographic::Date* temp = _impl_.date_;
  _impl_.date_ = nullptr;
  return temp;
}
inline ::TempoGeographic::Date* DateTime::_internal_mutable_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoGeographic::Date>(GetArena());
    _impl_.date_ = reinterpret_cast<::TempoGeographic::Date*>(p);
  }
  return _impl_.date_;
}
inline ::TempoGeographic::Date* DateTime::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoGeographic::Date* _msg = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:TempoGeographic.DateTime.date)
  return _msg;
}
inline void DateTime::set_allocated_date(::TempoGeographic::Date* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::TempoGeographic::Date*>(_impl_.date_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::TempoGeographic::Date*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.date_ = reinterpret_cast<::TempoGeographic::Date*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoGeographic.DateTime.date)
}

// .TempoGeographic.TimeOfDay time = 2;
inline bool DateTime::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline void DateTime::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TempoGeographic::TimeOfDay& DateTime::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TempoGeographic::TimeOfDay* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::TempoGeographic::TimeOfDay&>(::TempoGeographic::_TimeOfDay_default_instance_);
}
inline const ::TempoGeographic::TimeOfDay& DateTime::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TempoGeographic.DateTime.time)
  return _internal_time();
}
inline void DateTime::unsafe_arena_set_allocated_time(::TempoGeographic::TimeOfDay* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf_tempo::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::TempoGeographic::TimeOfDay*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TempoGeographic.DateTime.time)
}
inline ::TempoGeographic::TimeOfDay* DateTime::release_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TempoGeographic::TimeOfDay* released = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf_tempo::MessageLite*>(released);
  released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf_tempo::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TempoGeographic::TimeOfDay* DateTime::unsafe_arena_release_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TempoGeographic.DateTime.time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TempoGeographic::TimeOfDay* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::TempoGeographic::TimeOfDay* DateTime::_internal_mutable_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::TempoGeographic::TimeOfDay>(GetArena());
    _impl_.time_ = reinterpret_cast<::TempoGeographic::TimeOfDay*>(p);
  }
  return _impl_.time_;
}
inline ::TempoGeographic::TimeOfDay* DateTime::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TempoGeographic::TimeOfDay* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:TempoGeographic.DateTime.time)
  return _msg;
}
inline void DateTime::set_allocated_time(::TempoGeographic::TimeOfDay* value) {
  ::google::protobuf_tempo::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::TempoGeographic::TimeOfDay*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf_tempo::Arena* submessage_arena = reinterpret_cast<::TempoGeographic::TimeOfDay*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf_tempo::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.time_ = reinterpret_cast<::TempoGeographic::TimeOfDay*>(value);
  // @@protoc_insertion_point(field_set_allocated:TempoGeographic.DateTime.time)
}

// -------------------------------------------------------------------

// GeographicCoordinate

// double latitude = 1;
inline void GeographicCoordinate::clear_latitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.latitude_ = 0;
}
inline double GeographicCoordinate::latitude() const {
  // @@protoc_insertion_point(field_get:TempoGeographic.GeographicCoordinate.latitude)
  return _internal_latitude();
}
inline void GeographicCoordinate::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:TempoGeographic.GeographicCoordinate.latitude)
}
inline double GeographicCoordinate::_internal_latitude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.latitude_;
}
inline void GeographicCoordinate::_internal_set_latitude(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.latitude_ = value;
}

// double longitude = 2;
inline void GeographicCoordinate::clear_longitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.longitude_ = 0;
}
inline double GeographicCoordinate::longitude() const {
  // @@protoc_insertion_point(field_get:TempoGeographic.GeographicCoordinate.longitude)
  return _internal_longitude();
}
inline void GeographicCoordinate::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:TempoGeographic.GeographicCoordinate.longitude)
}
inline double GeographicCoordinate::_internal_longitude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.longitude_;
}
inline void GeographicCoordinate::_internal_set_longitude(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.longitude_ = value;
}

// double altitude = 3;
inline void GeographicCoordinate::clear_altitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.altitude_ = 0;
}
inline double GeographicCoordinate::altitude() const {
  // @@protoc_insertion_point(field_get:TempoGeographic.GeographicCoordinate.altitude)
  return _internal_altitude();
}
inline void GeographicCoordinate::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:TempoGeographic.GeographicCoordinate.altitude)
}
inline double GeographicCoordinate::_internal_altitude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.altitude_;
}
inline void GeographicCoordinate::_internal_set_altitude(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.altitude_ = value;
}

// -------------------------------------------------------------------

// DayCycleRateRequest

// float rate = 1;
inline void DayCycleRateRequest::clear_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rate_ = 0;
}
inline float DayCycleRateRequest::rate() const {
  // @@protoc_insertion_point(field_get:TempoGeographic.DayCycleRateRequest.rate)
  return _internal_rate();
}
inline void DayCycleRateRequest::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:TempoGeographic.DayCycleRateRequest.rate)
}
inline float DayCycleRateRequest::_internal_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rate_;
}
inline void DayCycleRateRequest::_internal_set_rate(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rate_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace TempoGeographic


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TempoGeographic_2fGeographic_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoGeographic/Geographic.proto
// Original file comments:
// Copyright Tempo Simulation, LLC. All Rights Reserved
//
#ifndef GRPC_TempoGeographic_2fGeographic_2eproto__INCLUDED
#define GRPC_TempoGeographic_2fGeographic_2eproto__INCLUDED

#include "TempoGeographic/Geographic.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace TempoGeographic {

class GeographicService final {
 public:
  static constexpr char const* service_full_name() {
    return "TempoGeographic.GeographicService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::TempoScripting::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> AsyncSetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(AsyncSetDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> PrepareAsyncSetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(PrepareAsyncSetDateRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::TempoScripting::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> AsyncSetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(AsyncSetTimeOfDayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> PrepareAsyncSetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(PrepareAsyncSetTimeOfDayRaw(context, request, cq));
    }
    virtual ::grpc::Status SetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::TempoScripting::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> AsyncSetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(AsyncSetDayCycleRelativeRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> PrepareAsyncSetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(PrepareAsyncSetDayCycleRelativeRateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoGeographic::DateTime* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoGeographic::DateTime>> AsyncGetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoGeographic::DateTime>>(AsyncGetDateTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoGeographic::DateTime>> PrepareAsyncGetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoGeographic::DateTime>>(PrepareAsyncGetDateTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status SetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::TempoScripting::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> AsyncSetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(AsyncSetGeographicReferenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> PrepareAsyncSetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(PrepareAsyncSetGeographicReferenceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoGeographic::DateTime* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoGeographic::DateTime* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* AsyncSetDateRaw(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* PrepareAsyncSetDateRaw(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* AsyncSetTimeOfDayRaw(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* PrepareAsyncSetTimeOfDayRaw(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* AsyncSetDayCycleRelativeRateRaw(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* PrepareAsyncSetDayCycleRelativeRateRaw(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoGeographic::DateTime>* AsyncGetDateTimeRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoGeographic::DateTime>* PrepareAsyncGetDateTimeRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* AsyncSetGeographicReferenceRaw(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* PrepareAsyncSetGeographicReferenceRaw(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::TempoScripting::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> AsyncSetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(AsyncSetDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> PrepareAsyncSetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(PrepareAsyncSetDateRaw(context, request, cq));
    }
    ::grpc::Status SetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::TempoScripting::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> AsyncSetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(AsyncSetTimeOfDayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> PrepareAsyncSetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(PrepareAsyncSetTimeOfDayRaw(context, request, cq));
    }
    ::grpc::Status SetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::TempoScripting::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> AsyncSetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(AsyncSetDayCycleRelativeRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> PrepareAsyncSetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(PrepareAsyncSetDayCycleRelativeRateRaw(context, request, cq));
    }
    ::grpc::Status GetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoGeographic::DateTime* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoGeographic::DateTime>> AsyncGetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoGeographic::DateTime>>(AsyncGetDateTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoGeographic::DateTime>> PrepareAsyncGetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoGeographic::DateTime>>(PrepareAsyncGetDateTimeRaw(context, request, cq));
    }
    ::grpc::Status SetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::TempoScripting::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> AsyncSetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(AsyncSetGeographicReferenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> PrepareAsyncSetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(PrepareAsyncSetGeographicReferenceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetDate(::grpc::ClientContext* context, const ::TempoGeographic::Date* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetTimeOfDay(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetDayCycleRelativeRate(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoGeographic::DateTime* response, std::function<void(::grpc::Status)>) override;
      void GetDateTime(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoGeographic::DateTime* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetGeographicReference(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* AsyncSetDateRaw(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* PrepareAsyncSetDateRaw(::grpc::ClientContext* context, const ::TempoGeographic::Date& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* AsyncSetTimeOfDayRaw(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* PrepareAsyncSetTimeOfDayRaw(::grpc::ClientContext* context, const ::TempoGeographic::TimeOfDay& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* AsyncSetDayCycleRelativeRateRaw(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* PrepareAsyncSetDayCycleRelativeRateRaw(::grpc::ClientContext* context, const ::TempoGeographic::DayCycleRateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoGeographic::DateTime>* AsyncGetDateTimeRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoGeographic::DateTime>* PrepareAsyncGetDateTimeRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* AsyncSetGeographicReferenceRaw(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* PrepareAsyncSetGeographicReferenceRaw(::grpc::ClientContext* context, const ::TempoGeographic::GeographicCoordinate& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetDate_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTimeOfDay_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDayCycleRelativeRate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDateTime_;
    const ::grpc::internal::RpcMethod rpcmethod_SetGeographicReference_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetDate(::grpc::ServerContext* context, const ::TempoGeographic::Date* request, ::TempoScripting::Empty* response);
    virtual ::grpc::Status SetTimeOfDay(::grpc::ServerContext* context, const ::TempoGeographic::TimeOfDay* request, ::TempoScripting::Empty* response);
    virtual ::grpc::Status SetDayCycleRelativeRate(::grpc::ServerContext* context, const ::TempoGeographic::DayCycleRateRequest* request, ::TempoScripting::Empty* response);
    virtual ::grpc::Status GetDateTime(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoGeographic::DateTime* response);
    virtual ::grpc::Status SetGeographicReference(::grpc::ServerContext* context, const ::TempoGeographic::GeographicCoordinate* request, ::TempoScripting::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::Date* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDate(::grpc::ServerContext* context, ::TempoGeographic::Date* request, ::grpc::ServerAsyncResponseWriter< ::TempoScripting::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTimeOfDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTimeOfDay() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetTimeOfDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTimeOfDay(::grpc::ServerContext* /*context*/, const ::TempoGeographic::TimeOfDay* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTimeOfDay(::grpc::ServerContext* context, ::TempoGeographic::TimeOfDay* request, ::grpc::ServerAsyncResponseWriter< ::TempoScripting::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDayCycleRelativeRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDayCycleRelativeRate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetDayCycleRelativeRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDayCycleRelativeRate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::DayCycleRateRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDayCycleRelativeRate(::grpc::ServerContext* context, ::TempoGeographic::DayCycleRateRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoScripting::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDateTime() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetDateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDateTime(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoGeographic::DateTime* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDateTime(::grpc::ServerContext* context, ::TempoScripting::Empty* request, ::grpc::ServerAsyncResponseWriter< ::TempoGeographic::DateTime>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetGeographicReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetGeographicReference() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetGeographicReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGeographicReference(::grpc::ServerContext* /*context*/, const ::TempoGeographic::GeographicCoordinate* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGeographicReference(::grpc::ServerContext* context, ::TempoGeographic::GeographicCoordinate* request, ::grpc::ServerAsyncResponseWriter< ::TempoScripting::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetDate<WithAsyncMethod_SetTimeOfDay<WithAsyncMethod_SetDayCycleRelativeRate<WithAsyncMethod_GetDateTime<WithAsyncMethod_SetGeographicReference<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoGeographic::Date, ::TempoScripting::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoGeographic::Date* request, ::TempoScripting::Empty* response) { return this->SetDate(context, request, response); }));}
    void SetMessageAllocatorFor_SetDate(
        ::grpc::MessageAllocator< ::TempoGeographic::Date, ::TempoScripting::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoGeographic::Date, ::TempoScripting::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::Date* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDate(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoGeographic::Date* /*request*/, ::TempoScripting::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTimeOfDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTimeOfDay() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoGeographic::TimeOfDay, ::TempoScripting::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoGeographic::TimeOfDay* request, ::TempoScripting::Empty* response) { return this->SetTimeOfDay(context, request, response); }));}
    void SetMessageAllocatorFor_SetTimeOfDay(
        ::grpc::MessageAllocator< ::TempoGeographic::TimeOfDay, ::TempoScripting::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoGeographic::TimeOfDay, ::TempoScripting::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTimeOfDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTimeOfDay(::grpc::ServerContext* /*context*/, const ::TempoGeographic::TimeOfDay* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTimeOfDay(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoGeographic::TimeOfDay* /*request*/, ::TempoScripting::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetDayCycleRelativeRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDayCycleRelativeRate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoGeographic::DayCycleRateRequest, ::TempoScripting::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoGeographic::DayCycleRateRequest* request, ::TempoScripting::Empty* response) { return this->SetDayCycleRelativeRate(context, request, response); }));}
    void SetMessageAllocatorFor_SetDayCycleRelativeRate(
        ::grpc::MessageAllocator< ::TempoGeographic::DayCycleRateRequest, ::TempoScripting::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoGeographic::DayCycleRateRequest, ::TempoScripting::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDayCycleRelativeRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDayCycleRelativeRate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::DayCycleRateRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDayCycleRelativeRate(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoGeographic::DayCycleRateRequest* /*request*/, ::TempoScripting::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDateTime() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoGeographic::DateTime>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoScripting::Empty* request, ::TempoGeographic::DateTime* response) { return this->GetDateTime(context, request, response); }));}
    void SetMessageAllocatorFor_GetDateTime(
        ::grpc::MessageAllocator< ::TempoScripting::Empty, ::TempoGeographic::DateTime>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoGeographic::DateTime>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDateTime(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoGeographic::DateTime* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDateTime(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoGeographic::DateTime* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetGeographicReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetGeographicReference() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoGeographic::GeographicCoordinate, ::TempoScripting::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoGeographic::GeographicCoordinate* request, ::TempoScripting::Empty* response) { return this->SetGeographicReference(context, request, response); }));}
    void SetMessageAllocatorFor_SetGeographicReference(
        ::grpc::MessageAllocator< ::TempoGeographic::GeographicCoordinate, ::TempoScripting::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoGeographic::GeographicCoordinate, ::TempoScripting::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetGeographicReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGeographicReference(::grpc::ServerContext* /*context*/, const ::TempoGeographic::GeographicCoordinate* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGeographicReference(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoGeographic::GeographicCoordinate* /*request*/, ::TempoScripting::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetDate<WithCallbackMethod_SetTimeOfDay<WithCallbackMethod_SetDayCycleRelativeRate<WithCallbackMethod_GetDateTime<WithCallbackMethod_SetGeographicReference<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::Date* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTimeOfDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTimeOfDay() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetTimeOfDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTimeOfDay(::grpc::ServerContext* /*context*/, const ::TempoGeographic::TimeOfDay* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDayCycleRelativeRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDayCycleRelativeRate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetDayCycleRelativeRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDayCycleRelativeRate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::DayCycleRateRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDateTime() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetDateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDateTime(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoGeographic::DateTime* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetGeographicReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetGeographicReference() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetGeographicReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGeographicReference(::grpc::ServerContext* /*context*/, const ::TempoGeographic::GeographicCoordinate* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::Date* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTimeOfDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTimeOfDay() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetTimeOfDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTimeOfDay(::grpc::ServerContext* /*context*/, const ::TempoGeographic::TimeOfDay* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTimeOfDay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDayCycleRelativeRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDayCycleRelativeRate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetDayCycleRelativeRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDayCycleRelativeRate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::DayCycleRateRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDayCycleRelativeRate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDateTime() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetDateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDateTime(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoGeographic::DateTime* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDateTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetGeographicReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetGeographicReference() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetGeographicReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGeographicReference(::grpc::ServerContext* /*context*/, const ::TempoGeographic::GeographicCoordinate* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGeographicReference(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::Date* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTimeOfDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTimeOfDay() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTimeOfDay(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTimeOfDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTimeOfDay(::grpc::ServerContext* /*context*/, const ::TempoGeographic::TimeOfDay* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTimeOfDay(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDayCycleRelativeRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDayCycleRelativeRate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDayCycleRelativeRate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDayCycleRelativeRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDayCycleRelativeRate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::DayCycleRateRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDayCycleRelativeRate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDateTime() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDateTime(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDateTime(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoGeographic::DateTime* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDateTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetGeographicReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetGeographicReference() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetGeographicReference(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetGeographicReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGeographicReference(::grpc::ServerContext* /*context*/, const ::TempoGeographic::GeographicCoordinate* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGeographicReference(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoGeographic::Date, ::TempoScripting::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoGeographic::Date, ::TempoScripting::Empty>* streamer) {
                       return this->StreamedSetDate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::Date* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoGeographic::Date,::TempoScripting::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTimeOfDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTimeOfDay() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoGeographic::TimeOfDay, ::TempoScripting::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoGeographic::TimeOfDay, ::TempoScripting::Empty>* streamer) {
                       return this->StreamedSetTimeOfDay(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTimeOfDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTimeOfDay(::grpc::ServerContext* /*context*/, const ::TempoGeographic::TimeOfDay* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTimeOfDay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoGeographic::TimeOfDay,::TempoScripting::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDayCycleRelativeRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDayCycleRelativeRate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoGeographic::DayCycleRateRequest, ::TempoScripting::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoGeographic::DayCycleRateRequest, ::TempoScripting::Empty>* streamer) {
                       return this->StreamedSetDayCycleRelativeRate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDayCycleRelativeRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDayCycleRelativeRate(::grpc::ServerContext* /*context*/, const ::TempoGeographic::DayCycleRateRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDayCycleRelativeRate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoGeographic::DayCycleRateRequest,::TempoScripting::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDateTime() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoScripting::Empty, ::TempoGeographic::DateTime>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoScripting::Empty, ::TempoGeographic::DateTime>* streamer) {
                       return this->StreamedGetDateTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDateTime(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoGeographic::DateTime* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDateTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoScripting::Empty,::TempoGeographic::DateTime>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetGeographicReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetGeographicReference() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoGeographic::GeographicCoordinate, ::TempoScripting::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoGeographic::GeographicCoordinate, ::TempoScripting::Empty>* streamer) {
                       return this->StreamedSetGeographicReference(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetGeographicReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetGeographicReference(::grpc::ServerContext* /*context*/, const ::TempoGeographic::GeographicCoordinate* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetGeographicReference(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoGeographic::GeographicCoordinate,::TempoScripting::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetDate<WithStreamedUnaryMethod_SetTimeOfDay<WithStreamedUnaryMethod_SetDayCycleRelativeRate<WithStreamedUnaryMethod_GetDateTime<WithStreamedUnaryMethod_SetGeographicReference<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetDate<WithStreamedUnaryMethod_SetTimeOfDay<WithStreamedUnaryMethod_SetDayCycleRelativeRate<WithStreamedUnaryMethod_GetDateTime<WithStreamedUnaryMethod_SetGeographicReference<Service > > > > > StreamedService;
};

}  // namespace TempoGeographic


#endif  // GRPC_TempoGeographic_2fGeographic_2eproto__INCLUDED

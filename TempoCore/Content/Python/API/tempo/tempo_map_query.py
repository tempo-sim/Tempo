# Warning: Autogenerated code do not edit

from tempo._tempo_context import tempo_context
from tempo import run_async
from curio.meta import awaitable
import asyncio


import TempoScripting.Geometry_pb2, TempoMapQuery.MapQueries_pb2, TempoMapQuery.MapQueries_pb2_grpc
async def _get_lanes(
    tag_filter: TempoMapQuery.MapQueries_pb2.TagFilter = None,
    center: TempoScripting.Geometry_pb2.Vector2D = None,
    radius: float = 0.0
) -> TempoMapQuery.MapQueries_pb2.LaneDataResponse:
    stub = await tempo_context().get_stub(TempoMapQuery.MapQueries_pb2_grpc.MapQueryServiceStub)
    request = TempoMapQuery.MapQueries_pb2.LaneDataRequest(
        tag_filter=tag_filter,
        center=center,
        radius=radius
    )
    return await stub.GetLanes(request)


def get_lanes(
    tag_filter: TempoMapQuery.MapQueries_pb2.TagFilter = None,
    center: TempoScripting.Geometry_pb2.Vector2D = None,
    radius: float = 0.0
) -> TempoMapQuery.MapQueries_pb2.LaneDataResponse:
    return run_async(_get_lanes(
        tag_filter=tag_filter,
        center=center,
        radius=radius
    ))


@awaitable(get_lanes)
async def get_lanes(
    tag_filter: TempoMapQuery.MapQueries_pb2.TagFilter = None,
    center: TempoScripting.Geometry_pb2.Vector2D = None,
    radius: float = 0.0
) -> TempoMapQuery.MapQueries_pb2.LaneDataResponse:
    return await _get_lanes(
        tag_filter=tag_filter,
        center=center,
        radius=radius
    )

import TempoMapQuery.MapQueries_pb2, TempoMapQuery.MapQueries_pb2_grpc
async def _get_lane_accessibility(
    from_id: int = 0,
    to_id: int = 0
) -> TempoMapQuery.MapQueries_pb2.LaneAccessibilityResponse:
    stub = await tempo_context().get_stub(TempoMapQuery.MapQueries_pb2_grpc.MapQueryServiceStub)
    request = TempoMapQuery.MapQueries_pb2.LaneAccessibilityRequest(
        from_id=from_id,
        to_id=to_id
    )
    return await stub.GetLaneAccessibility(request)


def get_lane_accessibility(
    from_id: int = 0,
    to_id: int = 0
) -> TempoMapQuery.MapQueries_pb2.LaneAccessibilityResponse:
    return run_async(_get_lane_accessibility(
        from_id=from_id,
        to_id=to_id
    ))


@awaitable(get_lane_accessibility)
async def get_lane_accessibility(
    from_id: int = 0,
    to_id: int = 0
) -> TempoMapQuery.MapQueries_pb2.LaneAccessibilityResponse:
    return await _get_lane_accessibility(
        from_id=from_id,
        to_id=to_id
    )

import TempoMapQuery.MapQueries_pb2, TempoMapQuery.MapQueries_pb2_grpc
async def _stream_lane_accessibility(
    from_id: int = 0,
    to_id: int = 0
) -> TempoMapQuery.MapQueries_pb2.LaneAccessibilityResponse:
    stub = await tempo_context().get_stub(TempoMapQuery.MapQueries_pb2_grpc.MapQueryServiceStub)
    request = TempoMapQuery.MapQueries_pb2.LaneAccessibilityRequest(
        from_id=from_id,
        to_id=to_id
    )
    async for response in stub.StreamLaneAccessibility(request):
        yield response


def stream_lane_accessibility(
    from_id: int = 0,
    to_id: int = 0
) -> TempoMapQuery.MapQueries_pb2.LaneAccessibilityResponse:
    async_gen = _stream_lane_accessibility(
        from_id=from_id,
        to_id=to_id
    )
    while True:
        try:
            yield run_async(async_gen.__anext__())
        except StopAsyncIteration:
            break


@awaitable(stream_lane_accessibility)
async def stream_lane_accessibility(
    from_id: int = 0,
    to_id: int = 0
) -> TempoMapQuery.MapQueries_pb2.LaneAccessibilityResponse:
    async for response in _stream_lane_accessibility(
        from_id=from_id,
        to_id=to_id
    ):
        yield response

import TempoScripting.Geometry_pb2, TempoMapQuery.MapQueries_pb2, TempoMapQuery.MapQueries_pb2_grpc
async def _get_zones(
    tag_filter: TempoMapQuery.MapQueries_pb2.TagFilter = None,
    center: TempoScripting.Geometry_pb2.Vector = None,
    radius: float = 0.0
) -> TempoMapQuery.MapQueries_pb2.ZoneDataResponse:
    stub = await tempo_context().get_stub(TempoMapQuery.MapQueries_pb2_grpc.MapQueryServiceStub)
    request = TempoMapQuery.MapQueries_pb2.ZoneDataRequest(
        tag_filter=tag_filter,
        center=center,
        radius=radius
    )
    return await stub.GetZones(request)


def get_zones(
    tag_filter: TempoMapQuery.MapQueries_pb2.TagFilter = None,
    center: TempoScripting.Geometry_pb2.Vector = None,
    radius: float = 0.0
) -> TempoMapQuery.MapQueries_pb2.ZoneDataResponse:
    return run_async(_get_zones(
        tag_filter=tag_filter,
        center=center,
        radius=radius
    ))


@awaitable(get_zones)
async def get_zones(
    tag_filter: TempoMapQuery.MapQueries_pb2.TagFilter = None,
    center: TempoScripting.Geometry_pb2.Vector = None,
    radius: float = 0.0
) -> TempoMapQuery.MapQueries_pb2.ZoneDataResponse:
    return await _get_zones(
        tag_filter=tag_filter,
        center=center,
        radius=radius
    )


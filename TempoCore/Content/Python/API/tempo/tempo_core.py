# Warning: Autogenerated code do not edit

from tempo._tempo_context import tempo_context
from tempo import run_async
from curio.meta import awaitable
import asyncio


import TempoCore.TempoCore_pb2_grpc, TempoCore.TempoCore_pb2, TempoScripting.Empty_pb2
async def _load_level(
    level: str = '',
    deferred: bool = False,
    start_paused: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoCore.TempoCore_pb2_grpc.TempoCoreServiceStub)
    request = TempoCore.TempoCore_pb2.LoadLevelRequest(
        level=level,
        deferred=deferred,
        start_paused=start_paused
    )
    return await stub.LoadLevel(request)


def load_level(
    level: str = '',
    deferred: bool = False,
    start_paused: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_load_level(
        level=level,
        deferred=deferred,
        start_paused=start_paused
    ))


@awaitable(load_level)
async def load_level(
    level: str = '',
    deferred: bool = False,
    start_paused: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    return await _load_level(
        level=level,
        deferred=deferred,
        start_paused=start_paused
    )

import TempoCore.TempoCore_pb2_grpc, TempoScripting.Empty_pb2
async def _finish_loading_level(
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoCore.TempoCore_pb2_grpc.TempoCoreServiceStub)
    request = TempoScripting.Empty_pb2.Empty(
    )
    return await stub.FinishLoadingLevel(request)


def finish_loading_level(
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_finish_loading_level(
    ))


@awaitable(finish_loading_level)
async def finish_loading_level(
) -> TempoScripting.Empty_pb2.Empty:
    return await _finish_loading_level(
    )

import TempoCore.TempoCore_pb2_grpc, TempoCore.TempoCore_pb2, TempoScripting.Empty_pb2
async def _get_current_level_name(
) -> TempoCore.TempoCore_pb2.CurrentLevelResponse:
    stub = await tempo_context().get_stub(TempoCore.TempoCore_pb2_grpc.TempoCoreServiceStub)
    request = TempoScripting.Empty_pb2.Empty(
    )
    return await stub.GetCurrentLevelName(request)


def get_current_level_name(
) -> TempoCore.TempoCore_pb2.CurrentLevelResponse:
    return run_async(_get_current_level_name(
    ))


@awaitable(get_current_level_name)
async def get_current_level_name(
) -> TempoCore.TempoCore_pb2.CurrentLevelResponse:
    return await _get_current_level_name(
    )

import TempoCore.TempoCore_pb2_grpc, TempoScripting.Empty_pb2
async def _quit(
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoCore.TempoCore_pb2_grpc.TempoCoreServiceStub)
    request = TempoScripting.Empty_pb2.Empty(
    )
    return await stub.Quit(request)


def quit(
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_quit(
    ))


@awaitable(quit)
async def quit(
) -> TempoScripting.Empty_pb2.Empty:
    return await _quit(
    )

import TempoCore.TempoCore_pb2_grpc, TempoCore.TempoCore_pb2, TempoScripting.Empty_pb2
async def _set_main_viewport_render_enabled(
    enabled: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoCore.TempoCore_pb2_grpc.TempoCoreServiceStub)
    request = TempoCore.TempoCore_pb2.SetMainViewportRenderEnabledRequest(
        enabled=enabled
    )
    return await stub.SetMainViewportRenderEnabled(request)


def set_main_viewport_render_enabled(
    enabled: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_main_viewport_render_enabled(
        enabled=enabled
    ))


@awaitable(set_main_viewport_render_enabled)
async def set_main_viewport_render_enabled(
    enabled: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_main_viewport_render_enabled(
        enabled=enabled
    )


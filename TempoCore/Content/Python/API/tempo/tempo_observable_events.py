# Warning: Autogenerated code do not edit

from tempo._tempo_context import tempo_context
from tempo import run_async
from curio.meta import awaitable
import asyncio


import TempoObservableEvents.ObservableEvents_pb2_grpc, TempoObservableEvents.ObservableEvents_pb2
async def _stream_overlap_events(
    actor_name: str = ''
) -> TempoObservableEvents.ObservableEvents_pb2.OverlapEventResponse:
    stub = await tempo_context().get_stub(TempoObservableEvents.ObservableEvents_pb2_grpc.ObservableEventServiceStub)
    request = TempoObservableEvents.ObservableEvents_pb2.OverlapEventRequest(
        actor_name=actor_name
    )
    async for response in stub.StreamOverlapEvents(request):
        yield response


def stream_overlap_events(
    actor_name: str = ''
) -> TempoObservableEvents.ObservableEvents_pb2.OverlapEventResponse:
    async_gen = _stream_overlap_events(
        actor_name=actor_name
    )
    while True:
        try:
            yield run_async(async_gen.__anext__())
        except StopAsyncIteration:
            break


@awaitable(stream_overlap_events)
async def stream_overlap_events(
    actor_name: str = ''
) -> TempoObservableEvents.ObservableEvents_pb2.OverlapEventResponse:
    async for response in _stream_overlap_events(
        actor_name=actor_name
    ):
        yield response


# Warning: Autogenerated code do not edit

from tempo._tempo_context import tempo_context
from tempo import run_async
from curio.meta import awaitable
import asyncio


import TempoSensors.Sensors_pb2, TempoSensors.Sensors_pb2_grpc
async def _get_available_sensors(
) -> TempoSensors.Sensors_pb2.AvailableSensorsResponse:
    stub = await tempo_context().get_stub(TempoSensors.Sensors_pb2_grpc.SensorServiceStub)
    request = TempoSensors.Sensors_pb2.AvailableSensorsRequest(
    )
    return await stub.GetAvailableSensors(request)


def get_available_sensors(
) -> TempoSensors.Sensors_pb2.AvailableSensorsResponse:
    return run_async(_get_available_sensors(
    ))


@awaitable(get_available_sensors)
async def get_available_sensors(
) -> TempoSensors.Sensors_pb2.AvailableSensorsResponse:
    return await _get_available_sensors(
    )

import TempoCamera.Camera_pb2, TempoSensors.Sensors_pb2_grpc
async def _stream_color_images(
    owner_name: str = '',
    sensor_name: str = '',
    compression_level: TempoCamera.Camera_pb2.ImageCompressionLevel = 0
) -> TempoCamera.Camera_pb2.ColorImage:
    stub = await tempo_context().get_stub(TempoSensors.Sensors_pb2_grpc.SensorServiceStub)
    request = TempoCamera.Camera_pb2.ColorImageRequest(
        owner_name=owner_name,
        sensor_name=sensor_name,
        compression_level=compression_level
    )
    async for response in stub.StreamColorImages(request):
        yield response


def stream_color_images(
    owner_name: str = '',
    sensor_name: str = '',
    compression_level: TempoCamera.Camera_pb2.ImageCompressionLevel = 0
) -> TempoCamera.Camera_pb2.ColorImage:
    async_gen = _stream_color_images(
        owner_name=owner_name,
        sensor_name=sensor_name,
        compression_level=compression_level
    )
    while True:
        try:
            yield run_async(async_gen.__anext__())
        except StopAsyncIteration:
            break


@awaitable(stream_color_images)
async def stream_color_images(
    owner_name: str = '',
    sensor_name: str = '',
    compression_level: TempoCamera.Camera_pb2.ImageCompressionLevel = 0
) -> TempoCamera.Camera_pb2.ColorImage:
    async for response in _stream_color_images(
        owner_name=owner_name,
        sensor_name=sensor_name,
        compression_level=compression_level
    ):
        yield response

import TempoCamera.Camera_pb2, TempoSensors.Sensors_pb2_grpc
async def _stream_depth_images(
    owner_name: str = '',
    sensor_name: str = ''
) -> TempoCamera.Camera_pb2.DepthImage:
    stub = await tempo_context().get_stub(TempoSensors.Sensors_pb2_grpc.SensorServiceStub)
    request = TempoCamera.Camera_pb2.DepthImageRequest(
        owner_name=owner_name,
        sensor_name=sensor_name
    )
    async for response in stub.StreamDepthImages(request):
        yield response


def stream_depth_images(
    owner_name: str = '',
    sensor_name: str = ''
) -> TempoCamera.Camera_pb2.DepthImage:
    async_gen = _stream_depth_images(
        owner_name=owner_name,
        sensor_name=sensor_name
    )
    while True:
        try:
            yield run_async(async_gen.__anext__())
        except StopAsyncIteration:
            break


@awaitable(stream_depth_images)
async def stream_depth_images(
    owner_name: str = '',
    sensor_name: str = ''
) -> TempoCamera.Camera_pb2.DepthImage:
    async for response in _stream_depth_images(
        owner_name=owner_name,
        sensor_name=sensor_name
    ):
        yield response

import TempoCamera.Camera_pb2, TempoSensors.Sensors_pb2_grpc
async def _stream_label_images(
    owner_name: str = '',
    sensor_name: str = ''
) -> TempoCamera.Camera_pb2.LabelImage:
    stub = await tempo_context().get_stub(TempoSensors.Sensors_pb2_grpc.SensorServiceStub)
    request = TempoCamera.Camera_pb2.LabelImageRequest(
        owner_name=owner_name,
        sensor_name=sensor_name
    )
    async for response in stub.StreamLabelImages(request):
        yield response


def stream_label_images(
    owner_name: str = '',
    sensor_name: str = ''
) -> TempoCamera.Camera_pb2.LabelImage:
    async_gen = _stream_label_images(
        owner_name=owner_name,
        sensor_name=sensor_name
    )
    while True:
        try:
            yield run_async(async_gen.__anext__())
        except StopAsyncIteration:
            break


@awaitable(stream_label_images)
async def stream_label_images(
    owner_name: str = '',
    sensor_name: str = ''
) -> TempoCamera.Camera_pb2.LabelImage:
    async for response in _stream_label_images(
        owner_name=owner_name,
        sensor_name=sensor_name
    ):
        yield response


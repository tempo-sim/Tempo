# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from TempoWorld import WorldState_pb2 as TempoWorld_dot_WorldState__pb2


class WorldStateServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamOverlapEvents = channel.unary_stream(
                '/TempoWorld.WorldStateService/StreamOverlapEvents',
                request_serializer=TempoWorld_dot_WorldState__pb2.OverlapEventRequest.SerializeToString,
                response_deserializer=TempoWorld_dot_WorldState__pb2.OverlapEventResponse.FromString,
                )
        self.GetCurrentActorState = channel.unary_unary(
                '/TempoWorld.WorldStateService/GetCurrentActorState',
                request_serializer=TempoWorld_dot_WorldState__pb2.ActorStateRequest.SerializeToString,
                response_deserializer=TempoWorld_dot_WorldState__pb2.ActorState.FromString,
                )
        self.StreamActorState = channel.unary_stream(
                '/TempoWorld.WorldStateService/StreamActorState',
                request_serializer=TempoWorld_dot_WorldState__pb2.ActorStateRequest.SerializeToString,
                response_deserializer=TempoWorld_dot_WorldState__pb2.ActorState.FromString,
                )
        self.GetCurrentActorStatesNear = channel.unary_unary(
                '/TempoWorld.WorldStateService/GetCurrentActorStatesNear',
                request_serializer=TempoWorld_dot_WorldState__pb2.ActorStatesNearRequest.SerializeToString,
                response_deserializer=TempoWorld_dot_WorldState__pb2.ActorStates.FromString,
                )
        self.StreamActorStatesNear = channel.unary_stream(
                '/TempoWorld.WorldStateService/StreamActorStatesNear',
                request_serializer=TempoWorld_dot_WorldState__pb2.ActorStatesNearRequest.SerializeToString,
                response_deserializer=TempoWorld_dot_WorldState__pb2.ActorStates.FromString,
                )


class WorldStateServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamOverlapEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentActorState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamActorState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentActorStatesNear(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamActorStatesNear(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorldStateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamOverlapEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamOverlapEvents,
                    request_deserializer=TempoWorld_dot_WorldState__pb2.OverlapEventRequest.FromString,
                    response_serializer=TempoWorld_dot_WorldState__pb2.OverlapEventResponse.SerializeToString,
            ),
            'GetCurrentActorState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentActorState,
                    request_deserializer=TempoWorld_dot_WorldState__pb2.ActorStateRequest.FromString,
                    response_serializer=TempoWorld_dot_WorldState__pb2.ActorState.SerializeToString,
            ),
            'StreamActorState': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamActorState,
                    request_deserializer=TempoWorld_dot_WorldState__pb2.ActorStateRequest.FromString,
                    response_serializer=TempoWorld_dot_WorldState__pb2.ActorState.SerializeToString,
            ),
            'GetCurrentActorStatesNear': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentActorStatesNear,
                    request_deserializer=TempoWorld_dot_WorldState__pb2.ActorStatesNearRequest.FromString,
                    response_serializer=TempoWorld_dot_WorldState__pb2.ActorStates.SerializeToString,
            ),
            'StreamActorStatesNear': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamActorStatesNear,
                    request_deserializer=TempoWorld_dot_WorldState__pb2.ActorStatesNearRequest.FromString,
                    response_serializer=TempoWorld_dot_WorldState__pb2.ActorStates.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TempoWorld.WorldStateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorldStateService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamOverlapEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TempoWorld.WorldStateService/StreamOverlapEvents',
            TempoWorld_dot_WorldState__pb2.OverlapEventRequest.SerializeToString,
            TempoWorld_dot_WorldState__pb2.OverlapEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrentActorState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TempoWorld.WorldStateService/GetCurrentActorState',
            TempoWorld_dot_WorldState__pb2.ActorStateRequest.SerializeToString,
            TempoWorld_dot_WorldState__pb2.ActorState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamActorState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TempoWorld.WorldStateService/StreamActorState',
            TempoWorld_dot_WorldState__pb2.ActorStateRequest.SerializeToString,
            TempoWorld_dot_WorldState__pb2.ActorState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrentActorStatesNear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TempoWorld.WorldStateService/GetCurrentActorStatesNear',
            TempoWorld_dot_WorldState__pb2.ActorStatesNearRequest.SerializeToString,
            TempoWorld_dot_WorldState__pb2.ActorStates.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamActorStatesNear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TempoWorld.WorldStateService/StreamActorStatesNear',
            TempoWorld_dot_WorldState__pb2.ActorStatesNearRequest.SerializeToString,
            TempoWorld_dot_WorldState__pb2.ActorStates.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

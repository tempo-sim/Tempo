# Warning: Autogenerated code do not edit

from tempo._tempo_context import tempo_context
from tempo import run_async
from curio.meta import awaitable
import asyncio


import TempoMovement.MovementControlService_pb2, TempoScripting.Empty_pb2, TempoMovement.MovementControlService_pb2_grpc
async def _get_commandable_vehicles(
) -> TempoMovement.MovementControlService_pb2.CommandableVehiclesResponse:
    stub = await tempo_context().get_stub(TempoMovement.MovementControlService_pb2_grpc.MovementControlServiceStub)
    request = TempoScripting.Empty_pb2.Empty(
    )
    return await stub.GetCommandableVehicles(request)


def get_commandable_vehicles(
) -> TempoMovement.MovementControlService_pb2.CommandableVehiclesResponse:
    return run_async(_get_commandable_vehicles(
    ))


@awaitable(get_commandable_vehicles)
async def get_commandable_vehicles(
) -> TempoMovement.MovementControlService_pb2.CommandableVehiclesResponse:
    return await _get_commandable_vehicles(
    )

import TempoScripting.Empty_pb2, TempoMovement.MovementControlService_pb2, TempoMovement.MovementControlService_pb2_grpc
async def _command_vehicle(
    vehicle_name: str = '',
    acceleration: float = 0.0,
    steering: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoMovement.MovementControlService_pb2_grpc.MovementControlServiceStub)
    request = TempoMovement.MovementControlService_pb2.VehicleCommandRequest(
        vehicle_name=vehicle_name,
        acceleration=acceleration,
        steering=steering
    )
    return await stub.CommandVehicle(request)


def command_vehicle(
    vehicle_name: str = '',
    acceleration: float = 0.0,
    steering: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_command_vehicle(
        vehicle_name=vehicle_name,
        acceleration=acceleration,
        steering=steering
    ))


@awaitable(command_vehicle)
async def command_vehicle(
    vehicle_name: str = '',
    acceleration: float = 0.0,
    steering: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return await _command_vehicle(
        vehicle_name=vehicle_name,
        acceleration=acceleration,
        steering=steering
    )

import TempoMovement.MovementControlService_pb2, TempoScripting.Empty_pb2, TempoMovement.MovementControlService_pb2_grpc
async def _get_commandable_pawns(
) -> TempoMovement.MovementControlService_pb2.CommandablePawnsResponse:
    stub = await tempo_context().get_stub(TempoMovement.MovementControlService_pb2_grpc.MovementControlServiceStub)
    request = TempoScripting.Empty_pb2.Empty(
    )
    return await stub.GetCommandablePawns(request)


def get_commandable_pawns(
) -> TempoMovement.MovementControlService_pb2.CommandablePawnsResponse:
    return run_async(_get_commandable_pawns(
    ))


@awaitable(get_commandable_pawns)
async def get_commandable_pawns(
) -> TempoMovement.MovementControlService_pb2.CommandablePawnsResponse:
    return await _get_commandable_pawns(
    )

import TempoScripting.Geometry_pb2, TempoMovement.MovementControlService_pb2, TempoMovement.MovementControlService_pb2_grpc
async def _pawn_move_to_location(
    name: str = '',
    location: TempoScripting.Geometry_pb2.Vector = None,
    relative: bool = False
) -> TempoMovement.MovementControlService_pb2.PawnMoveToLocationResponse:
    stub = await tempo_context().get_stub(TempoMovement.MovementControlService_pb2_grpc.MovementControlServiceStub)
    request = TempoMovement.MovementControlService_pb2.PawnMoveToLocationRequest(
        name=name,
        location=location,
        relative=relative
    )
    return await stub.PawnMoveToLocation(request)


def pawn_move_to_location(
    name: str = '',
    location: TempoScripting.Geometry_pb2.Vector = None,
    relative: bool = False
) -> TempoMovement.MovementControlService_pb2.PawnMoveToLocationResponse:
    return run_async(_pawn_move_to_location(
        name=name,
        location=location,
        relative=relative
    ))


@awaitable(pawn_move_to_location)
async def pawn_move_to_location(
    name: str = '',
    location: TempoScripting.Geometry_pb2.Vector = None,
    relative: bool = False
) -> TempoMovement.MovementControlService_pb2.PawnMoveToLocationResponse:
    return await _pawn_move_to_location(
        name=name,
        location=location,
        relative=relative
    )

import TempoScripting.Empty_pb2, TempoMovement.MovementControlService_pb2_grpc
async def _rebuild_navigation(
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoMovement.MovementControlService_pb2_grpc.MovementControlServiceStub)
    request = TempoScripting.Empty_pb2.Empty(
    )
    return await stub.RebuildNavigation(request)


def rebuild_navigation(
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_rebuild_navigation(
    ))


@awaitable(rebuild_navigation)
async def rebuild_navigation(
) -> TempoScripting.Empty_pb2.Empty:
    return await _rebuild_navigation(
    )


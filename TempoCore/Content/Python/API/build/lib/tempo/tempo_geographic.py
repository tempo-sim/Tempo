# Warning: Autogenerated code do not edit

from tempo._tempo_context import tempo_context
from tempo import run_async
from curio.meta import awaitable
import asyncio


import TempoGeographic.Geographic_pb2, TempoGeographic.Geographic_pb2_grpc, TempoScripting.Empty_pb2
async def _set_date(
    day: int = 0,
    month: int = 0,
    year: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoGeographic.Geographic_pb2_grpc.GeographicServiceStub)
    request = TempoGeographic.Geographic_pb2.Date(
        day=day,
        month=month,
        year=year
    )
    return await stub.SetDate(request)


def set_date(
    day: int = 0,
    month: int = 0,
    year: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_date(
        day=day,
        month=month,
        year=year
    ))


@awaitable(set_date)
async def set_date(
    day: int = 0,
    month: int = 0,
    year: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_date(
        day=day,
        month=month,
        year=year
    )

import TempoGeographic.Geographic_pb2, TempoGeographic.Geographic_pb2_grpc, TempoScripting.Empty_pb2
async def _set_time_of_day(
    hour: int = 0,
    minute: int = 0,
    second: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoGeographic.Geographic_pb2_grpc.GeographicServiceStub)
    request = TempoGeographic.Geographic_pb2.TimeOfDay(
        hour=hour,
        minute=minute,
        second=second
    )
    return await stub.SetTimeOfDay(request)


def set_time_of_day(
    hour: int = 0,
    minute: int = 0,
    second: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_time_of_day(
        hour=hour,
        minute=minute,
        second=second
    ))


@awaitable(set_time_of_day)
async def set_time_of_day(
    hour: int = 0,
    minute: int = 0,
    second: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_time_of_day(
        hour=hour,
        minute=minute,
        second=second
    )

import TempoGeographic.Geographic_pb2, TempoGeographic.Geographic_pb2_grpc, TempoScripting.Empty_pb2
async def _set_day_cycle_relative_rate(
    rate: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoGeographic.Geographic_pb2_grpc.GeographicServiceStub)
    request = TempoGeographic.Geographic_pb2.DayCycleRateRequest(
        rate=rate
    )
    return await stub.SetDayCycleRelativeRate(request)


def set_day_cycle_relative_rate(
    rate: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_day_cycle_relative_rate(
        rate=rate
    ))


@awaitable(set_day_cycle_relative_rate)
async def set_day_cycle_relative_rate(
    rate: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_day_cycle_relative_rate(
        rate=rate
    )

import TempoGeographic.Geographic_pb2, TempoGeographic.Geographic_pb2_grpc, TempoScripting.Empty_pb2
async def _get_date_time(
) -> TempoGeographic.Geographic_pb2.DateTime:
    stub = await tempo_context().get_stub(TempoGeographic.Geographic_pb2_grpc.GeographicServiceStub)
    request = TempoScripting.Empty_pb2.Empty(
    )
    return await stub.GetDateTime(request)


def get_date_time(
) -> TempoGeographic.Geographic_pb2.DateTime:
    return run_async(_get_date_time(
    ))


@awaitable(get_date_time)
async def get_date_time(
) -> TempoGeographic.Geographic_pb2.DateTime:
    return await _get_date_time(
    )

import TempoGeographic.Geographic_pb2, TempoGeographic.Geographic_pb2_grpc, TempoScripting.Empty_pb2
async def _set_geographic_reference(
    latitude: float = 0.0,
    longitude: float = 0.0,
    altitude: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoGeographic.Geographic_pb2_grpc.GeographicServiceStub)
    request = TempoGeographic.Geographic_pb2.GeographicCoordinate(
        latitude=latitude,
        longitude=longitude,
        altitude=altitude
    )
    return await stub.SetGeographicReference(request)


def set_geographic_reference(
    latitude: float = 0.0,
    longitude: float = 0.0,
    altitude: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_geographic_reference(
        latitude=latitude,
        longitude=longitude,
        altitude=altitude
    ))


@awaitable(set_geographic_reference)
async def set_geographic_reference(
    latitude: float = 0.0,
    longitude: float = 0.0,
    altitude: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_geographic_reference(
        latitude=latitude,
        longitude=longitude,
        altitude=altitude
    )


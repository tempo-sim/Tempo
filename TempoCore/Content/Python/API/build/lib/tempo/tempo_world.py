# Warning: Autogenerated code do not edit

from tempo._tempo_context import tempo_context
from tempo import run_async
from curio.meta import awaitable
import asyncio


import TempoWorld.ActorControl_pb2_grpc, TempoScripting.Geometry_pb2, TempoWorld.ActorControl_pb2
async def _spawn_actor(
    type: str = '',
    deferred: bool = False,
    transform: TempoScripting.Geometry_pb2.Transform = None,
    relative_to_actor: str = ''
) -> TempoWorld.ActorControl_pb2.SpawnActorResponse:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SpawnActorRequest(
        type=type,
        deferred=deferred,
        transform=transform,
        relative_to_actor=relative_to_actor
    )
    return await stub.SpawnActor(request)


def spawn_actor(
    type: str = '',
    deferred: bool = False,
    transform: TempoScripting.Geometry_pb2.Transform = None,
    relative_to_actor: str = ''
) -> TempoWorld.ActorControl_pb2.SpawnActorResponse:
    return run_async(_spawn_actor(
        type=type,
        deferred=deferred,
        transform=transform,
        relative_to_actor=relative_to_actor
    ))


@awaitable(spawn_actor)
async def spawn_actor(
    type: str = '',
    deferred: bool = False,
    transform: TempoScripting.Geometry_pb2.Transform = None,
    relative_to_actor: str = ''
) -> TempoWorld.ActorControl_pb2.SpawnActorResponse:
    return await _spawn_actor(
        type=type,
        deferred=deferred,
        transform=transform,
        relative_to_actor=relative_to_actor
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2
async def _finish_spawning_actor(
    actor: str = ''
) -> TempoWorld.ActorControl_pb2.FinishSpawningActorResponse:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.FinishSpawningActorRequest(
        actor=actor
    )
    return await stub.FinishSpawningActor(request)


def finish_spawning_actor(
    actor: str = ''
) -> TempoWorld.ActorControl_pb2.FinishSpawningActorResponse:
    return run_async(_finish_spawning_actor(
        actor=actor
    ))


@awaitable(finish_spawning_actor)
async def finish_spawning_actor(
    actor: str = ''
) -> TempoWorld.ActorControl_pb2.FinishSpawningActorResponse:
    return await _finish_spawning_actor(
        actor=actor
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _destroy_actor(
    actor: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.DestroyActorRequest(
        actor=actor
    )
    return await stub.DestroyActor(request)


def destroy_actor(
    actor: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_destroy_actor(
        actor=actor
    ))


@awaitable(destroy_actor)
async def destroy_actor(
    actor: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _destroy_actor(
        actor=actor
    )

import TempoWorld.ActorControl_pb2_grpc, TempoScripting.Geometry_pb2, TempoWorld.ActorControl_pb2
async def _add_component(
    type: str = '',
    actor: str = '',
    name: str = '',
    parent: str = '',
    transform: TempoScripting.Geometry_pb2.Transform = None,
    socket: str = ''
) -> TempoWorld.ActorControl_pb2.AddComponentResponse:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.AddComponentRequest(
        type=type,
        actor=actor,
        name=name,
        parent=parent,
        transform=transform,
        socket=socket
    )
    return await stub.AddComponent(request)


def add_component(
    type: str = '',
    actor: str = '',
    name: str = '',
    parent: str = '',
    transform: TempoScripting.Geometry_pb2.Transform = None,
    socket: str = ''
) -> TempoWorld.ActorControl_pb2.AddComponentResponse:
    return run_async(_add_component(
        type=type,
        actor=actor,
        name=name,
        parent=parent,
        transform=transform,
        socket=socket
    ))


@awaitable(add_component)
async def add_component(
    type: str = '',
    actor: str = '',
    name: str = '',
    parent: str = '',
    transform: TempoScripting.Geometry_pb2.Transform = None,
    socket: str = ''
) -> TempoWorld.ActorControl_pb2.AddComponentResponse:
    return await _add_component(
        type=type,
        actor=actor,
        name=name,
        parent=parent,
        transform=transform,
        socket=socket
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _destroy_component(
    actor: str = '',
    component: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.DestroyComponentRequest(
        actor=actor,
        component=component
    )
    return await stub.DestroyComponent(request)


def destroy_component(
    actor: str = '',
    component: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_destroy_component(
        actor=actor,
        component=component
    ))


@awaitable(destroy_component)
async def destroy_component(
    actor: str = '',
    component: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _destroy_component(
        actor=actor,
        component=component
    )

import TempoWorld.ActorControl_pb2_grpc, TempoScripting.Geometry_pb2, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_actor_transform(
    actor: str = '',
    transform: TempoScripting.Geometry_pb2.Transform = None,
    relative_to_actor: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetActorTransformRequest(
        actor=actor,
        transform=transform,
        relative_to_actor=relative_to_actor
    )
    return await stub.SetActorTransform(request)


def set_actor_transform(
    actor: str = '',
    transform: TempoScripting.Geometry_pb2.Transform = None,
    relative_to_actor: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_actor_transform(
        actor=actor,
        transform=transform,
        relative_to_actor=relative_to_actor
    ))


@awaitable(set_actor_transform)
async def set_actor_transform(
    actor: str = '',
    transform: TempoScripting.Geometry_pb2.Transform = None,
    relative_to_actor: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_actor_transform(
        actor=actor,
        transform=transform,
        relative_to_actor=relative_to_actor
    )

import TempoWorld.ActorControl_pb2_grpc, TempoScripting.Geometry_pb2, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_component_transform(
    actor: str = '',
    component: str = '',
    transform: TempoScripting.Geometry_pb2.Transform = None,
    relative_to_world: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetComponentTransformRequest(
        actor=actor,
        component=component,
        transform=transform,
        relative_to_world=relative_to_world
    )
    return await stub.SetComponentTransform(request)


def set_component_transform(
    actor: str = '',
    component: str = '',
    transform: TempoScripting.Geometry_pb2.Transform = None,
    relative_to_world: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_component_transform(
        actor=actor,
        component=component,
        transform=transform,
        relative_to_world=relative_to_world
    ))


@awaitable(set_component_transform)
async def set_component_transform(
    actor: str = '',
    component: str = '',
    transform: TempoScripting.Geometry_pb2.Transform = None,
    relative_to_world: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_component_transform(
        actor=actor,
        component=component,
        transform=transform,
        relative_to_world=relative_to_world
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _activate_component(
    actor: str = '',
    component: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.ActivateComponentRequest(
        actor=actor,
        component=component
    )
    return await stub.ActivateComponent(request)


def activate_component(
    actor: str = '',
    component: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_activate_component(
        actor=actor,
        component=component
    ))


@awaitable(activate_component)
async def activate_component(
    actor: str = '',
    component: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _activate_component(
        actor=actor,
        component=component
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _deactivate_component(
    actor: str = '',
    component: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.DeactivateComponentRequest(
        actor=actor,
        component=component
    )
    return await stub.DeactivateComponent(request)


def deactivate_component(
    actor: str = '',
    component: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_deactivate_component(
        actor=actor,
        component=component
    ))


@awaitable(deactivate_component)
async def deactivate_component(
    actor: str = '',
    component: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _deactivate_component(
        actor=actor,
        component=component
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2
async def _get_all_actors(
) -> TempoWorld.ActorControl_pb2.GetAllActorsResponse:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.GetAllActorsRequest(
    )
    return await stub.GetAllActors(request)


def get_all_actors(
) -> TempoWorld.ActorControl_pb2.GetAllActorsResponse:
    return run_async(_get_all_actors(
    ))


@awaitable(get_all_actors)
async def get_all_actors(
) -> TempoWorld.ActorControl_pb2.GetAllActorsResponse:
    return await _get_all_actors(
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2
async def _get_all_components(
    actor: str = ''
) -> TempoWorld.ActorControl_pb2.GetAllComponentsResponse:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.GetAllComponentsRequest(
        actor=actor
    )
    return await stub.GetAllComponents(request)


def get_all_components(
    actor: str = ''
) -> TempoWorld.ActorControl_pb2.GetAllComponentsResponse:
    return run_async(_get_all_components(
        actor=actor
    ))


@awaitable(get_all_components)
async def get_all_components(
    actor: str = ''
) -> TempoWorld.ActorControl_pb2.GetAllComponentsResponse:
    return await _get_all_components(
        actor=actor
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2
async def _get_actor_properties(
    actor: str = '',
    include_components: bool = False
) -> TempoWorld.ActorControl_pb2.GetPropertiesResponse:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.GetActorPropertiesRequest(
        actor=actor,
        include_components=include_components
    )
    return await stub.GetActorProperties(request)


def get_actor_properties(
    actor: str = '',
    include_components: bool = False
) -> TempoWorld.ActorControl_pb2.GetPropertiesResponse:
    return run_async(_get_actor_properties(
        actor=actor,
        include_components=include_components
    ))


@awaitable(get_actor_properties)
async def get_actor_properties(
    actor: str = '',
    include_components: bool = False
) -> TempoWorld.ActorControl_pb2.GetPropertiesResponse:
    return await _get_actor_properties(
        actor=actor,
        include_components=include_components
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2
async def _get_component_properties(
    actor: str = '',
    component: str = ''
) -> TempoWorld.ActorControl_pb2.GetPropertiesResponse:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.GetComponentPropertiesRequest(
        actor=actor,
        component=component
    )
    return await stub.GetComponentProperties(request)


def get_component_properties(
    actor: str = '',
    component: str = ''
) -> TempoWorld.ActorControl_pb2.GetPropertiesResponse:
    return run_async(_get_component_properties(
        actor=actor,
        component=component
    ))


@awaitable(get_component_properties)
async def get_component_properties(
    actor: str = '',
    component: str = ''
) -> TempoWorld.ActorControl_pb2.GetPropertiesResponse:
    return await _get_component_properties(
        actor=actor,
        component=component
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_bool_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetBoolPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        value=value
    )
    return await stub.SetBoolProperty(request)


def set_bool_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_bool_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    ))


@awaitable(set_bool_property)
async def set_bool_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: bool = False
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_bool_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_string_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetStringPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        value=value
    )
    return await stub.SetStringProperty(request)


def set_string_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_string_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    ))


@awaitable(set_string_property)
async def set_string_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_string_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_enum_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetEnumPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        value=value
    )
    return await stub.SetEnumProperty(request)


def set_enum_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_enum_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    ))


@awaitable(set_enum_property)
async def set_enum_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_enum_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_int_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetIntPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        value=value
    )
    return await stub.SetIntProperty(request)


def set_int_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_int_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    ))


@awaitable(set_int_property)
async def set_int_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_int_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_float_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetFloatPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        value=value
    )
    return await stub.SetFloatProperty(request)


def set_float_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_float_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    ))


@awaitable(set_float_property)
async def set_float_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_float_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_vector_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    x: float = 0.0,
    y: float = 0.0,
    z: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetVectorPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        x=x,
        y=y,
        z=z
    )
    return await stub.SetVectorProperty(request)


def set_vector_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    x: float = 0.0,
    y: float = 0.0,
    z: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_vector_property(
        actor=actor,
        component=component,
        property=property,
        x=x,
        y=y,
        z=z
    ))


@awaitable(set_vector_property)
async def set_vector_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    x: float = 0.0,
    y: float = 0.0,
    z: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_vector_property(
        actor=actor,
        component=component,
        property=property,
        x=x,
        y=y,
        z=z
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_rotator_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    r: float = 0.0,
    p: float = 0.0,
    y: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetRotatorPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        r=r,
        p=p,
        y=y
    )
    return await stub.SetRotatorProperty(request)


def set_rotator_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    r: float = 0.0,
    p: float = 0.0,
    y: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_rotator_property(
        actor=actor,
        component=component,
        property=property,
        r=r,
        p=p,
        y=y
    ))


@awaitable(set_rotator_property)
async def set_rotator_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    r: float = 0.0,
    p: float = 0.0,
    y: float = 0.0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_rotator_property(
        actor=actor,
        component=component,
        property=property,
        r=r,
        p=p,
        y=y
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_color_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    r: int = 0,
    g: int = 0,
    b: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetColorPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        r=r,
        g=g,
        b=b
    )
    return await stub.SetColorProperty(request)


def set_color_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    r: int = 0,
    g: int = 0,
    b: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_color_property(
        actor=actor,
        component=component,
        property=property,
        r=r,
        g=g,
        b=b
    ))


@awaitable(set_color_property)
async def set_color_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    r: int = 0,
    g: int = 0,
    b: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_color_property(
        actor=actor,
        component=component,
        property=property,
        r=r,
        g=g,
        b=b
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_class_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetClassPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        value=value
    )
    return await stub.SetClassProperty(request)


def set_class_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_class_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    ))


@awaitable(set_class_property)
async def set_class_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_class_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_asset_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetAssetPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        value=value
    )
    return await stub.SetAssetProperty(request)


def set_asset_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_asset_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    ))


@awaitable(set_asset_property)
async def set_asset_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_asset_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_actor_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetActorPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        value=value
    )
    return await stub.SetActorProperty(request)


def set_actor_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_actor_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    ))


@awaitable(set_actor_property)
async def set_actor_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_actor_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_component_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetComponentPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        value=value
    )
    return await stub.SetComponentProperty(request)


def set_component_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_component_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    ))


@awaitable(set_component_property)
async def set_component_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    value: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_component_property(
        actor=actor,
        component=component,
        property=property,
        value=value
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_bool_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: bool = []
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetBoolArrayPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        values=values
    )
    return await stub.SetBoolArrayProperty(request)


def set_bool_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: bool = []
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_bool_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    ))


@awaitable(set_bool_array_property)
async def set_bool_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: bool = []
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_bool_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_string_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetStringArrayPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        values=values
    )
    return await stub.SetStringArrayProperty(request)


def set_string_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_string_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    ))


@awaitable(set_string_array_property)
async def set_string_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_string_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_enum_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetEnumArrayPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        values=values
    )
    return await stub.SetEnumArrayProperty(request)


def set_enum_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_enum_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    ))


@awaitable(set_enum_array_property)
async def set_enum_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_enum_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_int_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: int = []
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetIntArrayPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        values=values
    )
    return await stub.SetIntArrayProperty(request)


def set_int_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: int = []
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_int_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    ))


@awaitable(set_int_array_property)
async def set_int_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: int = []
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_int_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_float_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: float = []
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetFloatArrayPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        values=values
    )
    return await stub.SetFloatArrayProperty(request)


def set_float_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: float = []
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_float_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    ))


@awaitable(set_float_array_property)
async def set_float_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: float = []
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_float_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_class_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetClassArrayPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        values=values
    )
    return await stub.SetClassArrayProperty(request)


def set_class_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_class_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    ))


@awaitable(set_class_array_property)
async def set_class_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_class_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_asset_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetAssetArrayPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        values=values
    )
    return await stub.SetAssetArrayProperty(request)


def set_asset_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_asset_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    ))


@awaitable(set_asset_array_property)
async def set_asset_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_asset_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_actor_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetActorArrayPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        values=values
    )
    return await stub.SetActorArrayProperty(request)


def set_actor_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_actor_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    ))


@awaitable(set_actor_array_property)
async def set_actor_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_actor_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _set_component_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.SetComponentArrayPropertyRequest(
        actor=actor,
        component=component,
        property=property,
        values=values
    )
    return await stub.SetComponentArrayProperty(request)


def set_component_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_component_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    ))


@awaitable(set_component_array_property)
async def set_component_array_property(
    actor: str = '',
    component: str = '',
    property: str = '',
    values: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_component_array_property(
        actor=actor,
        component=component,
        property=property,
        values=values
    )

import TempoWorld.ActorControl_pb2_grpc, TempoWorld.ActorControl_pb2, TempoScripting.Empty_pb2
async def _call_function(
    actor: str = '',
    component: str = '',
    function: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoWorld.ActorControl_pb2_grpc.ActorControlServiceStub)
    request = TempoWorld.ActorControl_pb2.CallFunctionRequest(
        actor=actor,
        component=component,
        function=function
    )
    return await stub.CallFunction(request)


def call_function(
    actor: str = '',
    component: str = '',
    function: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_call_function(
        actor=actor,
        component=component,
        function=function
    ))


@awaitable(call_function)
async def call_function(
    actor: str = '',
    component: str = '',
    function: str = ''
) -> TempoScripting.Empty_pb2.Empty:
    return await _call_function(
        actor=actor,
        component=component,
        function=function
    )

import TempoWorld.WorldState_pb2_grpc, TempoWorld.WorldState_pb2
async def _stream_overlap_events(
    actor_name: str = ''
) -> TempoWorld.WorldState_pb2.OverlapEventResponse:
    stub = await tempo_context().get_stub(TempoWorld.WorldState_pb2_grpc.WorldStateServiceStub)
    request = TempoWorld.WorldState_pb2.OverlapEventRequest(
        actor_name=actor_name
    )
    async for response in stub.StreamOverlapEvents(request):
        yield response


def stream_overlap_events(
    actor_name: str = ''
) -> TempoWorld.WorldState_pb2.OverlapEventResponse:
    async_gen = _stream_overlap_events(
        actor_name=actor_name
    )
    while True:
        try:
            yield run_async(async_gen.__anext__())
        except StopAsyncIteration:
            break


@awaitable(stream_overlap_events)
async def stream_overlap_events(
    actor_name: str = ''
) -> TempoWorld.WorldState_pb2.OverlapEventResponse:
    async for response in _stream_overlap_events(
        actor_name=actor_name
    ):
        yield response

import TempoWorld.WorldState_pb2_grpc, TempoWorld.WorldState_pb2
async def _get_current_actor_state(
    actor_name: str = '',
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorState:
    stub = await tempo_context().get_stub(TempoWorld.WorldState_pb2_grpc.WorldStateServiceStub)
    request = TempoWorld.WorldState_pb2.ActorStateRequest(
        actor_name=actor_name,
        include_hidden_components=include_hidden_components
    )
    return await stub.GetCurrentActorState(request)


def get_current_actor_state(
    actor_name: str = '',
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorState:
    return run_async(_get_current_actor_state(
        actor_name=actor_name,
        include_hidden_components=include_hidden_components
    ))


@awaitable(get_current_actor_state)
async def get_current_actor_state(
    actor_name: str = '',
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorState:
    return await _get_current_actor_state(
        actor_name=actor_name,
        include_hidden_components=include_hidden_components
    )

import TempoWorld.WorldState_pb2_grpc, TempoWorld.WorldState_pb2
async def _stream_actor_state(
    actor_name: str = '',
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorState:
    stub = await tempo_context().get_stub(TempoWorld.WorldState_pb2_grpc.WorldStateServiceStub)
    request = TempoWorld.WorldState_pb2.ActorStateRequest(
        actor_name=actor_name,
        include_hidden_components=include_hidden_components
    )
    async for response in stub.StreamActorState(request):
        yield response


def stream_actor_state(
    actor_name: str = '',
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorState:
    async_gen = _stream_actor_state(
        actor_name=actor_name,
        include_hidden_components=include_hidden_components
    )
    while True:
        try:
            yield run_async(async_gen.__anext__())
        except StopAsyncIteration:
            break


@awaitable(stream_actor_state)
async def stream_actor_state(
    actor_name: str = '',
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorState:
    async for response in _stream_actor_state(
        actor_name=actor_name,
        include_hidden_components=include_hidden_components
    ):
        yield response

import TempoWorld.WorldState_pb2_grpc, TempoWorld.WorldState_pb2
async def _get_current_actor_states_near(
    near_actor_name: str = '',
    search_radius: float = 0.0,
    include_static: bool = False,
    include_hidden_actors: bool = False,
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorStates:
    stub = await tempo_context().get_stub(TempoWorld.WorldState_pb2_grpc.WorldStateServiceStub)
    request = TempoWorld.WorldState_pb2.ActorStatesNearRequest(
        near_actor_name=near_actor_name,
        search_radius=search_radius,
        include_static=include_static,
        include_hidden_actors=include_hidden_actors,
        include_hidden_components=include_hidden_components
    )
    return await stub.GetCurrentActorStatesNear(request)


def get_current_actor_states_near(
    near_actor_name: str = '',
    search_radius: float = 0.0,
    include_static: bool = False,
    include_hidden_actors: bool = False,
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorStates:
    return run_async(_get_current_actor_states_near(
        near_actor_name=near_actor_name,
        search_radius=search_radius,
        include_static=include_static,
        include_hidden_actors=include_hidden_actors,
        include_hidden_components=include_hidden_components
    ))


@awaitable(get_current_actor_states_near)
async def get_current_actor_states_near(
    near_actor_name: str = '',
    search_radius: float = 0.0,
    include_static: bool = False,
    include_hidden_actors: bool = False,
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorStates:
    return await _get_current_actor_states_near(
        near_actor_name=near_actor_name,
        search_radius=search_radius,
        include_static=include_static,
        include_hidden_actors=include_hidden_actors,
        include_hidden_components=include_hidden_components
    )

import TempoWorld.WorldState_pb2_grpc, TempoWorld.WorldState_pb2
async def _stream_actor_states_near(
    near_actor_name: str = '',
    search_radius: float = 0.0,
    include_static: bool = False,
    include_hidden_actors: bool = False,
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorStates:
    stub = await tempo_context().get_stub(TempoWorld.WorldState_pb2_grpc.WorldStateServiceStub)
    request = TempoWorld.WorldState_pb2.ActorStatesNearRequest(
        near_actor_name=near_actor_name,
        search_radius=search_radius,
        include_static=include_static,
        include_hidden_actors=include_hidden_actors,
        include_hidden_components=include_hidden_components
    )
    async for response in stub.StreamActorStatesNear(request):
        yield response


def stream_actor_states_near(
    near_actor_name: str = '',
    search_radius: float = 0.0,
    include_static: bool = False,
    include_hidden_actors: bool = False,
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorStates:
    async_gen = _stream_actor_states_near(
        near_actor_name=near_actor_name,
        search_radius=search_radius,
        include_static=include_static,
        include_hidden_actors=include_hidden_actors,
        include_hidden_components=include_hidden_components
    )
    while True:
        try:
            yield run_async(async_gen.__anext__())
        except StopAsyncIteration:
            break


@awaitable(stream_actor_states_near)
async def stream_actor_states_near(
    near_actor_name: str = '',
    search_radius: float = 0.0,
    include_static: bool = False,
    include_hidden_actors: bool = False,
    include_hidden_components: bool = False
) -> TempoWorld.WorldState_pb2.ActorStates:
    async for response in _stream_actor_states_near(
        near_actor_name=near_actor_name,
        search_radius=search_radius,
        include_static=include_static,
        include_hidden_actors=include_hidden_actors,
        include_hidden_components=include_hidden_components
    ):
        yield response


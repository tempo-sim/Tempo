# Warning: Autogenerated code do not edit

from tempo._tempo_context import tempo_context
from tempo import run_async
from curio.meta import awaitable
import asyncio


import TempoTime.Time_pb2_grpc, TempoTime.Time_pb2, TempoScripting.Empty_pb2
async def _set_time_mode(
    time_mode: TempoTime.Time_pb2.TimeMode = 0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoTime.Time_pb2_grpc.TimeServiceStub)
    request = TempoTime.Time_pb2.TimeModeRequest(
        time_mode=time_mode
    )
    return await stub.SetTimeMode(request)


def set_time_mode(
    time_mode: TempoTime.Time_pb2.TimeMode = 0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_time_mode(
        time_mode=time_mode
    ))


@awaitable(set_time_mode)
async def set_time_mode(
    time_mode: TempoTime.Time_pb2.TimeMode = 0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_time_mode(
        time_mode=time_mode
    )

import TempoTime.Time_pb2_grpc, TempoTime.Time_pb2, TempoScripting.Empty_pb2
async def _set_sim_steps_per_second(
    sim_steps_per_second: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoTime.Time_pb2_grpc.TimeServiceStub)
    request = TempoTime.Time_pb2.SetSimStepsPerSecondRequest(
        sim_steps_per_second=sim_steps_per_second
    )
    return await stub.SetSimStepsPerSecond(request)


def set_sim_steps_per_second(
    sim_steps_per_second: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_set_sim_steps_per_second(
        sim_steps_per_second=sim_steps_per_second
    ))


@awaitable(set_sim_steps_per_second)
async def set_sim_steps_per_second(
    sim_steps_per_second: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return await _set_sim_steps_per_second(
        sim_steps_per_second=sim_steps_per_second
    )

import TempoTime.Time_pb2_grpc, TempoTime.Time_pb2, TempoScripting.Empty_pb2
async def _advance_steps(
    steps: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoTime.Time_pb2_grpc.TimeServiceStub)
    request = TempoTime.Time_pb2.AdvanceStepsRequest(
        steps=steps
    )
    return await stub.AdvanceSteps(request)


def advance_steps(
    steps: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_advance_steps(
        steps=steps
    ))


@awaitable(advance_steps)
async def advance_steps(
    steps: int = 0
) -> TempoScripting.Empty_pb2.Empty:
    return await _advance_steps(
        steps=steps
    )

import TempoTime.Time_pb2_grpc, TempoScripting.Empty_pb2
async def _play(
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoTime.Time_pb2_grpc.TimeServiceStub)
    request = TempoScripting.Empty_pb2.Empty(
    )
    return await stub.Play(request)


def play(
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_play(
    ))


@awaitable(play)
async def play(
) -> TempoScripting.Empty_pb2.Empty:
    return await _play(
    )

import TempoTime.Time_pb2_grpc, TempoScripting.Empty_pb2
async def _pause(
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoTime.Time_pb2_grpc.TimeServiceStub)
    request = TempoScripting.Empty_pb2.Empty(
    )
    return await stub.Pause(request)


def pause(
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_pause(
    ))


@awaitable(pause)
async def pause(
) -> TempoScripting.Empty_pb2.Empty:
    return await _pause(
    )

import TempoTime.Time_pb2_grpc, TempoScripting.Empty_pb2
async def _step(
) -> TempoScripting.Empty_pb2.Empty:
    stub = await tempo_context().get_stub(TempoTime.Time_pb2_grpc.TimeServiceStub)
    request = TempoScripting.Empty_pb2.Empty(
    )
    return await stub.Step(request)


def step(
) -> TempoScripting.Empty_pb2.Empty:
    return run_async(_step(
    ))


@awaitable(step)
async def step(
) -> TempoScripting.Empty_pb2.Empty:
    return await _step(
    )


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoCoreEditor/TempoCoreEditor.proto

#include "TempoCoreEditor/TempoCoreEditor.pb.h"
#include "TempoCoreEditor/TempoCoreEditor.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace TempoCoreEditor {

static const char* TempoCoreEditorService_method_names[] = {
  "/TempoCoreEditor.TempoCoreEditorService/PlayInEditor",
  "/TempoCoreEditor.TempoCoreEditorService/Simulate",
  "/TempoCoreEditor.TempoCoreEditorService/Stop",
  "/TempoCoreEditor.TempoCoreEditorService/SaveLevel",
  "/TempoCoreEditor.TempoCoreEditorService/OpenLevel",
  "/TempoCoreEditor.TempoCoreEditorService/NewLevel",
};

std::unique_ptr< TempoCoreEditorService::Stub> TempoCoreEditorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TempoCoreEditorService::Stub> stub(new TempoCoreEditorService::Stub(channel, options));
  return stub;
}

TempoCoreEditorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PlayInEditor_(TempoCoreEditorService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Simulate_(TempoCoreEditorService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(TempoCoreEditorService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveLevel_(TempoCoreEditorService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenLevel_(TempoCoreEditorService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewLevel_(TempoCoreEditorService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TempoCoreEditorService::Stub::PlayInEditor(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlayInEditor_, context, request, response);
}

void TempoCoreEditorService::Stub::async::PlayInEditor(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayInEditor_, context, request, response, std::move(f));
}

void TempoCoreEditorService::Stub::async::PlayInEditor(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayInEditor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::PrepareAsyncPlayInEditorRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlayInEditor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::AsyncPlayInEditorRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayInEditorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TempoCoreEditorService::Stub::Simulate(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Simulate_, context, request, response);
}

void TempoCoreEditorService::Stub::async::Simulate(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Simulate_, context, request, response, std::move(f));
}

void TempoCoreEditorService::Stub::async::Simulate(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Simulate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::PrepareAsyncSimulateRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Simulate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::AsyncSimulateRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSimulateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TempoCoreEditorService::Stub::Stop(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void TempoCoreEditorService::Stub::async::Stop(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void TempoCoreEditorService::Stub::async::Stop(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TempoCoreEditorService::Stub::SaveLevel(::grpc::ClientContext* context, const ::TempoCoreEditor::SaveLevelRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoCoreEditor::SaveLevelRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SaveLevel_, context, request, response);
}

void TempoCoreEditorService::Stub::async::SaveLevel(::grpc::ClientContext* context, const ::TempoCoreEditor::SaveLevelRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoCoreEditor::SaveLevelRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveLevel_, context, request, response, std::move(f));
}

void TempoCoreEditorService::Stub::async::SaveLevel(::grpc::ClientContext* context, const ::TempoCoreEditor::SaveLevelRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::PrepareAsyncSaveLevelRaw(::grpc::ClientContext* context, const ::TempoCoreEditor::SaveLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoCoreEditor::SaveLevelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SaveLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::AsyncSaveLevelRaw(::grpc::ClientContext* context, const ::TempoCoreEditor::SaveLevelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSaveLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TempoCoreEditorService::Stub::OpenLevel(::grpc::ClientContext* context, const ::TempoCoreEditor::OpenLevelRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoCoreEditor::OpenLevelRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OpenLevel_, context, request, response);
}

void TempoCoreEditorService::Stub::async::OpenLevel(::grpc::ClientContext* context, const ::TempoCoreEditor::OpenLevelRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoCoreEditor::OpenLevelRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OpenLevel_, context, request, response, std::move(f));
}

void TempoCoreEditorService::Stub::async::OpenLevel(::grpc::ClientContext* context, const ::TempoCoreEditor::OpenLevelRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OpenLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::PrepareAsyncOpenLevelRaw(::grpc::ClientContext* context, const ::TempoCoreEditor::OpenLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoCoreEditor::OpenLevelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OpenLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::AsyncOpenLevelRaw(::grpc::ClientContext* context, const ::TempoCoreEditor::OpenLevelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOpenLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TempoCoreEditorService::Stub::NewLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewLevel_, context, request, response);
}

void TempoCoreEditorService::Stub::async::NewLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewLevel_, context, request, response, std::move(f));
}

void TempoCoreEditorService::Stub::async::NewLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::PrepareAsyncNewLevelRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreEditorService::Stub::AsyncNewLevelRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

TempoCoreEditorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreEditorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreEditorService::Service, ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreEditorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoScripting::Empty* resp) {
               return service->PlayInEditor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreEditorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreEditorService::Service, ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreEditorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoScripting::Empty* resp) {
               return service->Simulate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreEditorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreEditorService::Service, ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreEditorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoScripting::Empty* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreEditorService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreEditorService::Service, ::TempoCoreEditor::SaveLevelRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreEditorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoCoreEditor::SaveLevelRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SaveLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreEditorService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreEditorService::Service, ::TempoCoreEditor::OpenLevelRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreEditorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoCoreEditor::OpenLevelRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->OpenLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreEditorService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreEditorService::Service, ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreEditorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoScripting::Empty* resp) {
               return service->NewLevel(ctx, req, resp);
             }, this)));
}

TempoCoreEditorService::Service::~Service() {
}

::grpc::Status TempoCoreEditorService::Service::PlayInEditor(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TempoCoreEditorService::Service::Simulate(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TempoCoreEditorService::Service::Stop(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TempoCoreEditorService::Service::SaveLevel(::grpc::ServerContext* context, const ::TempoCoreEditor::SaveLevelRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TempoCoreEditorService::Service::OpenLevel(::grpc::ServerContext* context, const ::TempoCoreEditor::OpenLevelRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TempoCoreEditorService::Service::NewLevel(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TempoCoreEditor


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoTime/Time.proto

#include "TempoTime/Time.pb.h"
#include "TempoTime/Time.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace TempoTime {

static const char* TimeService_method_names[] = {
  "/TempoTime.TimeService/SetTimeMode",
  "/TempoTime.TimeService/SetSimStepsPerSecond",
  "/TempoTime.TimeService/AdvanceSteps",
  "/TempoTime.TimeService/Play",
  "/TempoTime.TimeService/Pause",
  "/TempoTime.TimeService/Step",
};

std::unique_ptr< TimeService::Stub> TimeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TimeService::Stub> stub(new TimeService::Stub(channel, options));
  return stub;
}

TimeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetTimeMode_(TimeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSimStepsPerSecond_(TimeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AdvanceSteps_(TimeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Play_(TimeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pause_(TimeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Step_(TimeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TimeService::Stub::SetTimeMode(::grpc::ClientContext* context, const ::TempoTime::TimeModeRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoTime::TimeModeRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTimeMode_, context, request, response);
}

void TimeService::Stub::async::SetTimeMode(::grpc::ClientContext* context, const ::TempoTime::TimeModeRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoTime::TimeModeRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTimeMode_, context, request, response, std::move(f));
}

void TimeService::Stub::async::SetTimeMode(::grpc::ClientContext* context, const ::TempoTime::TimeModeRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTimeMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::PrepareAsyncSetTimeModeRaw(::grpc::ClientContext* context, const ::TempoTime::TimeModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoTime::TimeModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTimeMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::AsyncSetTimeModeRaw(::grpc::ClientContext* context, const ::TempoTime::TimeModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTimeModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimeService::Stub::SetSimStepsPerSecond(::grpc::ClientContext* context, const ::TempoTime::SetSimStepsPerSecondRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoTime::SetSimStepsPerSecondRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSimStepsPerSecond_, context, request, response);
}

void TimeService::Stub::async::SetSimStepsPerSecond(::grpc::ClientContext* context, const ::TempoTime::SetSimStepsPerSecondRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoTime::SetSimStepsPerSecondRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSimStepsPerSecond_, context, request, response, std::move(f));
}

void TimeService::Stub::async::SetSimStepsPerSecond(::grpc::ClientContext* context, const ::TempoTime::SetSimStepsPerSecondRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSimStepsPerSecond_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::PrepareAsyncSetSimStepsPerSecondRaw(::grpc::ClientContext* context, const ::TempoTime::SetSimStepsPerSecondRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoTime::SetSimStepsPerSecondRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSimStepsPerSecond_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::AsyncSetSimStepsPerSecondRaw(::grpc::ClientContext* context, const ::TempoTime::SetSimStepsPerSecondRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSimStepsPerSecondRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimeService::Stub::AdvanceSteps(::grpc::ClientContext* context, const ::TempoTime::AdvanceStepsRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoTime::AdvanceStepsRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AdvanceSteps_, context, request, response);
}

void TimeService::Stub::async::AdvanceSteps(::grpc::ClientContext* context, const ::TempoTime::AdvanceStepsRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoTime::AdvanceStepsRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AdvanceSteps_, context, request, response, std::move(f));
}

void TimeService::Stub::async::AdvanceSteps(::grpc::ClientContext* context, const ::TempoTime::AdvanceStepsRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AdvanceSteps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::PrepareAsyncAdvanceStepsRaw(::grpc::ClientContext* context, const ::TempoTime::AdvanceStepsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoTime::AdvanceStepsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AdvanceSteps_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::AsyncAdvanceStepsRaw(::grpc::ClientContext* context, const ::TempoTime::AdvanceStepsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAdvanceStepsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimeService::Stub::Play(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Play_, context, request, response);
}

void TimeService::Stub::async::Play(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, std::move(f));
}

void TimeService::Stub::async::Play(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Play_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::AsyncPlayRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimeService::Stub::Pause(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Pause_, context, request, response);
}

void TimeService::Stub::async::Pause(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, std::move(f));
}

void TimeService::Stub::async::Pause(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::PrepareAsyncPauseRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Pause_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::AsyncPauseRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimeService::Stub::Step(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Step_, context, request, response);
}

void TimeService::Stub::async::Step(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

void TimeService::Stub::async::Step(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Step_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TimeService::Stub::AsyncStepRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStepRaw(context, request, cq);
  result->StartCall();
  return result;
}

TimeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeService::Service, ::TempoTime::TimeModeRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoTime::TimeModeRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetTimeMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeService::Service, ::TempoTime::SetSimStepsPerSecondRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoTime::SetSimStepsPerSecondRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetSimStepsPerSecond(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeService::Service, ::TempoTime::AdvanceStepsRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoTime::AdvanceStepsRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->AdvanceSteps(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeService::Service, ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoScripting::Empty* resp) {
               return service->Play(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeService::Service, ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoScripting::Empty* resp) {
               return service->Pause(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeService::Service, ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoScripting::Empty* resp) {
               return service->Step(ctx, req, resp);
             }, this)));
}

TimeService::Service::~Service() {
}

::grpc::Status TimeService::Service::SetTimeMode(::grpc::ServerContext* context, const ::TempoTime::TimeModeRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimeService::Service::SetSimStepsPerSecond(::grpc::ServerContext* context, const ::TempoTime::SetSimStepsPerSecondRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimeService::Service::AdvanceSteps(::grpc::ServerContext* context, const ::TempoTime::AdvanceStepsRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimeService::Service::Play(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimeService::Service::Pause(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimeService::Service::Step(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TempoTime


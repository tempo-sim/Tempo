// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoCore/TempoCore.proto

#include "TempoCore/TempoCore.pb.h"
#include "TempoCore/TempoCore.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace TempoCore {

static const char* TempoCoreService_method_names[] = {
  "/TempoCore.TempoCoreService/LoadLevel",
  "/TempoCore.TempoCoreService/FinishLoadingLevel",
  "/TempoCore.TempoCoreService/GetCurrentLevelName",
  "/TempoCore.TempoCoreService/Quit",
  "/TempoCore.TempoCoreService/SetMainViewportRenderEnabled",
};

std::unique_ptr< TempoCoreService::Stub> TempoCoreService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TempoCoreService::Stub> stub(new TempoCoreService::Stub(channel, options));
  return stub;
}

TempoCoreService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_LoadLevel_(TempoCoreService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FinishLoadingLevel_(TempoCoreService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentLevelName_(TempoCoreService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Quit_(TempoCoreService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMainViewportRenderEnabled_(TempoCoreService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TempoCoreService::Stub::LoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoCore::LoadLevelRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadLevel_, context, request, response);
}

void TempoCoreService::Stub::async::LoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoCore::LoadLevelRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadLevel_, context, request, response, std::move(f));
}

void TempoCoreService::Stub::async::LoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreService::Stub::PrepareAsyncLoadLevelRaw(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoCore::LoadLevelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreService::Stub::AsyncLoadLevelRaw(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TempoCoreService::Stub::FinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FinishLoadingLevel_, context, request, response);
}

void TempoCoreService::Stub::async::FinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinishLoadingLevel_, context, request, response, std::move(f));
}

void TempoCoreService::Stub::async::FinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinishLoadingLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreService::Stub::PrepareAsyncFinishLoadingLevelRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FinishLoadingLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreService::Stub::AsyncFinishLoadingLevelRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFinishLoadingLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TempoCoreService::Stub::GetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoCore::CurrentLevelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoCore::CurrentLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentLevelName_, context, request, response);
}

void TempoCoreService::Stub::async::GetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoCore::CurrentLevelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoCore::CurrentLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentLevelName_, context, request, response, std::move(f));
}

void TempoCoreService::Stub::async::GetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoCore::CurrentLevelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentLevelName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoCore::CurrentLevelResponse>* TempoCoreService::Stub::PrepareAsyncGetCurrentLevelNameRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoCore::CurrentLevelResponse, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentLevelName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoCore::CurrentLevelResponse>* TempoCoreService::Stub::AsyncGetCurrentLevelNameRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentLevelNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TempoCoreService::Stub::Quit(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Quit_, context, request, response);
}

void TempoCoreService::Stub::async::Quit(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Quit_, context, request, response, std::move(f));
}

void TempoCoreService::Stub::async::Quit(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Quit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreService::Stub::PrepareAsyncQuitRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Quit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreService::Stub::AsyncQuitRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQuitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TempoCoreService::Stub::SetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoCore::SetMainViewportRenderEnabledRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMainViewportRenderEnabled_, context, request, response);
}

void TempoCoreService::Stub::async::SetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoCore::SetMainViewportRenderEnabledRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMainViewportRenderEnabled_, context, request, response, std::move(f));
}

void TempoCoreService::Stub::async::SetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMainViewportRenderEnabled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreService::Stub::PrepareAsyncSetMainViewportRenderEnabledRaw(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoCore::SetMainViewportRenderEnabledRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMainViewportRenderEnabled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* TempoCoreService::Stub::AsyncSetMainViewportRenderEnabledRaw(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMainViewportRenderEnabledRaw(context, request, cq);
  result->StartCall();
  return result;
}

TempoCoreService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreService::Service, ::TempoCore::LoadLevelRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoCore::LoadLevelRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->LoadLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreService::Service, ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoScripting::Empty* resp) {
               return service->FinishLoadingLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreService::Service, ::TempoScripting::Empty, ::TempoCore::CurrentLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoCore::CurrentLevelResponse* resp) {
               return service->GetCurrentLevelName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreService::Service, ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoScripting::Empty* resp) {
               return service->Quit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TempoCoreService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TempoCoreService::Service, ::TempoCore::SetMainViewportRenderEnabledRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TempoCoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoCore::SetMainViewportRenderEnabledRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->SetMainViewportRenderEnabled(ctx, req, resp);
             }, this)));
}

TempoCoreService::Service::~Service() {
}

::grpc::Status TempoCoreService::Service::LoadLevel(::grpc::ServerContext* context, const ::TempoCore::LoadLevelRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TempoCoreService::Service::FinishLoadingLevel(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TempoCoreService::Service::GetCurrentLevelName(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoCore::CurrentLevelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TempoCoreService::Service::Quit(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TempoCoreService::Service::SetMainViewportRenderEnabled(::grpc::ServerContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TempoCore


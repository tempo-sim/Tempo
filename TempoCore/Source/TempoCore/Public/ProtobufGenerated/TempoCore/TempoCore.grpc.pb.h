// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoCore/TempoCore.proto
// Original file comments:
// Copyright Tempo Simulation, LLC. All Rights Reserved
//
#ifndef GRPC_TempoCore_2fTempoCore_2eproto__INCLUDED
#define GRPC_TempoCore_2fTempoCore_2eproto__INCLUDED

#include "TempoCore/TempoCore.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace TempoCore {

class TempoCoreService final {
 public:
  static constexpr char const* service_full_name() {
    return "TempoCore.TempoCoreService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status LoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::TempoScripting::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> AsyncLoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(AsyncLoadLevelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> PrepareAsyncLoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(PrepareAsyncLoadLevelRaw(context, request, cq));
    }
    virtual ::grpc::Status FinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> AsyncFinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(AsyncFinishLoadingLevelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> PrepareAsyncFinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(PrepareAsyncFinishLoadingLevelRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoCore::CurrentLevelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoCore::CurrentLevelResponse>> AsyncGetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoCore::CurrentLevelResponse>>(AsyncGetCurrentLevelNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoCore::CurrentLevelResponse>> PrepareAsyncGetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoCore::CurrentLevelResponse>>(PrepareAsyncGetCurrentLevelNameRaw(context, request, cq));
    }
    virtual ::grpc::Status Quit(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> AsyncQuit(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(AsyncQuitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> PrepareAsyncQuit(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(PrepareAsyncQuitRaw(context, request, cq));
    }
    virtual ::grpc::Status SetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::TempoScripting::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> AsyncSetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(AsyncSetMainViewportRenderEnabledRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> PrepareAsyncSetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(PrepareAsyncSetMainViewportRenderEnabledRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void LoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoCore::CurrentLevelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoCore::CurrentLevelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Quit(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Quit(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* AsyncLoadLevelRaw(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* PrepareAsyncLoadLevelRaw(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* AsyncFinishLoadingLevelRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* PrepareAsyncFinishLoadingLevelRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoCore::CurrentLevelResponse>* AsyncGetCurrentLevelNameRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoCore::CurrentLevelResponse>* PrepareAsyncGetCurrentLevelNameRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* AsyncQuitRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* PrepareAsyncQuitRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* AsyncSetMainViewportRenderEnabledRaw(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* PrepareAsyncSetMainViewportRenderEnabledRaw(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status LoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::TempoScripting::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> AsyncLoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(AsyncLoadLevelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> PrepareAsyncLoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(PrepareAsyncLoadLevelRaw(context, request, cq));
    }
    ::grpc::Status FinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> AsyncFinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(AsyncFinishLoadingLevelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> PrepareAsyncFinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(PrepareAsyncFinishLoadingLevelRaw(context, request, cq));
    }
    ::grpc::Status GetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoCore::CurrentLevelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoCore::CurrentLevelResponse>> AsyncGetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoCore::CurrentLevelResponse>>(AsyncGetCurrentLevelNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoCore::CurrentLevelResponse>> PrepareAsyncGetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoCore::CurrentLevelResponse>>(PrepareAsyncGetCurrentLevelNameRaw(context, request, cq));
    }
    ::grpc::Status Quit(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> AsyncQuit(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(AsyncQuitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> PrepareAsyncQuit(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(PrepareAsyncQuitRaw(context, request, cq));
    }
    ::grpc::Status SetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::TempoScripting::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> AsyncSetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(AsyncSetMainViewportRenderEnabledRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> PrepareAsyncSetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(PrepareAsyncSetMainViewportRenderEnabledRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void LoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) override;
      void LoadLevel(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) override;
      void FinishLoadingLevel(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoCore::CurrentLevelResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCurrentLevelName(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoCore::CurrentLevelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Quit(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) override;
      void Quit(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetMainViewportRenderEnabled(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* AsyncLoadLevelRaw(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* PrepareAsyncLoadLevelRaw(::grpc::ClientContext* context, const ::TempoCore::LoadLevelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* AsyncFinishLoadingLevelRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* PrepareAsyncFinishLoadingLevelRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoCore::CurrentLevelResponse>* AsyncGetCurrentLevelNameRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoCore::CurrentLevelResponse>* PrepareAsyncGetCurrentLevelNameRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* AsyncQuitRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* PrepareAsyncQuitRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* AsyncSetMainViewportRenderEnabledRaw(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* PrepareAsyncSetMainViewportRenderEnabledRaw(::grpc::ClientContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LoadLevel_;
    const ::grpc::internal::RpcMethod rpcmethod_FinishLoadingLevel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentLevelName_;
    const ::grpc::internal::RpcMethod rpcmethod_Quit_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMainViewportRenderEnabled_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status LoadLevel(::grpc::ServerContext* context, const ::TempoCore::LoadLevelRequest* request, ::TempoScripting::Empty* response);
    virtual ::grpc::Status FinishLoadingLevel(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response);
    virtual ::grpc::Status GetCurrentLevelName(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoCore::CurrentLevelResponse* response);
    virtual ::grpc::Status Quit(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response);
    virtual ::grpc::Status SetMainViewportRenderEnabled(::grpc::ServerContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest* request, ::TempoScripting::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadLevel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LoadLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadLevel(::grpc::ServerContext* /*context*/, const ::TempoCore::LoadLevelRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadLevel(::grpc::ServerContext* context, ::TempoCore::LoadLevelRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoScripting::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FinishLoadingLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FinishLoadingLevel() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FinishLoadingLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishLoadingLevel(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishLoadingLevel(::grpc::ServerContext* context, ::TempoScripting::Empty* request, ::grpc::ServerAsyncResponseWriter< ::TempoScripting::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentLevelName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCurrentLevelName() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCurrentLevelName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentLevelName(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoCore::CurrentLevelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentLevelName(::grpc::ServerContext* context, ::TempoScripting::Empty* request, ::grpc::ServerAsyncResponseWriter< ::TempoCore::CurrentLevelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Quit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Quit() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Quit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Quit(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuit(::grpc::ServerContext* context, ::TempoScripting::Empty* request, ::grpc::ServerAsyncResponseWriter< ::TempoScripting::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMainViewportRenderEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMainViewportRenderEnabled() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetMainViewportRenderEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMainViewportRenderEnabled(::grpc::ServerContext* /*context*/, const ::TempoCore::SetMainViewportRenderEnabledRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMainViewportRenderEnabled(::grpc::ServerContext* context, ::TempoCore::SetMainViewportRenderEnabledRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoScripting::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LoadLevel<WithAsyncMethod_FinishLoadingLevel<WithAsyncMethod_GetCurrentLevelName<WithAsyncMethod_Quit<WithAsyncMethod_SetMainViewportRenderEnabled<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_LoadLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadLevel() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoCore::LoadLevelRequest, ::TempoScripting::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoCore::LoadLevelRequest* request, ::TempoScripting::Empty* response) { return this->LoadLevel(context, request, response); }));}
    void SetMessageAllocatorFor_LoadLevel(
        ::grpc::MessageAllocator< ::TempoCore::LoadLevelRequest, ::TempoScripting::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoCore::LoadLevelRequest, ::TempoScripting::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadLevel(::grpc::ServerContext* /*context*/, const ::TempoCore::LoadLevelRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadLevel(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoCore::LoadLevelRequest* /*request*/, ::TempoScripting::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FinishLoadingLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FinishLoadingLevel() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoScripting::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) { return this->FinishLoadingLevel(context, request, response); }));}
    void SetMessageAllocatorFor_FinishLoadingLevel(
        ::grpc::MessageAllocator< ::TempoScripting::Empty, ::TempoScripting::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoScripting::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FinishLoadingLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishLoadingLevel(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FinishLoadingLevel(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCurrentLevelName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCurrentLevelName() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoCore::CurrentLevelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoScripting::Empty* request, ::TempoCore::CurrentLevelResponse* response) { return this->GetCurrentLevelName(context, request, response); }));}
    void SetMessageAllocatorFor_GetCurrentLevelName(
        ::grpc::MessageAllocator< ::TempoScripting::Empty, ::TempoCore::CurrentLevelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoCore::CurrentLevelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCurrentLevelName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentLevelName(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoCore::CurrentLevelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentLevelName(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoCore::CurrentLevelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Quit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Quit() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoScripting::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) { return this->Quit(context, request, response); }));}
    void SetMessageAllocatorFor_Quit(
        ::grpc::MessageAllocator< ::TempoScripting::Empty, ::TempoScripting::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoScripting::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Quit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Quit(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Quit(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetMainViewportRenderEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetMainViewportRenderEnabled() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoCore::SetMainViewportRenderEnabledRequest, ::TempoScripting::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoCore::SetMainViewportRenderEnabledRequest* request, ::TempoScripting::Empty* response) { return this->SetMainViewportRenderEnabled(context, request, response); }));}
    void SetMessageAllocatorFor_SetMainViewportRenderEnabled(
        ::grpc::MessageAllocator< ::TempoCore::SetMainViewportRenderEnabledRequest, ::TempoScripting::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoCore::SetMainViewportRenderEnabledRequest, ::TempoScripting::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetMainViewportRenderEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMainViewportRenderEnabled(::grpc::ServerContext* /*context*/, const ::TempoCore::SetMainViewportRenderEnabledRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMainViewportRenderEnabled(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoCore::SetMainViewportRenderEnabledRequest* /*request*/, ::TempoScripting::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_LoadLevel<WithCallbackMethod_FinishLoadingLevel<WithCallbackMethod_GetCurrentLevelName<WithCallbackMethod_Quit<WithCallbackMethod_SetMainViewportRenderEnabled<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LoadLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadLevel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LoadLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadLevel(::grpc::ServerContext* /*context*/, const ::TempoCore::LoadLevelRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FinishLoadingLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FinishLoadingLevel() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FinishLoadingLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishLoadingLevel(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCurrentLevelName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCurrentLevelName() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCurrentLevelName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentLevelName(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoCore::CurrentLevelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Quit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Quit() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Quit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Quit(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMainViewportRenderEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMainViewportRenderEnabled() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetMainViewportRenderEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMainViewportRenderEnabled(::grpc::ServerContext* /*context*/, const ::TempoCore::SetMainViewportRenderEnabledRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadLevel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LoadLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadLevel(::grpc::ServerContext* /*context*/, const ::TempoCore::LoadLevelRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadLevel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FinishLoadingLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FinishLoadingLevel() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FinishLoadingLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishLoadingLevel(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishLoadingLevel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentLevelName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCurrentLevelName() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCurrentLevelName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentLevelName(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoCore::CurrentLevelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentLevelName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Quit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Quit() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Quit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Quit(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMainViewportRenderEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMainViewportRenderEnabled() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetMainViewportRenderEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMainViewportRenderEnabled(::grpc::ServerContext* /*context*/, const ::TempoCore::SetMainViewportRenderEnabledRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMainViewportRenderEnabled(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadLevel() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadLevel(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadLevel(::grpc::ServerContext* /*context*/, const ::TempoCore::LoadLevelRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadLevel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FinishLoadingLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FinishLoadingLevel() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FinishLoadingLevel(context, request, response); }));
    }
    ~WithRawCallbackMethod_FinishLoadingLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishLoadingLevel(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FinishLoadingLevel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCurrentLevelName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCurrentLevelName() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCurrentLevelName(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCurrentLevelName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentLevelName(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoCore::CurrentLevelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentLevelName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Quit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Quit() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Quit(context, request, response); }));
    }
    ~WithRawCallbackMethod_Quit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Quit(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Quit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetMainViewportRenderEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetMainViewportRenderEnabled() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMainViewportRenderEnabled(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetMainViewportRenderEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMainViewportRenderEnabled(::grpc::ServerContext* /*context*/, const ::TempoCore::SetMainViewportRenderEnabledRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMainViewportRenderEnabled(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadLevel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoCore::LoadLevelRequest, ::TempoScripting::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoCore::LoadLevelRequest, ::TempoScripting::Empty>* streamer) {
                       return this->StreamedLoadLevel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadLevel(::grpc::ServerContext* /*context*/, const ::TempoCore::LoadLevelRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadLevel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoCore::LoadLevelRequest,::TempoScripting::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FinishLoadingLevel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FinishLoadingLevel() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoScripting::Empty, ::TempoScripting::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoScripting::Empty, ::TempoScripting::Empty>* streamer) {
                       return this->StreamedFinishLoadingLevel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FinishLoadingLevel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FinishLoadingLevel(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinishLoadingLevel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoScripting::Empty,::TempoScripting::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentLevelName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCurrentLevelName() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoScripting::Empty, ::TempoCore::CurrentLevelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoScripting::Empty, ::TempoCore::CurrentLevelResponse>* streamer) {
                       return this->StreamedGetCurrentLevelName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCurrentLevelName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentLevelName(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoCore::CurrentLevelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentLevelName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoScripting::Empty,::TempoCore::CurrentLevelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Quit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Quit() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoScripting::Empty, ::TempoScripting::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoScripting::Empty, ::TempoScripting::Empty>* streamer) {
                       return this->StreamedQuit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Quit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Quit(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoScripting::Empty,::TempoScripting::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMainViewportRenderEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMainViewportRenderEnabled() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoCore::SetMainViewportRenderEnabledRequest, ::TempoScripting::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoCore::SetMainViewportRenderEnabledRequest, ::TempoScripting::Empty>* streamer) {
                       return this->StreamedSetMainViewportRenderEnabled(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMainViewportRenderEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMainViewportRenderEnabled(::grpc::ServerContext* /*context*/, const ::TempoCore::SetMainViewportRenderEnabledRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMainViewportRenderEnabled(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoCore::SetMainViewportRenderEnabledRequest,::TempoScripting::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_LoadLevel<WithStreamedUnaryMethod_FinishLoadingLevel<WithStreamedUnaryMethod_GetCurrentLevelName<WithStreamedUnaryMethod_Quit<WithStreamedUnaryMethod_SetMainViewportRenderEnabled<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_LoadLevel<WithStreamedUnaryMethod_FinishLoadingLevel<WithStreamedUnaryMethod_GetCurrentLevelName<WithStreamedUnaryMethod_Quit<WithStreamedUnaryMethod_SetMainViewportRenderEnabled<Service > > > > > StreamedService;
};

}  // namespace TempoCore


#endif  // GRPC_TempoCore_2fTempoCore_2eproto__INCLUDED

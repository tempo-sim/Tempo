// Copyright Tempo Simulation, LLC. All Rights Reserved

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/PlayerController.h"

#include "TempoPlayerController.generated.h"

class ASpectatorPawn;
class UUserWidget;

// A struct to group pawns with a common parent.
USTRUCT()
struct FPawnGroup
{
    GENERATED_BODY()

    UPROPERTY()
    TArray<APawn*> Pawns;
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnPawnListUpdated);

/**
 * A PlayerController that allows switching between different groups of Pawns.
 */
UCLASS(Blueprintable)
class TEMPOCORE_API ATempoPlayerController : public APlayerController
{
    GENERATED_BODY()

public:
    ATempoPlayerController();

    virtual void OnPossess(APawn* InPawn) override;

    virtual void OnUnPossess() override;
    virtual void SetupInputComponent() override;
    virtual void BeginPlay() override;
    virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;
    virtual void Tick(float DeltaTime) override;

    UFUNCTION(BlueprintCallable, Category = "Tempo")
    void ToggleMouseCaptured();

    UFUNCTION(BlueprintCallable, Category = "Tempo")
    void SetMouseCaptured(bool bCaptured);
    
    UFUNCTION(BlueprintPure, Category = "Tempo")
    TArray<APawn*> GetAllPossessablePawns() const;

    /** This event is broadcast whenever the pawn groups are updated. */
    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnPawnListUpdated OnPawnListUpdated;

    /**
    * @brief Caches the current AI controller of a pawn before the player possesses it.
    */
    void CacheAIController(APawn* PawnToPossess);

protected:

    /**
    * The user-defined list of base classes to group pawns by. Pawns are grouped under the
    * first class in this list they derive from. The order of this array determines the
    * initial order of the pawn groups when cycling.
    */
    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Tempo", Meta = (DisplayName = "Pawn Grouping Priority"))
    TArray<TSubclassOf<APawn>> ConfiguredPawnGroupClasses;

    /**
     * The RUNTIME list of active pawn group classes. This is generated by UpdatePawnGroups
     * based on the configuration and the pawns currently in the world. This is the list
     * used for cycling.
     */
    UPROPERTY(VisibleInstanceOnly, BlueprintReadOnly, Category = "Tempo")
    TArray<TSubclassOf<APawn>> ActivePawnGroupClasses;

    /** The class to use for the generic fallback group. Any pawn that doesn't fit into the
    * hard-coded or user-configured groups will be placed here. Defaults to APawn. */
    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Tempo|Pawn Groups")
    TSubclassOf<APawn> FallbackGroupClass;
    
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Tempo")
    bool bMouseCaptured = false;

    // If true, draws a debug sphere around the currently possessed pawn.
    UPROPERTY(EditAnywhere, Category = "Tempo")
    bool bHighlightPossessedPawn;

    // A map to hold all pawns, dynamically grouped by their specific UClass.
    UPROPERTY()
    TMap<UClass*, FPawnGroup> PawnGroups;
    
    // A map to store the current possession index for each pawn group.
    UPROPERTY()
    TMap<UClass*, int32> PawnGroupIndices;

    // The index of the currently active group within the PawnGroupClasses array.
    int32 ActiveGroupIndex;

    // Helper function to determine the correct group for any given pawn.
    UClass* GetCorrectGroupForPawn(const APawn* InPawn) const;

    // Delegate handles for our event listeners.
    FDelegateHandle OnActorSpawnedDelegateHandle;
    FDelegateHandle OnActorDestroyedDelegateHandle;

    // Timer handle for the delayed update.
    FTimerHandle UpdateGroupsTimerHandle;
    
    /** Tracks the current visibility state of the UI widgets. */
    bool bAreWidgetsVisible = true;

    /** A weak pointer to the pawn that was under the cursor in the previous frame. Used to detect hover state changes. */
    TWeakObjectPtr<APawn> LastHoveredPawn;
    
    /**
     * The widget class to use for the custom hover cursor. 
     * You must assign this in the Blueprint editor that inherits from this C++ class.
     */
    UPROPERTY(EditDefaultsOnly, Category = "UI", meta = (DisplayName = "Hover Cursor Widget"))
    TSubclassOf<UUserWidget> HoverCursorWidgetClass;

    /**
     * The runtime instance of our hover cursor widget.
     * This is created in BeginPlay and should not be set manually.
     */
    UPROPERTY()
    UUserWidget* HoverCursorWidgetInstance;

    UPROPERTY()
    TMap<APawn*, AController*> AIControllerMap;
    
    void UpdatePawnGroups();
    
    void OnActorSpawnedHandler(AActor* SpawnedActor);
    
    void OnAnyActorDestroyedHandler(AActor* DestroyedActor);
    
    void SwitchActiveGroup();
    
    void PossessNextPawn();
    
    void PossessPreviousPawn();

    /**
     * Performs a line trace from the cursor to select and possess a pawn.
     */
    void SelectAndPossessPawn();
    
    void ToggleUIVisibility();
};


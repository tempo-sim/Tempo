// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoMovement/MovementControlService.proto
// Original file comments:
// Copyright Tempo Simulation, LLC. All Rights Reserved
//
#ifndef GRPC_TempoMovement_2fMovementControlService_2eproto__INCLUDED
#define GRPC_TempoMovement_2fMovementControlService_2eproto__INCLUDED

#include "TempoMovement/MovementControlService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace TempoMovement {

class MovementControlService final {
 public:
  static constexpr char const* service_full_name() {
    return "TempoMovement.MovementControlService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoMovement::CommandableVehiclesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandableVehiclesResponse>> AsyncGetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandableVehiclesResponse>>(AsyncGetCommandableVehiclesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandableVehiclesResponse>> PrepareAsyncGetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandableVehiclesResponse>>(PrepareAsyncGetCommandableVehiclesRaw(context, request, cq));
    }
    virtual ::grpc::Status CommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::TempoScripting::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> AsyncCommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(AsyncCommandVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> PrepareAsyncCommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(PrepareAsyncCommandVehicleRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoMovement::CommandablePawnsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandablePawnsResponse>> AsyncGetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandablePawnsResponse>>(AsyncGetCommandablePawnsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandablePawnsResponse>> PrepareAsyncGetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandablePawnsResponse>>(PrepareAsyncGetCommandablePawnsRaw(context, request, cq));
    }
    virtual ::grpc::Status PawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::TempoMovement::PawnMoveToLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::PawnMoveToLocationResponse>> AsyncPawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::PawnMoveToLocationResponse>>(AsyncPawnMoveToLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::PawnMoveToLocationResponse>> PrepareAsyncPawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::PawnMoveToLocationResponse>>(PrepareAsyncPawnMoveToLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status RebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> AsyncRebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(AsyncRebuildNavigationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>> PrepareAsyncRebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>>(PrepareAsyncRebuildNavigationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandableVehiclesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandableVehiclesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandablePawnsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandablePawnsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest* request, ::TempoMovement::PawnMoveToLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest* request, ::TempoMovement::PawnMoveToLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandableVehiclesResponse>* AsyncGetCommandableVehiclesRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandableVehiclesResponse>* PrepareAsyncGetCommandableVehiclesRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* AsyncCommandVehicleRaw(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* PrepareAsyncCommandVehicleRaw(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandablePawnsResponse>* AsyncGetCommandablePawnsRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::CommandablePawnsResponse>* PrepareAsyncGetCommandablePawnsRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::PawnMoveToLocationResponse>* AsyncPawnMoveToLocationRaw(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoMovement::PawnMoveToLocationResponse>* PrepareAsyncPawnMoveToLocationRaw(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* AsyncRebuildNavigationRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TempoScripting::Empty>* PrepareAsyncRebuildNavigationRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoMovement::CommandableVehiclesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandableVehiclesResponse>> AsyncGetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandableVehiclesResponse>>(AsyncGetCommandableVehiclesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandableVehiclesResponse>> PrepareAsyncGetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandableVehiclesResponse>>(PrepareAsyncGetCommandableVehiclesRaw(context, request, cq));
    }
    ::grpc::Status CommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::TempoScripting::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> AsyncCommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(AsyncCommandVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> PrepareAsyncCommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(PrepareAsyncCommandVehicleRaw(context, request, cq));
    }
    ::grpc::Status GetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoMovement::CommandablePawnsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandablePawnsResponse>> AsyncGetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandablePawnsResponse>>(AsyncGetCommandablePawnsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandablePawnsResponse>> PrepareAsyncGetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandablePawnsResponse>>(PrepareAsyncGetCommandablePawnsRaw(context, request, cq));
    }
    ::grpc::Status PawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::TempoMovement::PawnMoveToLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::PawnMoveToLocationResponse>> AsyncPawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::PawnMoveToLocationResponse>>(AsyncPawnMoveToLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::PawnMoveToLocationResponse>> PrepareAsyncPawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoMovement::PawnMoveToLocationResponse>>(PrepareAsyncPawnMoveToLocationRaw(context, request, cq));
    }
    ::grpc::Status RebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> AsyncRebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(AsyncRebuildNavigationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>> PrepareAsyncRebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>>(PrepareAsyncRebuildNavigationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandableVehiclesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandableVehiclesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) override;
      void CommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandablePawnsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandablePawnsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest* request, ::TempoMovement::PawnMoveToLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void PawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest* request, ::TempoMovement::PawnMoveToLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)>) override;
      void RebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandableVehiclesResponse>* AsyncGetCommandableVehiclesRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandableVehiclesResponse>* PrepareAsyncGetCommandableVehiclesRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* AsyncCommandVehicleRaw(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* PrepareAsyncCommandVehicleRaw(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandablePawnsResponse>* AsyncGetCommandablePawnsRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandablePawnsResponse>* PrepareAsyncGetCommandablePawnsRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoMovement::PawnMoveToLocationResponse>* AsyncPawnMoveToLocationRaw(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoMovement::PawnMoveToLocationResponse>* PrepareAsyncPawnMoveToLocationRaw(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* AsyncRebuildNavigationRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* PrepareAsyncRebuildNavigationRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCommandableVehicles_;
    const ::grpc::internal::RpcMethod rpcmethod_CommandVehicle_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCommandablePawns_;
    const ::grpc::internal::RpcMethod rpcmethod_PawnMoveToLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_RebuildNavigation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetCommandableVehicles(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandableVehiclesResponse* response);
    virtual ::grpc::Status CommandVehicle(::grpc::ServerContext* context, const ::TempoMovement::VehicleCommandRequest* request, ::TempoScripting::Empty* response);
    virtual ::grpc::Status GetCommandablePawns(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandablePawnsResponse* response);
    virtual ::grpc::Status PawnMoveToLocation(::grpc::ServerContext* context, const ::TempoMovement::PawnMoveToLocationRequest* request, ::TempoMovement::PawnMoveToLocationResponse* response);
    virtual ::grpc::Status RebuildNavigation(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCommandableVehicles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCommandableVehicles() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCommandableVehicles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommandableVehicles(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandableVehiclesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCommandableVehicles(::grpc::ServerContext* context, ::TempoScripting::Empty* request, ::grpc::ServerAsyncResponseWriter< ::TempoMovement::CommandableVehiclesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CommandVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CommandVehicle() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CommandVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandVehicle(::grpc::ServerContext* /*context*/, const ::TempoMovement::VehicleCommandRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommandVehicle(::grpc::ServerContext* context, ::TempoMovement::VehicleCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoScripting::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCommandablePawns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCommandablePawns() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCommandablePawns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommandablePawns(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandablePawnsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCommandablePawns(::grpc::ServerContext* context, ::TempoScripting::Empty* request, ::grpc::ServerAsyncResponseWriter< ::TempoMovement::CommandablePawnsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PawnMoveToLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PawnMoveToLocation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PawnMoveToLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PawnMoveToLocation(::grpc::ServerContext* /*context*/, const ::TempoMovement::PawnMoveToLocationRequest* /*request*/, ::TempoMovement::PawnMoveToLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPawnMoveToLocation(::grpc::ServerContext* context, ::TempoMovement::PawnMoveToLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::TempoMovement::PawnMoveToLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RebuildNavigation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RebuildNavigation() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RebuildNavigation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RebuildNavigation(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRebuildNavigation(::grpc::ServerContext* context, ::TempoScripting::Empty* request, ::grpc::ServerAsyncResponseWriter< ::TempoScripting::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCommandableVehicles<WithAsyncMethod_CommandVehicle<WithAsyncMethod_GetCommandablePawns<WithAsyncMethod_PawnMoveToLocation<WithAsyncMethod_RebuildNavigation<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetCommandableVehicles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCommandableVehicles() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoMovement::CommandableVehiclesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandableVehiclesResponse* response) { return this->GetCommandableVehicles(context, request, response); }));}
    void SetMessageAllocatorFor_GetCommandableVehicles(
        ::grpc::MessageAllocator< ::TempoScripting::Empty, ::TempoMovement::CommandableVehiclesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoMovement::CommandableVehiclesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCommandableVehicles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommandableVehicles(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandableVehiclesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCommandableVehicles(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandableVehiclesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CommandVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CommandVehicle() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoMovement::VehicleCommandRequest, ::TempoScripting::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoMovement::VehicleCommandRequest* request, ::TempoScripting::Empty* response) { return this->CommandVehicle(context, request, response); }));}
    void SetMessageAllocatorFor_CommandVehicle(
        ::grpc::MessageAllocator< ::TempoMovement::VehicleCommandRequest, ::TempoScripting::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoMovement::VehicleCommandRequest, ::TempoScripting::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CommandVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandVehicle(::grpc::ServerContext* /*context*/, const ::TempoMovement::VehicleCommandRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CommandVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoMovement::VehicleCommandRequest* /*request*/, ::TempoScripting::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCommandablePawns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCommandablePawns() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoMovement::CommandablePawnsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandablePawnsResponse* response) { return this->GetCommandablePawns(context, request, response); }));}
    void SetMessageAllocatorFor_GetCommandablePawns(
        ::grpc::MessageAllocator< ::TempoScripting::Empty, ::TempoMovement::CommandablePawnsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoMovement::CommandablePawnsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCommandablePawns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommandablePawns(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandablePawnsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCommandablePawns(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandablePawnsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PawnMoveToLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PawnMoveToLocation() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoMovement::PawnMoveToLocationRequest, ::TempoMovement::PawnMoveToLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoMovement::PawnMoveToLocationRequest* request, ::TempoMovement::PawnMoveToLocationResponse* response) { return this->PawnMoveToLocation(context, request, response); }));}
    void SetMessageAllocatorFor_PawnMoveToLocation(
        ::grpc::MessageAllocator< ::TempoMovement::PawnMoveToLocationRequest, ::TempoMovement::PawnMoveToLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoMovement::PawnMoveToLocationRequest, ::TempoMovement::PawnMoveToLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PawnMoveToLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PawnMoveToLocation(::grpc::ServerContext* /*context*/, const ::TempoMovement::PawnMoveToLocationRequest* /*request*/, ::TempoMovement::PawnMoveToLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PawnMoveToLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoMovement::PawnMoveToLocationRequest* /*request*/, ::TempoMovement::PawnMoveToLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RebuildNavigation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RebuildNavigation() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoScripting::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) { return this->RebuildNavigation(context, request, response); }));}
    void SetMessageAllocatorFor_RebuildNavigation(
        ::grpc::MessageAllocator< ::TempoScripting::Empty, ::TempoScripting::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TempoScripting::Empty, ::TempoScripting::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RebuildNavigation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RebuildNavigation(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RebuildNavigation(
      ::grpc::CallbackServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetCommandableVehicles<WithCallbackMethod_CommandVehicle<WithCallbackMethod_GetCommandablePawns<WithCallbackMethod_PawnMoveToLocation<WithCallbackMethod_RebuildNavigation<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCommandableVehicles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCommandableVehicles() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCommandableVehicles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommandableVehicles(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandableVehiclesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CommandVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CommandVehicle() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CommandVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandVehicle(::grpc::ServerContext* /*context*/, const ::TempoMovement::VehicleCommandRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCommandablePawns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCommandablePawns() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCommandablePawns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommandablePawns(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandablePawnsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PawnMoveToLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PawnMoveToLocation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PawnMoveToLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PawnMoveToLocation(::grpc::ServerContext* /*context*/, const ::TempoMovement::PawnMoveToLocationRequest* /*request*/, ::TempoMovement::PawnMoveToLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RebuildNavigation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RebuildNavigation() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RebuildNavigation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RebuildNavigation(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCommandableVehicles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCommandableVehicles() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCommandableVehicles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommandableVehicles(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandableVehiclesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCommandableVehicles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CommandVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CommandVehicle() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CommandVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandVehicle(::grpc::ServerContext* /*context*/, const ::TempoMovement::VehicleCommandRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommandVehicle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCommandablePawns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCommandablePawns() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCommandablePawns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommandablePawns(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandablePawnsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCommandablePawns(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PawnMoveToLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PawnMoveToLocation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PawnMoveToLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PawnMoveToLocation(::grpc::ServerContext* /*context*/, const ::TempoMovement::PawnMoveToLocationRequest* /*request*/, ::TempoMovement::PawnMoveToLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPawnMoveToLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RebuildNavigation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RebuildNavigation() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RebuildNavigation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RebuildNavigation(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRebuildNavigation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCommandableVehicles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCommandableVehicles() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCommandableVehicles(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCommandableVehicles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommandableVehicles(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandableVehiclesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCommandableVehicles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CommandVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CommandVehicle() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CommandVehicle(context, request, response); }));
    }
    ~WithRawCallbackMethod_CommandVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandVehicle(::grpc::ServerContext* /*context*/, const ::TempoMovement::VehicleCommandRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CommandVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCommandablePawns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCommandablePawns() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCommandablePawns(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCommandablePawns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommandablePawns(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandablePawnsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCommandablePawns(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PawnMoveToLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PawnMoveToLocation() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PawnMoveToLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_PawnMoveToLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PawnMoveToLocation(::grpc::ServerContext* /*context*/, const ::TempoMovement::PawnMoveToLocationRequest* /*request*/, ::TempoMovement::PawnMoveToLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PawnMoveToLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RebuildNavigation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RebuildNavigation() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RebuildNavigation(context, request, response); }));
    }
    ~WithRawCallbackMethod_RebuildNavigation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RebuildNavigation(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RebuildNavigation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCommandableVehicles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCommandableVehicles() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoScripting::Empty, ::TempoMovement::CommandableVehiclesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoScripting::Empty, ::TempoMovement::CommandableVehiclesResponse>* streamer) {
                       return this->StreamedGetCommandableVehicles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCommandableVehicles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCommandableVehicles(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandableVehiclesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCommandableVehicles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoScripting::Empty,::TempoMovement::CommandableVehiclesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CommandVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CommandVehicle() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoMovement::VehicleCommandRequest, ::TempoScripting::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoMovement::VehicleCommandRequest, ::TempoScripting::Empty>* streamer) {
                       return this->StreamedCommandVehicle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CommandVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CommandVehicle(::grpc::ServerContext* /*context*/, const ::TempoMovement::VehicleCommandRequest* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommandVehicle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoMovement::VehicleCommandRequest,::TempoScripting::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCommandablePawns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCommandablePawns() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoScripting::Empty, ::TempoMovement::CommandablePawnsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoScripting::Empty, ::TempoMovement::CommandablePawnsResponse>* streamer) {
                       return this->StreamedGetCommandablePawns(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCommandablePawns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCommandablePawns(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoMovement::CommandablePawnsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCommandablePawns(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoScripting::Empty,::TempoMovement::CommandablePawnsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PawnMoveToLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PawnMoveToLocation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoMovement::PawnMoveToLocationRequest, ::TempoMovement::PawnMoveToLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoMovement::PawnMoveToLocationRequest, ::TempoMovement::PawnMoveToLocationResponse>* streamer) {
                       return this->StreamedPawnMoveToLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PawnMoveToLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PawnMoveToLocation(::grpc::ServerContext* /*context*/, const ::TempoMovement::PawnMoveToLocationRequest* /*request*/, ::TempoMovement::PawnMoveToLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPawnMoveToLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoMovement::PawnMoveToLocationRequest,::TempoMovement::PawnMoveToLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RebuildNavigation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RebuildNavigation() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TempoScripting::Empty, ::TempoScripting::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TempoScripting::Empty, ::TempoScripting::Empty>* streamer) {
                       return this->StreamedRebuildNavigation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RebuildNavigation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RebuildNavigation(::grpc::ServerContext* /*context*/, const ::TempoScripting::Empty* /*request*/, ::TempoScripting::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRebuildNavigation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TempoScripting::Empty,::TempoScripting::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCommandableVehicles<WithStreamedUnaryMethod_CommandVehicle<WithStreamedUnaryMethod_GetCommandablePawns<WithStreamedUnaryMethod_PawnMoveToLocation<WithStreamedUnaryMethod_RebuildNavigation<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCommandableVehicles<WithStreamedUnaryMethod_CommandVehicle<WithStreamedUnaryMethod_GetCommandablePawns<WithStreamedUnaryMethod_PawnMoveToLocation<WithStreamedUnaryMethod_RebuildNavigation<Service > > > > > StreamedService;
};

}  // namespace TempoMovement


#endif  // GRPC_TempoMovement_2fMovementControlService_2eproto__INCLUDED

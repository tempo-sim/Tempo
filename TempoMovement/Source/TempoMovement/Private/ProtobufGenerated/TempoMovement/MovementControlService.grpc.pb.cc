// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TempoMovement/MovementControlService.proto

#include "TempoMovement/MovementControlService.pb.h"
#include "TempoMovement/MovementControlService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace TempoMovement {

static const char* MovementControlService_method_names[] = {
  "/TempoMovement.MovementControlService/GetCommandableVehicles",
  "/TempoMovement.MovementControlService/CommandVehicle",
  "/TempoMovement.MovementControlService/GetCommandablePawns",
  "/TempoMovement.MovementControlService/PawnMoveToLocation",
  "/TempoMovement.MovementControlService/RebuildNavigation",
};

std::unique_ptr< MovementControlService::Stub> MovementControlService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MovementControlService::Stub> stub(new MovementControlService::Stub(channel, options));
  return stub;
}

MovementControlService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetCommandableVehicles_(MovementControlService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CommandVehicle_(MovementControlService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCommandablePawns_(MovementControlService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PawnMoveToLocation_(MovementControlService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RebuildNavigation_(MovementControlService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MovementControlService::Stub::GetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoMovement::CommandableVehiclesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoMovement::CommandableVehiclesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCommandableVehicles_, context, request, response);
}

void MovementControlService::Stub::async::GetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandableVehiclesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoMovement::CommandableVehiclesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCommandableVehicles_, context, request, response, std::move(f));
}

void MovementControlService::Stub::async::GetCommandableVehicles(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandableVehiclesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCommandableVehicles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandableVehiclesResponse>* MovementControlService::Stub::PrepareAsyncGetCommandableVehiclesRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoMovement::CommandableVehiclesResponse, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCommandableVehicles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandableVehiclesResponse>* MovementControlService::Stub::AsyncGetCommandableVehiclesRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCommandableVehiclesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MovementControlService::Stub::CommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoMovement::VehicleCommandRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CommandVehicle_, context, request, response);
}

void MovementControlService::Stub::async::CommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoMovement::VehicleCommandRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CommandVehicle_, context, request, response, std::move(f));
}

void MovementControlService::Stub::async::CommandVehicle(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CommandVehicle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* MovementControlService::Stub::PrepareAsyncCommandVehicleRaw(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoMovement::VehicleCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CommandVehicle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* MovementControlService::Stub::AsyncCommandVehicleRaw(::grpc::ClientContext* context, const ::TempoMovement::VehicleCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCommandVehicleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MovementControlService::Stub::GetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoMovement::CommandablePawnsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoMovement::CommandablePawnsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCommandablePawns_, context, request, response);
}

void MovementControlService::Stub::async::GetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandablePawnsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoMovement::CommandablePawnsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCommandablePawns_, context, request, response, std::move(f));
}

void MovementControlService::Stub::async::GetCommandablePawns(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandablePawnsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCommandablePawns_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandablePawnsResponse>* MovementControlService::Stub::PrepareAsyncGetCommandablePawnsRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoMovement::CommandablePawnsResponse, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCommandablePawns_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoMovement::CommandablePawnsResponse>* MovementControlService::Stub::AsyncGetCommandablePawnsRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCommandablePawnsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MovementControlService::Stub::PawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::TempoMovement::PawnMoveToLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoMovement::PawnMoveToLocationRequest, ::TempoMovement::PawnMoveToLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PawnMoveToLocation_, context, request, response);
}

void MovementControlService::Stub::async::PawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest* request, ::TempoMovement::PawnMoveToLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoMovement::PawnMoveToLocationRequest, ::TempoMovement::PawnMoveToLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PawnMoveToLocation_, context, request, response, std::move(f));
}

void MovementControlService::Stub::async::PawnMoveToLocation(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest* request, ::TempoMovement::PawnMoveToLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PawnMoveToLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoMovement::PawnMoveToLocationResponse>* MovementControlService::Stub::PrepareAsyncPawnMoveToLocationRaw(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoMovement::PawnMoveToLocationResponse, ::TempoMovement::PawnMoveToLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PawnMoveToLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoMovement::PawnMoveToLocationResponse>* MovementControlService::Stub::AsyncPawnMoveToLocationRaw(::grpc::ClientContext* context, const ::TempoMovement::PawnMoveToLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPawnMoveToLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MovementControlService::Stub::RebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::TempoScripting::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RebuildNavigation_, context, request, response);
}

void MovementControlService::Stub::async::RebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RebuildNavigation_, context, request, response, std::move(f));
}

void MovementControlService::Stub::async::RebuildNavigation(::grpc::ClientContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RebuildNavigation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* MovementControlService::Stub::PrepareAsyncRebuildNavigationRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RebuildNavigation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TempoScripting::Empty>* MovementControlService::Stub::AsyncRebuildNavigationRaw(::grpc::ClientContext* context, const ::TempoScripting::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRebuildNavigationRaw(context, request, cq);
  result->StartCall();
  return result;
}

MovementControlService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MovementControlService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MovementControlService::Service, ::TempoScripting::Empty, ::TempoMovement::CommandableVehiclesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MovementControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoMovement::CommandableVehiclesResponse* resp) {
               return service->GetCommandableVehicles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MovementControlService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MovementControlService::Service, ::TempoMovement::VehicleCommandRequest, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MovementControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoMovement::VehicleCommandRequest* req,
             ::TempoScripting::Empty* resp) {
               return service->CommandVehicle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MovementControlService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MovementControlService::Service, ::TempoScripting::Empty, ::TempoMovement::CommandablePawnsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MovementControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoMovement::CommandablePawnsResponse* resp) {
               return service->GetCommandablePawns(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MovementControlService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MovementControlService::Service, ::TempoMovement::PawnMoveToLocationRequest, ::TempoMovement::PawnMoveToLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MovementControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoMovement::PawnMoveToLocationRequest* req,
             ::TempoMovement::PawnMoveToLocationResponse* resp) {
               return service->PawnMoveToLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MovementControlService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MovementControlService::Service, ::TempoScripting::Empty, ::TempoScripting::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MovementControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TempoScripting::Empty* req,
             ::TempoScripting::Empty* resp) {
               return service->RebuildNavigation(ctx, req, resp);
             }, this)));
}

MovementControlService::Service::~Service() {
}

::grpc::Status MovementControlService::Service::GetCommandableVehicles(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandableVehiclesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MovementControlService::Service::CommandVehicle(::grpc::ServerContext* context, const ::TempoMovement::VehicleCommandRequest* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MovementControlService::Service::GetCommandablePawns(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoMovement::CommandablePawnsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MovementControlService::Service::PawnMoveToLocation(::grpc::ServerContext* context, const ::TempoMovement::PawnMoveToLocationRequest* request, ::TempoMovement::PawnMoveToLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MovementControlService::Service::RebuildNavigation(::grpc::ServerContext* context, const ::TempoScripting::Empty* request, ::TempoScripting::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TempoMovement

